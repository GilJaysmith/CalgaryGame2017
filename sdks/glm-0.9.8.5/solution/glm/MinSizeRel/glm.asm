; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

include listing.inc

INCLUDELIB MSVCRT

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??E?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,0>::operator--
PUBLIC	??E?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,0>::operator--
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@G@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@GG@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??E?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	??E?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@XZ			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@F@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@FF@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??E?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,0>::operator--
PUBLIC	??E?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,0>::operator--
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??E?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,0>::operator--
PUBLIC	??E?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,0>::operator--
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??0?$tvec4@E$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QEAA@E@Z			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QEAA@EEEE@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??E?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	??E?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec4<signed char,0>::operator[]
PUBLIC	??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec4<signed char,0>::operator[]
PUBLIC	??0?$tvec4@C$0A@@glm@@QEAA@XZ			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QEAA@C@Z			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QEAA@CCCC@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??E?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,0>::operator--
PUBLIC	??E?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,0>::operator--
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??E?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	??E?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@E$01@glm@@SAHXZ			; glm::tvec1<unsigned char,2>::length
PUBLIC	??A?$tvec1@E$01@glm@@QEAAAEAEH@Z		; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??A?$tvec1@E$01@glm@@QEBAAEBEH@Z		; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??0?$tvec1@E$01@glm@@QEAA@XZ			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QEAA@E@Z			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??E?$tvec1@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	??E?$tvec1@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	?length@?$tvec1@G$01@glm@@SAHXZ			; glm::tvec1<unsigned short,2>::length
PUBLIC	??A?$tvec1@G$01@glm@@QEAAAEAGH@Z		; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??A?$tvec1@G$01@glm@@QEBAAEBGH@Z		; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??0?$tvec1@G$01@glm@@QEAA@XZ			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QEAA@G@Z			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??E?$tvec1@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	??E?$tvec1@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	?length@?$tvec1@I$01@glm@@SAHXZ			; glm::tvec1<unsigned int,2>::length
PUBLIC	??A?$tvec1@I$01@glm@@QEAAAEAIH@Z		; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??A?$tvec1@I$01@glm@@QEBAAEBIH@Z		; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??0?$tvec1@I$01@glm@@QEAA@XZ			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??E?$tvec1@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	??E?$tvec1@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	?length@?$tvec1@_K$01@glm@@SAHXZ		; glm::tvec1<unsigned __int64,2>::length
PUBLIC	??A?$tvec1@_K$01@glm@@QEAAAEA_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec1@_K$01@glm@@QEBAAEB_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec1@_K$01@glm@@QEAA@XZ			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QEAA@_K@Z			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??E?$tvec1@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec1@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec1@C$01@glm@@SAHXZ			; glm::tvec1<signed char,2>::length
PUBLIC	??A?$tvec1@C$01@glm@@QEAAAEACH@Z		; glm::tvec1<signed char,2>::operator[]
PUBLIC	??A?$tvec1@C$01@glm@@QEBAAEBCH@Z		; glm::tvec1<signed char,2>::operator[]
PUBLIC	??0?$tvec1@C$01@glm@@QEAA@XZ			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QEAA@C@Z			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??E?$tvec1@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,2>::operator--
PUBLIC	??E?$tvec1@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,2>::operator--
PUBLIC	?length@?$tvec1@F$01@glm@@SAHXZ			; glm::tvec1<short,2>::length
PUBLIC	??A?$tvec1@F$01@glm@@QEAAAEAFH@Z		; glm::tvec1<short,2>::operator[]
PUBLIC	??A?$tvec1@F$01@glm@@QEBAAEBFH@Z		; glm::tvec1<short,2>::operator[]
PUBLIC	??0?$tvec1@F$01@glm@@QEAA@XZ			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QEAA@F@Z			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??E?$tvec1@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,2>::operator--
PUBLIC	??E?$tvec1@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,2>::operator--
PUBLIC	?length@?$tvec1@H$01@glm@@SAHXZ			; glm::tvec1<int,2>::length
PUBLIC	??A?$tvec1@H$01@glm@@QEAAAEAHH@Z		; glm::tvec1<int,2>::operator[]
PUBLIC	??A?$tvec1@H$01@glm@@QEBAAEBHH@Z		; glm::tvec1<int,2>::operator[]
PUBLIC	??0?$tvec1@H$01@glm@@QEAA@XZ			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QEAA@H@Z			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??E?$tvec1@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,2>::operator--
PUBLIC	??E?$tvec1@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,2>::operator--
PUBLIC	?length@?$tvec1@_J$01@glm@@SAHXZ		; glm::tvec1<__int64,2>::length
PUBLIC	??A?$tvec1@_J$01@glm@@QEAAAEA_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??A?$tvec1@_J$01@glm@@QEBAAEB_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??0?$tvec1@_J$01@glm@@QEAA@XZ			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QEAA@_J@Z			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??E?$tvec1@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,2>::operator--
PUBLIC	??E?$tvec1@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,2>::operator--
PUBLIC	?length@?$tvec1@M$01@glm@@SAHXZ			; glm::tvec1<float,2>::length
PUBLIC	??A?$tvec1@M$01@glm@@QEAAAEAMH@Z		; glm::tvec1<float,2>::operator[]
PUBLIC	??A?$tvec1@M$01@glm@@QEBAAEBMH@Z		; glm::tvec1<float,2>::operator[]
PUBLIC	??0?$tvec1@M$01@glm@@QEAA@XZ			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QEAA@M@Z			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??E?$tvec1@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,2>::operator--
PUBLIC	??E?$tvec1@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,2>::operator--
PUBLIC	?length@?$tvec1@N$01@glm@@SAHXZ			; glm::tvec1<double,2>::length
PUBLIC	??A?$tvec1@N$01@glm@@QEAAAEANH@Z		; glm::tvec1<double,2>::operator[]
PUBLIC	??A?$tvec1@N$01@glm@@QEBAAEBNH@Z		; glm::tvec1<double,2>::operator[]
PUBLIC	??0?$tvec1@N$01@glm@@QEAA@XZ			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QEAA@N@Z			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??E?$tvec1@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,2>::operator--
PUBLIC	??E?$tvec1@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,2>::operator--
PUBLIC	?length@?$tvec1@E$00@glm@@SAHXZ			; glm::tvec1<unsigned char,1>::length
PUBLIC	??A?$tvec1@E$00@glm@@QEAAAEAEH@Z		; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??A?$tvec1@E$00@glm@@QEBAAEBEH@Z		; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??0?$tvec1@E$00@glm@@QEAA@XZ			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QEAA@E@Z			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??E?$tvec1@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	??E?$tvec1@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	?length@?$tvec1@G$00@glm@@SAHXZ			; glm::tvec1<unsigned short,1>::length
PUBLIC	??A?$tvec1@G$00@glm@@QEAAAEAGH@Z		; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??A?$tvec1@G$00@glm@@QEBAAEBGH@Z		; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??0?$tvec1@G$00@glm@@QEAA@XZ			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QEAA@G@Z			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??E?$tvec1@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	??E?$tvec1@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	?length@?$tvec1@I$00@glm@@SAHXZ			; glm::tvec1<unsigned int,1>::length
PUBLIC	??A?$tvec1@I$00@glm@@QEAAAEAIH@Z		; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??A?$tvec1@I$00@glm@@QEBAAEBIH@Z		; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??0?$tvec1@I$00@glm@@QEAA@XZ			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??E?$tvec1@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	??E?$tvec1@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	?length@?$tvec1@_K$00@glm@@SAHXZ		; glm::tvec1<unsigned __int64,1>::length
PUBLIC	??A?$tvec1@_K$00@glm@@QEAAAEA_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec1@_K$00@glm@@QEBAAEB_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec1@_K$00@glm@@QEAA@XZ			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QEAA@_K@Z			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??E?$tvec1@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec1@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec1@C$00@glm@@SAHXZ			; glm::tvec1<signed char,1>::length
PUBLIC	??A?$tvec1@C$00@glm@@QEAAAEACH@Z		; glm::tvec1<signed char,1>::operator[]
PUBLIC	??A?$tvec1@C$00@glm@@QEBAAEBCH@Z		; glm::tvec1<signed char,1>::operator[]
PUBLIC	??0?$tvec1@C$00@glm@@QEAA@XZ			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QEAA@C@Z			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??E?$tvec1@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,1>::operator--
PUBLIC	??E?$tvec1@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,1>::operator--
PUBLIC	?length@?$tvec1@F$00@glm@@SAHXZ			; glm::tvec1<short,1>::length
PUBLIC	??A?$tvec1@F$00@glm@@QEAAAEAFH@Z		; glm::tvec1<short,1>::operator[]
PUBLIC	??A?$tvec1@F$00@glm@@QEBAAEBFH@Z		; glm::tvec1<short,1>::operator[]
PUBLIC	??0?$tvec1@F$00@glm@@QEAA@XZ			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QEAA@F@Z			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??E?$tvec1@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,1>::operator--
PUBLIC	??E?$tvec1@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,1>::operator--
PUBLIC	?length@?$tvec1@H$00@glm@@SAHXZ			; glm::tvec1<int,1>::length
PUBLIC	??A?$tvec1@H$00@glm@@QEAAAEAHH@Z		; glm::tvec1<int,1>::operator[]
PUBLIC	??A?$tvec1@H$00@glm@@QEBAAEBHH@Z		; glm::tvec1<int,1>::operator[]
PUBLIC	??0?$tvec1@H$00@glm@@QEAA@XZ			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QEAA@H@Z			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??E?$tvec1@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,1>::operator--
PUBLIC	??E?$tvec1@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,1>::operator--
PUBLIC	?length@?$tvec1@_J$00@glm@@SAHXZ		; glm::tvec1<__int64,1>::length
PUBLIC	??A?$tvec1@_J$00@glm@@QEAAAEA_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??A?$tvec1@_J$00@glm@@QEBAAEB_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??0?$tvec1@_J$00@glm@@QEAA@XZ			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QEAA@_J@Z			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??E?$tvec1@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,1>::operator--
PUBLIC	??E?$tvec1@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,1>::operator--
PUBLIC	?length@?$tvec1@M$00@glm@@SAHXZ			; glm::tvec1<float,1>::length
PUBLIC	??A?$tvec1@M$00@glm@@QEAAAEAMH@Z		; glm::tvec1<float,1>::operator[]
PUBLIC	??A?$tvec1@M$00@glm@@QEBAAEBMH@Z		; glm::tvec1<float,1>::operator[]
PUBLIC	??0?$tvec1@M$00@glm@@QEAA@XZ			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QEAA@M@Z			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??E?$tvec1@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,1>::operator--
PUBLIC	??E?$tvec1@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,1>::operator--
PUBLIC	?length@?$tvec1@N$00@glm@@SAHXZ			; glm::tvec1<double,1>::length
PUBLIC	??A?$tvec1@N$00@glm@@QEAAAEANH@Z		; glm::tvec1<double,1>::operator[]
PUBLIC	??A?$tvec1@N$00@glm@@QEBAAEBNH@Z		; glm::tvec1<double,1>::operator[]
PUBLIC	??0?$tvec1@N$00@glm@@QEAA@XZ			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QEAA@N@Z			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??E?$tvec1@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,1>::operator--
PUBLIC	??E?$tvec1@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,1>::operator--
PUBLIC	?length@?$tvec1@E$0A@@glm@@SAHXZ		; glm::tvec1<unsigned char,0>::length
PUBLIC	??A?$tvec1@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??A?$tvec1@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??0?$tvec1@E$0A@@glm@@QEAA@XZ			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QEAA@E@Z			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??E?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	??E?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	?length@?$tvec1@G$0A@@glm@@SAHXZ		; glm::tvec1<unsigned short,0>::length
PUBLIC	??A?$tvec1@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??A?$tvec1@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??0?$tvec1@G$0A@@glm@@QEAA@XZ			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QEAA@G@Z			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??E?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	??E?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	?length@?$tvec1@I$0A@@glm@@SAHXZ		; glm::tvec1<unsigned int,0>::length
PUBLIC	??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@XZ			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??E?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	??E?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@_K$0A@@glm@@SAHXZ		; glm::tvec1<unsigned __int64,0>::length
PUBLIC	??A?$tvec1@_K$0A@@glm@@QEAAAEA_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec1@_K$0A@@glm@@QEAA@XZ			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??E?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec1@C$0A@@glm@@SAHXZ		; glm::tvec1<signed char,0>::length
PUBLIC	??A?$tvec1@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec1<signed char,0>::operator[]
PUBLIC	??A?$tvec1@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec1<signed char,0>::operator[]
PUBLIC	??0?$tvec1@C$0A@@glm@@QEAA@XZ			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QEAA@C@Z			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??E?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<signed char,0>::operator--
PUBLIC	??E?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<signed char,0>::operator--
PUBLIC	?length@?$tvec1@F$0A@@glm@@SAHXZ		; glm::tvec1<short,0>::length
PUBLIC	??A?$tvec1@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec1<short,0>::operator[]
PUBLIC	??A?$tvec1@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec1<short,0>::operator[]
PUBLIC	??0?$tvec1@F$0A@@glm@@QEAA@XZ			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QEAA@F@Z			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??E?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<short,0>::operator--
PUBLIC	??E?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<short,0>::operator--
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QEAAAEAHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@XZ			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,0>::operator--
PUBLIC	??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,0>::operator--
PUBLIC	?length@?$tvec1@_J$0A@@glm@@SAHXZ		; glm::tvec1<__int64,0>::length
PUBLIC	??A?$tvec1@_J$0A@@glm@@QEAAAEA_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??A?$tvec1@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??0?$tvec1@_J$0A@@glm@@QEAA@XZ			; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??E?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<__int64,0>::operator--
PUBLIC	??E?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<__int64,0>::operator--
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@XZ			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??E?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<float,0>::operator--
PUBLIC	??E?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<float,0>::operator--
PUBLIC	?length@?$tvec1@N$0A@@glm@@SAHXZ		; glm::tvec1<double,0>::length
PUBLIC	??A?$tvec1@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec1<double,0>::operator[]
PUBLIC	??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec1<double,0>::operator[]
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@XZ			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??E?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<double,0>::operator--
PUBLIC	??E?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<double,0>::operator--
PUBLIC	?length@?$tvec2@E$01@glm@@SAHXZ			; glm::tvec2<unsigned char,2>::length
PUBLIC	??A?$tvec2@E$01@glm@@QEAAAEAEH@Z		; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??A?$tvec2@E$01@glm@@QEBAAEBEH@Z		; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??0?$tvec2@E$01@glm@@QEAA@XZ			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QEAA@E@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QEAA@EE@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??E?$tvec2@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	??E?$tvec2@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	?length@?$tvec2@G$01@glm@@SAHXZ			; glm::tvec2<unsigned short,2>::length
PUBLIC	??A?$tvec2@G$01@glm@@QEAAAEAGH@Z		; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??A?$tvec2@G$01@glm@@QEBAAEBGH@Z		; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??0?$tvec2@G$01@glm@@QEAA@XZ			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QEAA@G@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QEAA@GG@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??E?$tvec2@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	??E?$tvec2@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	?length@?$tvec2@I$01@glm@@SAHXZ			; glm::tvec2<unsigned int,2>::length
PUBLIC	??A?$tvec2@I$01@glm@@QEAAAEAIH@Z		; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??A?$tvec2@I$01@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??0?$tvec2@I$01@glm@@QEAA@XZ			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??E?$tvec2@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	??E?$tvec2@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	?length@?$tvec2@_K$01@glm@@SAHXZ		; glm::tvec2<unsigned __int64,2>::length
PUBLIC	??A?$tvec2@_K$01@glm@@QEAAAEA_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec2@_K$01@glm@@QEBAAEB_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec2@_K$01@glm@@QEAA@XZ			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QEAA@_K@Z			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QEAA@_K0@Z		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??E?$tvec2@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec2@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec2@C$01@glm@@SAHXZ			; glm::tvec2<signed char,2>::length
PUBLIC	??A?$tvec2@C$01@glm@@QEAAAEACH@Z		; glm::tvec2<signed char,2>::operator[]
PUBLIC	??A?$tvec2@C$01@glm@@QEBAAEBCH@Z		; glm::tvec2<signed char,2>::operator[]
PUBLIC	??0?$tvec2@C$01@glm@@QEAA@XZ			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QEAA@C@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QEAA@CC@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??E?$tvec2@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,2>::operator--
PUBLIC	??E?$tvec2@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,2>::operator--
PUBLIC	?length@?$tvec2@F$01@glm@@SAHXZ			; glm::tvec2<short,2>::length
PUBLIC	??A?$tvec2@F$01@glm@@QEAAAEAFH@Z		; glm::tvec2<short,2>::operator[]
PUBLIC	??A?$tvec2@F$01@glm@@QEBAAEBFH@Z		; glm::tvec2<short,2>::operator[]
PUBLIC	??0?$tvec2@F$01@glm@@QEAA@XZ			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QEAA@F@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QEAA@FF@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??E?$tvec2@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,2>::operator--
PUBLIC	??E?$tvec2@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,2>::operator--
PUBLIC	?length@?$tvec2@H$01@glm@@SAHXZ			; glm::tvec2<int,2>::length
PUBLIC	??A?$tvec2@H$01@glm@@QEAAAEAHH@Z		; glm::tvec2<int,2>::operator[]
PUBLIC	??A?$tvec2@H$01@glm@@QEBAAEBHH@Z		; glm::tvec2<int,2>::operator[]
PUBLIC	??0?$tvec2@H$01@glm@@QEAA@XZ			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QEAA@H@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QEAA@HH@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??E?$tvec2@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,2>::operator--
PUBLIC	??E?$tvec2@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,2>::operator--
PUBLIC	?length@?$tvec2@_J$01@glm@@SAHXZ		; glm::tvec2<__int64,2>::length
PUBLIC	??A?$tvec2@_J$01@glm@@QEAAAEA_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??A?$tvec2@_J$01@glm@@QEBAAEB_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??0?$tvec2@_J$01@glm@@QEAA@XZ			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QEAA@_J@Z			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QEAA@_J0@Z		; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??E?$tvec2@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,2>::operator--
PUBLIC	??E?$tvec2@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,2>::operator--
PUBLIC	?length@?$tvec2@M$01@glm@@SAHXZ			; glm::tvec2<float,2>::length
PUBLIC	??A?$tvec2@M$01@glm@@QEAAAEAMH@Z		; glm::tvec2<float,2>::operator[]
PUBLIC	??A?$tvec2@M$01@glm@@QEBAAEBMH@Z		; glm::tvec2<float,2>::operator[]
PUBLIC	??0?$tvec2@M$01@glm@@QEAA@XZ			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QEAA@M@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QEAA@MM@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??E?$tvec2@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,2>::operator--
PUBLIC	??E?$tvec2@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,2>::operator--
PUBLIC	?length@?$tvec2@N$01@glm@@SAHXZ			; glm::tvec2<double,2>::length
PUBLIC	??A?$tvec2@N$01@glm@@QEAAAEANH@Z		; glm::tvec2<double,2>::operator[]
PUBLIC	??A?$tvec2@N$01@glm@@QEBAAEBNH@Z		; glm::tvec2<double,2>::operator[]
PUBLIC	??0?$tvec2@N$01@glm@@QEAA@XZ			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QEAA@N@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QEAA@NN@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??E?$tvec2@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,2>::operator--
PUBLIC	??E?$tvec2@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,2>::operator--
PUBLIC	?length@?$tvec2@E$00@glm@@SAHXZ			; glm::tvec2<unsigned char,1>::length
PUBLIC	??A?$tvec2@E$00@glm@@QEAAAEAEH@Z		; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??A?$tvec2@E$00@glm@@QEBAAEBEH@Z		; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??0?$tvec2@E$00@glm@@QEAA@XZ			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QEAA@E@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QEAA@EE@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??E?$tvec2@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	??E?$tvec2@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	?length@?$tvec2@G$00@glm@@SAHXZ			; glm::tvec2<unsigned short,1>::length
PUBLIC	??A?$tvec2@G$00@glm@@QEAAAEAGH@Z		; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??A?$tvec2@G$00@glm@@QEBAAEBGH@Z		; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??0?$tvec2@G$00@glm@@QEAA@XZ			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QEAA@G@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QEAA@GG@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??E?$tvec2@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	??E?$tvec2@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	?length@?$tvec2@I$00@glm@@SAHXZ			; glm::tvec2<unsigned int,1>::length
PUBLIC	??A?$tvec2@I$00@glm@@QEAAAEAIH@Z		; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??A?$tvec2@I$00@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??0?$tvec2@I$00@glm@@QEAA@XZ			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??E?$tvec2@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	??E?$tvec2@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	?length@?$tvec2@_K$00@glm@@SAHXZ		; glm::tvec2<unsigned __int64,1>::length
PUBLIC	??A?$tvec2@_K$00@glm@@QEAAAEA_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec2@_K$00@glm@@QEBAAEB_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec2@_K$00@glm@@QEAA@XZ			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QEAA@_K@Z			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QEAA@_K0@Z		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??E?$tvec2@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec2@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec2@C$00@glm@@SAHXZ			; glm::tvec2<signed char,1>::length
PUBLIC	??A?$tvec2@C$00@glm@@QEAAAEACH@Z		; glm::tvec2<signed char,1>::operator[]
PUBLIC	??A?$tvec2@C$00@glm@@QEBAAEBCH@Z		; glm::tvec2<signed char,1>::operator[]
PUBLIC	??0?$tvec2@C$00@glm@@QEAA@XZ			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QEAA@C@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QEAA@CC@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??E?$tvec2@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,1>::operator--
PUBLIC	??E?$tvec2@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,1>::operator--
PUBLIC	?length@?$tvec2@F$00@glm@@SAHXZ			; glm::tvec2<short,1>::length
PUBLIC	??A?$tvec2@F$00@glm@@QEAAAEAFH@Z		; glm::tvec2<short,1>::operator[]
PUBLIC	??A?$tvec2@F$00@glm@@QEBAAEBFH@Z		; glm::tvec2<short,1>::operator[]
PUBLIC	??0?$tvec2@F$00@glm@@QEAA@XZ			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QEAA@F@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QEAA@FF@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??E?$tvec2@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<short,1>::operator--
PUBLIC	??E?$tvec2@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<short,1>::operator--
PUBLIC	?length@?$tvec2@H$00@glm@@SAHXZ			; glm::tvec2<int,1>::length
PUBLIC	??A?$tvec2@H$00@glm@@QEAAAEAHH@Z		; glm::tvec2<int,1>::operator[]
PUBLIC	??A?$tvec2@H$00@glm@@QEBAAEBHH@Z		; glm::tvec2<int,1>::operator[]
PUBLIC	??0?$tvec2@H$00@glm@@QEAA@XZ			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QEAA@H@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QEAA@HH@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??E?$tvec2@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,1>::operator--
PUBLIC	??E?$tvec2@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,1>::operator--
PUBLIC	?length@?$tvec2@_J$00@glm@@SAHXZ		; glm::tvec2<__int64,1>::length
PUBLIC	??A?$tvec2@_J$00@glm@@QEAAAEA_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??A?$tvec2@_J$00@glm@@QEBAAEB_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??0?$tvec2@_J$00@glm@@QEAA@XZ			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QEAA@_J@Z			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QEAA@_J0@Z		; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??E?$tvec2@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,1>::operator--
PUBLIC	??E?$tvec2@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,1>::operator--
PUBLIC	?length@?$tvec2@M$00@glm@@SAHXZ			; glm::tvec2<float,1>::length
PUBLIC	??A?$tvec2@M$00@glm@@QEAAAEAMH@Z		; glm::tvec2<float,1>::operator[]
PUBLIC	??A?$tvec2@M$00@glm@@QEBAAEBMH@Z		; glm::tvec2<float,1>::operator[]
PUBLIC	??0?$tvec2@M$00@glm@@QEAA@XZ			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QEAA@M@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QEAA@MM@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??E?$tvec2@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<float,1>::operator--
PUBLIC	??E?$tvec2@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<float,1>::operator--
PUBLIC	?length@?$tvec2@N$00@glm@@SAHXZ			; glm::tvec2<double,1>::length
PUBLIC	??A?$tvec2@N$00@glm@@QEAAAEANH@Z		; glm::tvec2<double,1>::operator[]
PUBLIC	??A?$tvec2@N$00@glm@@QEBAAEBNH@Z		; glm::tvec2<double,1>::operator[]
PUBLIC	??0?$tvec2@N$00@glm@@QEAA@XZ			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QEAA@N@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QEAA@NN@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??E?$tvec2@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,1>::operator--
PUBLIC	??E?$tvec2@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,1>::operator--
PUBLIC	?length@?$tvec2@E$0A@@glm@@SAHXZ		; glm::tvec2<unsigned char,0>::length
PUBLIC	??A?$tvec2@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@E@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@EE@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??E?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	??E?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	?length@?$tvec2@_K$0A@@glm@@SAHXZ		; glm::tvec2<unsigned __int64,0>::length
PUBLIC	??A?$tvec2@_K$0A@@glm@@QEAAAEA_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??E?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec2@C$0A@@glm@@SAHXZ		; glm::tvec2<signed char,0>::length
PUBLIC	??A?$tvec2@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec2<signed char,0>::operator[]
PUBLIC	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec2<signed char,0>::operator[]
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@XZ			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@C@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@CC@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??E?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<signed char,0>::operator--
PUBLIC	??E?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<signed char,0>::operator--
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEAAAEAHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??E?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<int,0>::operator--
PUBLIC	??E?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<int,0>::operator--
PUBLIC	?length@?$tvec2@_J$0A@@glm@@SAHXZ		; glm::tvec2<__int64,0>::length
PUBLIC	??A?$tvec2@_J$0A@@glm@@QEAAAEA_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@XZ			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??E?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<__int64,0>::operator--
PUBLIC	??E?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<__int64,0>::operator--
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec2<double,0>::operator[]
PUBLIC	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@XZ			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??E?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec2<double,0>::operator--
PUBLIC	??E?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec2<double,0>::operator--
PUBLIC	?length@?$tvec3@E$01@glm@@SAHXZ			; glm::tvec3<unsigned char,2>::length
PUBLIC	??A?$tvec3@E$01@glm@@QEAAAEAEH@Z		; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??A?$tvec3@E$01@glm@@QEBAAEBEH@Z		; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??0?$tvec3@E$01@glm@@QEAA@XZ			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QEAA@E@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QEAA@EEE@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??E?$tvec3@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	??E?$tvec3@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	?length@?$tvec3@G$01@glm@@SAHXZ			; glm::tvec3<unsigned short,2>::length
PUBLIC	??A?$tvec3@G$01@glm@@QEAAAEAGH@Z		; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??A?$tvec3@G$01@glm@@QEBAAEBGH@Z		; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??0?$tvec3@G$01@glm@@QEAA@XZ			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QEAA@G@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QEAA@GGG@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??E?$tvec3@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	??E?$tvec3@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	?length@?$tvec3@I$01@glm@@SAHXZ			; glm::tvec3<unsigned int,2>::length
PUBLIC	??A?$tvec3@I$01@glm@@QEAAAEAIH@Z		; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??A?$tvec3@I$01@glm@@QEBAAEBIH@Z		; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??0?$tvec3@I$01@glm@@QEAA@XZ			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QEAA@I@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QEAA@III@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??E?$tvec3@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	??E?$tvec3@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	?length@?$tvec3@_K$01@glm@@SAHXZ		; glm::tvec3<unsigned __int64,2>::length
PUBLIC	??A?$tvec3@_K$01@glm@@QEAAAEA_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec3@_K$01@glm@@QEBAAEB_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec3@_K$01@glm@@QEAA@XZ			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QEAA@_K@Z			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QEAA@_K00@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??E?$tvec3@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec3@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec3@C$01@glm@@SAHXZ			; glm::tvec3<signed char,2>::length
PUBLIC	??A?$tvec3@C$01@glm@@QEAAAEACH@Z		; glm::tvec3<signed char,2>::operator[]
PUBLIC	??A?$tvec3@C$01@glm@@QEBAAEBCH@Z		; glm::tvec3<signed char,2>::operator[]
PUBLIC	??0?$tvec3@C$01@glm@@QEAA@XZ			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QEAA@C@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QEAA@CCC@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??E?$tvec3@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,2>::operator--
PUBLIC	??E?$tvec3@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,2>::operator--
PUBLIC	?length@?$tvec3@F$01@glm@@SAHXZ			; glm::tvec3<short,2>::length
PUBLIC	??A?$tvec3@F$01@glm@@QEAAAEAFH@Z		; glm::tvec3<short,2>::operator[]
PUBLIC	??A?$tvec3@F$01@glm@@QEBAAEBFH@Z		; glm::tvec3<short,2>::operator[]
PUBLIC	??0?$tvec3@F$01@glm@@QEAA@XZ			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QEAA@F@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QEAA@FFF@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??E?$tvec3@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,2>::operator--
PUBLIC	??E?$tvec3@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,2>::operator--
PUBLIC	?length@?$tvec3@H$01@glm@@SAHXZ			; glm::tvec3<int,2>::length
PUBLIC	??A?$tvec3@H$01@glm@@QEAAAEAHH@Z		; glm::tvec3<int,2>::operator[]
PUBLIC	??A?$tvec3@H$01@glm@@QEBAAEBHH@Z		; glm::tvec3<int,2>::operator[]
PUBLIC	??0?$tvec3@H$01@glm@@QEAA@XZ			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QEAA@H@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QEAA@HHH@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??E?$tvec3@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,2>::operator--
PUBLIC	??E?$tvec3@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,2>::operator--
PUBLIC	?length@?$tvec3@_J$01@glm@@SAHXZ		; glm::tvec3<__int64,2>::length
PUBLIC	??A?$tvec3@_J$01@glm@@QEAAAEA_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??A?$tvec3@_J$01@glm@@QEBAAEB_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??0?$tvec3@_J$01@glm@@QEAA@XZ			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QEAA@_J@Z			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QEAA@_J00@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??E?$tvec3@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,2>::operator--
PUBLIC	??E?$tvec3@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,2>::operator--
PUBLIC	?length@?$tvec3@M$01@glm@@SAHXZ			; glm::tvec3<float,2>::length
PUBLIC	??A?$tvec3@M$01@glm@@QEAAAEAMH@Z		; glm::tvec3<float,2>::operator[]
PUBLIC	??A?$tvec3@M$01@glm@@QEBAAEBMH@Z		; glm::tvec3<float,2>::operator[]
PUBLIC	??0?$tvec3@M$01@glm@@QEAA@XZ			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QEAA@M@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QEAA@MMM@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??E?$tvec3@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,2>::operator--
PUBLIC	??E?$tvec3@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,2>::operator--
PUBLIC	?length@?$tvec3@N$01@glm@@SAHXZ			; glm::tvec3<double,2>::length
PUBLIC	??A?$tvec3@N$01@glm@@QEAAAEANH@Z		; glm::tvec3<double,2>::operator[]
PUBLIC	??A?$tvec3@N$01@glm@@QEBAAEBNH@Z		; glm::tvec3<double,2>::operator[]
PUBLIC	??0?$tvec3@N$01@glm@@QEAA@XZ			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QEAA@N@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QEAA@NNN@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??E?$tvec3@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,2>::operator--
PUBLIC	??E?$tvec3@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,2>::operator--
PUBLIC	?length@?$tvec3@E$00@glm@@SAHXZ			; glm::tvec3<unsigned char,1>::length
PUBLIC	??A?$tvec3@E$00@glm@@QEAAAEAEH@Z		; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??A?$tvec3@E$00@glm@@QEBAAEBEH@Z		; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??0?$tvec3@E$00@glm@@QEAA@XZ			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QEAA@E@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QEAA@EEE@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??E?$tvec3@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	??E?$tvec3@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	?length@?$tvec3@G$00@glm@@SAHXZ			; glm::tvec3<unsigned short,1>::length
PUBLIC	??A?$tvec3@G$00@glm@@QEAAAEAGH@Z		; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??A?$tvec3@G$00@glm@@QEBAAEBGH@Z		; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??0?$tvec3@G$00@glm@@QEAA@XZ			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QEAA@G@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QEAA@GGG@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??E?$tvec3@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	??E?$tvec3@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	?length@?$tvec3@I$00@glm@@SAHXZ			; glm::tvec3<unsigned int,1>::length
PUBLIC	??A?$tvec3@I$00@glm@@QEAAAEAIH@Z		; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??A?$tvec3@I$00@glm@@QEBAAEBIH@Z		; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??0?$tvec3@I$00@glm@@QEAA@XZ			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QEAA@I@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QEAA@III@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??E?$tvec3@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	??E?$tvec3@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	?length@?$tvec3@_K$00@glm@@SAHXZ		; glm::tvec3<unsigned __int64,1>::length
PUBLIC	??A?$tvec3@_K$00@glm@@QEAAAEA_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec3@_K$00@glm@@QEBAAEB_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec3@_K$00@glm@@QEAA@XZ			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QEAA@_K@Z			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QEAA@_K00@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??E?$tvec3@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec3@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec3@C$00@glm@@SAHXZ			; glm::tvec3<signed char,1>::length
PUBLIC	??A?$tvec3@C$00@glm@@QEAAAEACH@Z		; glm::tvec3<signed char,1>::operator[]
PUBLIC	??A?$tvec3@C$00@glm@@QEBAAEBCH@Z		; glm::tvec3<signed char,1>::operator[]
PUBLIC	??0?$tvec3@C$00@glm@@QEAA@XZ			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QEAA@C@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QEAA@CCC@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??E?$tvec3@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,1>::operator--
PUBLIC	??E?$tvec3@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,1>::operator--
PUBLIC	?length@?$tvec3@F$00@glm@@SAHXZ			; glm::tvec3<short,1>::length
PUBLIC	??A?$tvec3@F$00@glm@@QEAAAEAFH@Z		; glm::tvec3<short,1>::operator[]
PUBLIC	??A?$tvec3@F$00@glm@@QEBAAEBFH@Z		; glm::tvec3<short,1>::operator[]
PUBLIC	??0?$tvec3@F$00@glm@@QEAA@XZ			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QEAA@F@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QEAA@FFF@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??E?$tvec3@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,1>::operator--
PUBLIC	??E?$tvec3@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,1>::operator--
PUBLIC	?length@?$tvec3@H$00@glm@@SAHXZ			; glm::tvec3<int,1>::length
PUBLIC	??A?$tvec3@H$00@glm@@QEAAAEAHH@Z		; glm::tvec3<int,1>::operator[]
PUBLIC	??A?$tvec3@H$00@glm@@QEBAAEBHH@Z		; glm::tvec3<int,1>::operator[]
PUBLIC	??0?$tvec3@H$00@glm@@QEAA@XZ			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QEAA@H@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QEAA@HHH@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??E?$tvec3@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,1>::operator--
PUBLIC	??E?$tvec3@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,1>::operator--
PUBLIC	?length@?$tvec3@_J$00@glm@@SAHXZ		; glm::tvec3<__int64,1>::length
PUBLIC	??A?$tvec3@_J$00@glm@@QEAAAEA_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??A?$tvec3@_J$00@glm@@QEBAAEB_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??0?$tvec3@_J$00@glm@@QEAA@XZ			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QEAA@_J@Z			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QEAA@_J00@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??E?$tvec3@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,1>::operator--
PUBLIC	??E?$tvec3@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,1>::operator--
PUBLIC	?length@?$tvec3@M$00@glm@@SAHXZ			; glm::tvec3<float,1>::length
PUBLIC	??A?$tvec3@M$00@glm@@QEAAAEAMH@Z		; glm::tvec3<float,1>::operator[]
PUBLIC	??A?$tvec3@M$00@glm@@QEBAAEBMH@Z		; glm::tvec3<float,1>::operator[]
PUBLIC	??0?$tvec3@M$00@glm@@QEAA@XZ			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QEAA@M@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QEAA@MMM@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??E?$tvec3@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,1>::operator--
PUBLIC	??E?$tvec3@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,1>::operator--
PUBLIC	?length@?$tvec3@N$00@glm@@SAHXZ			; glm::tvec3<double,1>::length
PUBLIC	??A?$tvec3@N$00@glm@@QEAAAEANH@Z		; glm::tvec3<double,1>::operator[]
PUBLIC	??A?$tvec3@N$00@glm@@QEBAAEBNH@Z		; glm::tvec3<double,1>::operator[]
PUBLIC	??0?$tvec3@N$00@glm@@QEAA@XZ			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QEAA@N@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QEAA@NNN@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??E?$tvec3@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,1>::operator--
PUBLIC	??E?$tvec3@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,1>::operator--
PUBLIC	?length@?$tvec3@E$0A@@glm@@SAHXZ		; glm::tvec3<unsigned char,0>::length
PUBLIC	??A?$tvec3@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??0?$tvec3@E$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QEAA@E@Z			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QEAA@EEE@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??E?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	??E?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	?length@?$tvec3@G$0A@@glm@@SAHXZ		; glm::tvec3<unsigned short,0>::length
PUBLIC	??A?$tvec3@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??0?$tvec3@G$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QEAA@G@Z			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QEAA@GGG@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??E?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	??E?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@I@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@III@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??E?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	??E?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	?length@?$tvec3@_K$0A@@glm@@SAHXZ		; glm::tvec3<unsigned __int64,0>::length
PUBLIC	??A?$tvec3@_K$0A@@glm@@QEAAAEA_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??E?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec3@C$0A@@glm@@SAHXZ		; glm::tvec3<signed char,0>::length
PUBLIC	??A?$tvec3@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec3<signed char,0>::operator[]
PUBLIC	??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec3<signed char,0>::operator[]
PUBLIC	??0?$tvec3@C$0A@@glm@@QEAA@XZ			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QEAA@C@Z			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QEAA@CCC@Z		; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??E?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<signed char,0>::operator--
PUBLIC	??E?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<signed char,0>::operator--
PUBLIC	?length@?$tvec3@F$0A@@glm@@SAHXZ		; glm::tvec3<short,0>::length
PUBLIC	??A?$tvec3@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec3<short,0>::operator[]
PUBLIC	??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec3<short,0>::operator[]
PUBLIC	??0?$tvec3@F$0A@@glm@@QEAA@XZ			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QEAA@F@Z			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QEAA@FFF@Z		; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??E?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<short,0>::operator--
PUBLIC	??E?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<short,0>::operator--
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QEAAAEAHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@H@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??E?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<int,0>::operator--
PUBLIC	??E?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<int,0>::operator--
PUBLIC	?length@?$tvec3@_J$0A@@glm@@SAHXZ		; glm::tvec3<__int64,0>::length
PUBLIC	??A?$tvec3@_J$0A@@glm@@QEAAAEA_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@XZ			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??E?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<__int64,0>::operator--
PUBLIC	??E?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<__int64,0>::operator--
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??E?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<float,0>::operator--
PUBLIC	??E?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<float,0>::operator--
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@N@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??E?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec3<double,0>::operator--
PUBLIC	??E?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec3<double,0>::operator--
PUBLIC	?length@?$tvec4@E$01@glm@@SAHXZ			; glm::tvec4<unsigned char,2>::length
PUBLIC	??A?$tvec4@E$01@glm@@QEAAAEAEH@Z		; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??A?$tvec4@E$01@glm@@QEBAAEBEH@Z		; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??0?$tvec4@E$01@glm@@QEAA@XZ			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QEAA@E@Z			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QEAA@EEEE@Z		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??E?$tvec4@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	??E?$tvec4@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	?length@?$tvec4@G$01@glm@@SAHXZ			; glm::tvec4<unsigned short,2>::length
PUBLIC	??A?$tvec4@G$01@glm@@QEAAAEAGH@Z		; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??A?$tvec4@G$01@glm@@QEBAAEBGH@Z		; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??0?$tvec4@G$01@glm@@QEAA@XZ			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QEAA@G@Z			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QEAA@GGGG@Z		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??E?$tvec4@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	??E?$tvec4@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	?length@?$tvec4@I$01@glm@@SAHXZ			; glm::tvec4<unsigned int,2>::length
PUBLIC	??A?$tvec4@I$01@glm@@QEAAAEAIH@Z		; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??A?$tvec4@I$01@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??0?$tvec4@I$01@glm@@QEAA@XZ			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QEAA@I@Z			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QEAA@IIII@Z		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??E?$tvec4@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	??E?$tvec4@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	?length@?$tvec4@_K$01@glm@@SAHXZ		; glm::tvec4<unsigned __int64,2>::length
PUBLIC	??A?$tvec4@_K$01@glm@@QEAAAEA_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec4@_K$01@glm@@QEBAAEB_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec4@_K$01@glm@@QEAA@XZ			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QEAA@_K@Z			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QEAA@_K000@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??E?$tvec4@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec4@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec4@C$01@glm@@SAHXZ			; glm::tvec4<signed char,2>::length
PUBLIC	??A?$tvec4@C$01@glm@@QEAAAEACH@Z		; glm::tvec4<signed char,2>::operator[]
PUBLIC	??A?$tvec4@C$01@glm@@QEBAAEBCH@Z		; glm::tvec4<signed char,2>::operator[]
PUBLIC	??0?$tvec4@C$01@glm@@QEAA@XZ			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QEAA@C@Z			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QEAA@CCCC@Z		; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??E?$tvec4@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,2>::operator--
PUBLIC	??E?$tvec4@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,2>::operator--
PUBLIC	?length@?$tvec4@F$01@glm@@SAHXZ			; glm::tvec4<short,2>::length
PUBLIC	??A?$tvec4@F$01@glm@@QEAAAEAFH@Z		; glm::tvec4<short,2>::operator[]
PUBLIC	??A?$tvec4@F$01@glm@@QEBAAEBFH@Z		; glm::tvec4<short,2>::operator[]
PUBLIC	??0?$tvec4@F$01@glm@@QEAA@XZ			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QEAA@F@Z			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QEAA@FFFF@Z		; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??E?$tvec4@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,2>::operator--
PUBLIC	??E?$tvec4@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,2>::operator--
PUBLIC	?length@?$tvec4@H$01@glm@@SAHXZ			; glm::tvec4<int,2>::length
PUBLIC	??A?$tvec4@H$01@glm@@QEAAAEAHH@Z		; glm::tvec4<int,2>::operator[]
PUBLIC	??A?$tvec4@H$01@glm@@QEBAAEBHH@Z		; glm::tvec4<int,2>::operator[]
PUBLIC	??0?$tvec4@H$01@glm@@QEAA@XZ			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QEAA@H@Z			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QEAA@HHHH@Z		; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??E?$tvec4@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,2>::operator--
PUBLIC	??E?$tvec4@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,2>::operator--
PUBLIC	?length@?$tvec4@_J$01@glm@@SAHXZ		; glm::tvec4<__int64,2>::length
PUBLIC	??A?$tvec4@_J$01@glm@@QEAAAEA_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??A?$tvec4@_J$01@glm@@QEBAAEB_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??0?$tvec4@_J$01@glm@@QEAA@XZ			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QEAA@_J@Z			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QEAA@_J000@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??E?$tvec4@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,2>::operator--
PUBLIC	??E?$tvec4@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,2>::operator--
PUBLIC	?length@?$tvec4@M$01@glm@@SAHXZ			; glm::tvec4<float,2>::length
PUBLIC	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z		; glm::tvec4<float,2>::operator[]
PUBLIC	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z		; glm::tvec4<float,2>::operator[]
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@XZ			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@M@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??E?$tvec4@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,2>::operator--
PUBLIC	??E?$tvec4@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,2>::operator--
PUBLIC	?length@?$tvec4@N$01@glm@@SAHXZ			; glm::tvec4<double,2>::length
PUBLIC	??A?$tvec4@N$01@glm@@QEAAAEANH@Z		; glm::tvec4<double,2>::operator[]
PUBLIC	??A?$tvec4@N$01@glm@@QEBAAEBNH@Z		; glm::tvec4<double,2>::operator[]
PUBLIC	??0?$tvec4@N$01@glm@@QEAA@XZ			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QEAA@N@Z			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QEAA@NNNN@Z		; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??E?$tvec4@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,2>::operator--
PUBLIC	??E?$tvec4@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,2>::operator--
PUBLIC	?length@?$tvec4@E$00@glm@@SAHXZ			; glm::tvec4<unsigned char,1>::length
PUBLIC	??A?$tvec4@E$00@glm@@QEAAAEAEH@Z		; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??A?$tvec4@E$00@glm@@QEBAAEBEH@Z		; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??0?$tvec4@E$00@glm@@QEAA@XZ			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QEAA@E@Z			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QEAA@EEEE@Z		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??E?$tvec4@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	??E?$tvec4@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	?length@?$tvec4@G$00@glm@@SAHXZ			; glm::tvec4<unsigned short,1>::length
PUBLIC	??A?$tvec4@G$00@glm@@QEAAAEAGH@Z		; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??A?$tvec4@G$00@glm@@QEBAAEBGH@Z		; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??0?$tvec4@G$00@glm@@QEAA@XZ			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QEAA@G@Z			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QEAA@GGGG@Z		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??E?$tvec4@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	??E?$tvec4@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	?length@?$tvec4@I$00@glm@@SAHXZ			; glm::tvec4<unsigned int,1>::length
PUBLIC	??A?$tvec4@I$00@glm@@QEAAAEAIH@Z		; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??A?$tvec4@I$00@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??0?$tvec4@I$00@glm@@QEAA@XZ			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QEAA@I@Z			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QEAA@IIII@Z		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??E?$tvec4@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	??E?$tvec4@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	?length@?$tvec4@_K$00@glm@@SAHXZ		; glm::tvec4<unsigned __int64,1>::length
PUBLIC	??A?$tvec4@_K$00@glm@@QEAAAEA_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec4@_K$00@glm@@QEBAAEB_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec4@_K$00@glm@@QEAA@XZ			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QEAA@_K@Z			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QEAA@_K000@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??E?$tvec4@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec4@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec4@C$00@glm@@SAHXZ			; glm::tvec4<signed char,1>::length
PUBLIC	??A?$tvec4@C$00@glm@@QEAAAEACH@Z		; glm::tvec4<signed char,1>::operator[]
PUBLIC	??A?$tvec4@C$00@glm@@QEBAAEBCH@Z		; glm::tvec4<signed char,1>::operator[]
PUBLIC	??0?$tvec4@C$00@glm@@QEAA@XZ			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QEAA@C@Z			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QEAA@CCCC@Z		; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??E?$tvec4@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<signed char,1>::operator--
PUBLIC	??E?$tvec4@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<signed char,1>::operator--
PUBLIC	?length@?$tvec4@F$00@glm@@SAHXZ			; glm::tvec4<short,1>::length
PUBLIC	??A?$tvec4@F$00@glm@@QEAAAEAFH@Z		; glm::tvec4<short,1>::operator[]
PUBLIC	??A?$tvec4@F$00@glm@@QEBAAEBFH@Z		; glm::tvec4<short,1>::operator[]
PUBLIC	??0?$tvec4@F$00@glm@@QEAA@XZ			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QEAA@F@Z			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QEAA@FFFF@Z		; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??E?$tvec4@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,1>::operator--
PUBLIC	??E?$tvec4@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,1>::operator--
PUBLIC	?length@?$tvec4@H$00@glm@@SAHXZ			; glm::tvec4<int,1>::length
PUBLIC	??A?$tvec4@H$00@glm@@QEAAAEAHH@Z		; glm::tvec4<int,1>::operator[]
PUBLIC	??A?$tvec4@H$00@glm@@QEBAAEBHH@Z		; glm::tvec4<int,1>::operator[]
PUBLIC	??0?$tvec4@H$00@glm@@QEAA@XZ			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QEAA@H@Z			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QEAA@HHHH@Z		; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??E?$tvec4@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,1>::operator--
PUBLIC	??E?$tvec4@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,1>::operator--
PUBLIC	?length@?$tvec4@_J$00@glm@@SAHXZ		; glm::tvec4<__int64,1>::length
PUBLIC	??A?$tvec4@_J$00@glm@@QEAAAEA_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??A?$tvec4@_J$00@glm@@QEBAAEB_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??0?$tvec4@_J$00@glm@@QEAA@XZ			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QEAA@_J@Z			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QEAA@_J000@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??E?$tvec4@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,1>::operator--
PUBLIC	??E?$tvec4@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,1>::operator--
PUBLIC	?length@?$tvec4@M$00@glm@@SAHXZ			; glm::tvec4<float,1>::length
PUBLIC	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z		; glm::tvec4<float,1>::operator[]
PUBLIC	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z		; glm::tvec4<float,1>::operator[]
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@XZ			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@M@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??E?$tvec4@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<float,1>::operator--
PUBLIC	??E?$tvec4@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<float,1>::operator--
PUBLIC	?length@?$tvec4@N$00@glm@@SAHXZ			; glm::tvec4<double,1>::length
PUBLIC	??A?$tvec4@N$00@glm@@QEAAAEANH@Z		; glm::tvec4<double,1>::operator[]
PUBLIC	??A?$tvec4@N$00@glm@@QEBAAEBNH@Z		; glm::tvec4<double,1>::operator[]
PUBLIC	??0?$tvec4@N$00@glm@@QEAA@XZ			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QEAA@N@Z			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QEAA@NNNN@Z		; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??E?$tvec4@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,1>::operator--
PUBLIC	??E?$tvec4@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,1>::operator--
PUBLIC	?length@?$tvec4@G$0A@@glm@@SAHXZ		; glm::tvec4<unsigned short,0>::length
PUBLIC	??A?$tvec4@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@G@Z			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@GGGG@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??E?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	??E?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@I@Z			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??E?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	??E?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	?length@?$tvec4@_K$0A@@glm@@SAHXZ		; glm::tvec4<unsigned __int64,0>::length
PUBLIC	??A?$tvec4@_K$0A@@glm@@QEAAAEA_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??E?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec4@F$0A@@glm@@SAHXZ		; glm::tvec4<short,0>::length
PUBLIC	??A?$tvec4@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec4<short,0>::operator[]
PUBLIC	??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec4<short,0>::operator[]
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@XZ			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@F@Z			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??E?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<short,0>::operator--
PUBLIC	??E?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<short,0>::operator--
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEAAAEAHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??E?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<int,0>::operator--
PUBLIC	??E?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<int,0>::operator--
PUBLIC	?length@?$tvec4@_J$0A@@glm@@SAHXZ		; glm::tvec4<__int64,0>::length
PUBLIC	??A?$tvec4@_J$0A@@glm@@QEAAAEA_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@XZ			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??E?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<__int64,0>::operator--
PUBLIC	??E?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<__int64,0>::operator--
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??E?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec4<double,0>::operator--
PUBLIC	??E?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec4<double,0>::operator--
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@XZ			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@M@Z			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBM000@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@0@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	?length@?$tmat2x2@M$01@glm@@SAHXZ		; glm::tmat2x2<float,2>::length
PUBLIC	??A?$tmat2x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ; glm::tmat2x2<float,2>::operator[]
PUBLIC	??A?$tmat2x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ; glm::tmat2x2<float,2>::operator[]
PUBLIC	??E?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,2>::operator--
PUBLIC	??E?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,2>::operator--
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@XZ			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@N@Z			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBN000@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@0@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	?length@?$tmat2x2@N$01@glm@@SAHXZ		; glm::tmat2x2<double,2>::length
PUBLIC	??A?$tmat2x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ; glm::tmat2x2<double,2>::operator[]
PUBLIC	??A?$tmat2x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ; glm::tmat2x2<double,2>::operator[]
PUBLIC	??E?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,2>::operator--
PUBLIC	??E?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,2>::operator--
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@XZ			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@M@Z			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBM000@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@0@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	?length@?$tmat2x2@M$00@glm@@SAHXZ		; glm::tmat2x2<float,1>::length
PUBLIC	??A?$tmat2x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ; glm::tmat2x2<float,1>::operator[]
PUBLIC	??A?$tmat2x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ; glm::tmat2x2<float,1>::operator[]
PUBLIC	??E?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,1>::operator--
PUBLIC	??E?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,1>::operator--
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@XZ			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@N@Z			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBN000@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@0@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	?length@?$tmat2x2@N$00@glm@@SAHXZ		; glm::tmat2x2<double,1>::length
PUBLIC	??A?$tmat2x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ; glm::tmat2x2<double,1>::operator[]
PUBLIC	??A?$tmat2x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ; glm::tmat2x2<double,1>::operator[]
PUBLIC	??E?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,1>::operator--
PUBLIC	??E?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,1>::operator--
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@XZ			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<float,0>::operator--
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<float,0>::operator--
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@XZ			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBN000@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@0@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	?length@?$tmat2x2@N$0A@@glm@@SAHXZ		; glm::tmat2x2<double,0>::length
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x2<double,0>::operator--
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x2<double,0>::operator--
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@XZ			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@M@Z			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	?length@?$tmat2x3@M$01@glm@@SAHXZ		; glm::tmat2x3<float,2>::length
PUBLIC	??A?$tmat2x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ; glm::tmat2x3<float,2>::operator[]
PUBLIC	??A?$tmat2x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ; glm::tmat2x3<float,2>::operator[]
PUBLIC	??E?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,2>::operator--
PUBLIC	??E?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,2>::operator--
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@XZ			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@N@Z			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	?length@?$tmat2x3@N$01@glm@@SAHXZ		; glm::tmat2x3<double,2>::length
PUBLIC	??A?$tmat2x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ; glm::tmat2x3<double,2>::operator[]
PUBLIC	??A?$tmat2x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ; glm::tmat2x3<double,2>::operator[]
PUBLIC	??E?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,2>::operator--
PUBLIC	??E?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,2>::operator--
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@XZ			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@M@Z			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	?length@?$tmat2x3@M$00@glm@@SAHXZ		; glm::tmat2x3<float,1>::length
PUBLIC	??A?$tmat2x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ; glm::tmat2x3<float,1>::operator[]
PUBLIC	??A?$tmat2x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ; glm::tmat2x3<float,1>::operator[]
PUBLIC	??E?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,1>::operator--
PUBLIC	??E?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,1>::operator--
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@XZ			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@N@Z			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	?length@?$tmat2x3@N$00@glm@@SAHXZ		; glm::tmat2x3<double,1>::length
PUBLIC	??A?$tmat2x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ; glm::tmat2x3<double,1>::operator[]
PUBLIC	??A?$tmat2x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ; glm::tmat2x3<double,1>::operator[]
PUBLIC	??E?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,1>::operator--
PUBLIC	??E?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,1>::operator--
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@XZ			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<float,0>::operator--
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<float,0>::operator--
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@XZ			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	?length@?$tmat2x3@N$0A@@glm@@SAHXZ		; glm::tmat2x3<double,0>::length
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x3<double,0>::operator--
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x3<double,0>::operator--
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@XZ			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@M@Z			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@0@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	?length@?$tmat2x4@M$01@glm@@SAHXZ		; glm::tmat2x4<float,2>::length
PUBLIC	??A?$tmat2x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat2x4<float,2>::operator[]
PUBLIC	??A?$tmat2x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat2x4<float,2>::operator[]
PUBLIC	??E?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,2>::operator--
PUBLIC	??E?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,2>::operator--
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@XZ			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@N@Z			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@NNNNNNNN@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@0@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	?length@?$tmat2x4@N$01@glm@@SAHXZ		; glm::tmat2x4<double,2>::length
PUBLIC	??A?$tmat2x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ; glm::tmat2x4<double,2>::operator[]
PUBLIC	??A?$tmat2x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ; glm::tmat2x4<double,2>::operator[]
PUBLIC	??E?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,2>::operator--
PUBLIC	??E?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,2>::operator--
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@XZ			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@M@Z			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@0@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	?length@?$tmat2x4@M$00@glm@@SAHXZ		; glm::tmat2x4<float,1>::length
PUBLIC	??A?$tmat2x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat2x4<float,1>::operator[]
PUBLIC	??A?$tmat2x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat2x4<float,1>::operator[]
PUBLIC	??E?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,1>::operator--
PUBLIC	??E?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,1>::operator--
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@XZ			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@N@Z			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@NNNNNNNN@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@0@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	?length@?$tmat2x4@N$00@glm@@SAHXZ		; glm::tmat2x4<double,1>::length
PUBLIC	??A?$tmat2x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ; glm::tmat2x4<double,1>::operator[]
PUBLIC	??A?$tmat2x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ; glm::tmat2x4<double,1>::operator[]
PUBLIC	??E?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,1>::operator--
PUBLIC	??E?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,1>::operator--
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@XZ			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@0@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<float,0>::operator--
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<float,0>::operator--
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@XZ			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@NNNNNNNN@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@0@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	?length@?$tmat2x4@N$0A@@glm@@SAHXZ		; glm::tmat2x4<double,0>::length
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat2x4<double,0>::operator--
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat2x4<double,0>::operator--
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@XZ			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@M@Z			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@MMMMMM@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@00@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	?length@?$tmat3x2@M$01@glm@@SAHXZ		; glm::tmat3x2<float,2>::length
PUBLIC	??A?$tmat3x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ; glm::tmat3x2<float,2>::operator[]
PUBLIC	??A?$tmat3x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ; glm::tmat3x2<float,2>::operator[]
PUBLIC	??E?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,2>::operator--
PUBLIC	??E?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,2>::operator--
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@XZ			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@N@Z			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@NNNNNN@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@00@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	?length@?$tmat3x2@N$01@glm@@SAHXZ		; glm::tmat3x2<double,2>::length
PUBLIC	??A?$tmat3x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ; glm::tmat3x2<double,2>::operator[]
PUBLIC	??A?$tmat3x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ; glm::tmat3x2<double,2>::operator[]
PUBLIC	??E?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,2>::operator--
PUBLIC	??E?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,2>::operator--
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@XZ			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@M@Z			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@MMMMMM@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@00@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	?length@?$tmat3x2@M$00@glm@@SAHXZ		; glm::tmat3x2<float,1>::length
PUBLIC	??A?$tmat3x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ; glm::tmat3x2<float,1>::operator[]
PUBLIC	??A?$tmat3x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ; glm::tmat3x2<float,1>::operator[]
PUBLIC	??E?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,1>::operator--
PUBLIC	??E?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,1>::operator--
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@XZ			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@N@Z			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@NNNNNN@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@00@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	?length@?$tmat3x2@N$00@glm@@SAHXZ		; glm::tmat3x2<double,1>::length
PUBLIC	??A?$tmat3x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ; glm::tmat3x2<double,1>::operator[]
PUBLIC	??A?$tmat3x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ; glm::tmat3x2<double,1>::operator[]
PUBLIC	??E?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,1>::operator--
PUBLIC	??E?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,1>::operator--
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@XZ			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@MMMMMM@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@00@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<float,0>::operator--
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<float,0>::operator--
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@XZ			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@NNNNNN@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@00@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	?length@?$tmat3x2@N$0A@@glm@@SAHXZ		; glm::tmat3x2<double,0>::length
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x2<double,0>::operator--
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x2<double,0>::operator--
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@XZ			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@M@Z			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@00@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	?length@?$tmat3x3@M$01@glm@@SAHXZ		; glm::tmat3x3<float,2>::length
PUBLIC	??A?$tmat3x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ; glm::tmat3x3<float,2>::operator[]
PUBLIC	??A?$tmat3x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ; glm::tmat3x3<float,2>::operator[]
PUBLIC	??E?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,2>::operator--
PUBLIC	??E?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,2>::operator--
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@XZ			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@N@Z			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@00@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	?length@?$tmat3x3@N$01@glm@@SAHXZ		; glm::tmat3x3<double,2>::length
PUBLIC	??A?$tmat3x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ; glm::tmat3x3<double,2>::operator[]
PUBLIC	??A?$tmat3x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ; glm::tmat3x3<double,2>::operator[]
PUBLIC	??E?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,2>::operator--
PUBLIC	??E?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,2>::operator--
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@XZ			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@M@Z			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@00@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	?length@?$tmat3x3@M$00@glm@@SAHXZ		; glm::tmat3x3<float,1>::length
PUBLIC	??A?$tmat3x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ; glm::tmat3x3<float,1>::operator[]
PUBLIC	??A?$tmat3x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ; glm::tmat3x3<float,1>::operator[]
PUBLIC	??E?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,1>::operator--
PUBLIC	??E?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,1>::operator--
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@XZ			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@N@Z			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@00@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	?length@?$tmat3x3@N$00@glm@@SAHXZ		; glm::tmat3x3<double,1>::length
PUBLIC	??A?$tmat3x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ; glm::tmat3x3<double,1>::operator[]
PUBLIC	??A?$tmat3x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ; glm::tmat3x3<double,1>::operator[]
PUBLIC	??E?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,1>::operator--
PUBLIC	??E?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,1>::operator--
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<float,0>::operator--
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<float,0>::operator--
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z	; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	?length@?$tmat3x3@N$0A@@glm@@SAHXZ		; glm::tmat3x3<double,0>::length
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x3<double,0>::operator--
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x3<double,0>::operator--
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@XZ			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@M@Z			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@00@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	?length@?$tmat3x4@M$01@glm@@SAHXZ		; glm::tmat3x4<float,2>::length
PUBLIC	??A?$tmat3x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat3x4<float,2>::operator[]
PUBLIC	??A?$tmat3x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat3x4<float,2>::operator[]
PUBLIC	??E?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,2>::operator--
PUBLIC	??E?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,2>::operator--
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@XZ			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@N@Z			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@00@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	?length@?$tmat3x4@N$01@glm@@SAHXZ		; glm::tmat3x4<double,2>::length
PUBLIC	??A?$tmat3x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ; glm::tmat3x4<double,2>::operator[]
PUBLIC	??A?$tmat3x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ; glm::tmat3x4<double,2>::operator[]
PUBLIC	??E?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,2>::operator--
PUBLIC	??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,2>::operator--
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@XZ			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@M@Z			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@00@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	?length@?$tmat3x4@M$00@glm@@SAHXZ		; glm::tmat3x4<float,1>::length
PUBLIC	??A?$tmat3x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat3x4<float,1>::operator[]
PUBLIC	??A?$tmat3x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat3x4<float,1>::operator[]
PUBLIC	??E?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,1>::operator--
PUBLIC	??E?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,1>::operator--
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@XZ			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@N@Z			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@00@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	?length@?$tmat3x4@N$00@glm@@SAHXZ		; glm::tmat3x4<double,1>::length
PUBLIC	??A?$tmat3x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ; glm::tmat3x4<double,1>::operator[]
PUBLIC	??A?$tmat3x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ; glm::tmat3x4<double,1>::operator[]
PUBLIC	??E?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,1>::operator--
PUBLIC	??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,1>::operator--
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@XZ			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@00@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<float,0>::operator--
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<float,0>::operator--
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@XZ			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z		; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@00@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	?length@?$tmat3x4@N$0A@@glm@@SAHXZ		; glm::tmat3x4<double,0>::length
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat3x4<double,0>::operator--
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat3x4<double,0>::operator--
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@XZ			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@M@Z			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@000@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	?length@?$tmat4x2@M$01@glm@@SAHXZ		; glm::tmat4x2<float,2>::length
PUBLIC	??A?$tmat4x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ; glm::tmat4x2<float,2>::operator[]
PUBLIC	??A?$tmat4x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ; glm::tmat4x2<float,2>::operator[]
PUBLIC	??E?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,2>::operator--
PUBLIC	??E?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,2>::operator--
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@XZ			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@N@Z			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@NNNNNNNN@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@000@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	?length@?$tmat4x2@N$01@glm@@SAHXZ		; glm::tmat4x2<double,2>::length
PUBLIC	??A?$tmat4x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ; glm::tmat4x2<double,2>::operator[]
PUBLIC	??A?$tmat4x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ; glm::tmat4x2<double,2>::operator[]
PUBLIC	??E?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,2>::operator--
PUBLIC	??E?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,2>::operator--
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@XZ			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@M@Z			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@000@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	?length@?$tmat4x2@M$00@glm@@SAHXZ		; glm::tmat4x2<float,1>::length
PUBLIC	??A?$tmat4x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ; glm::tmat4x2<float,1>::operator[]
PUBLIC	??A?$tmat4x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ; glm::tmat4x2<float,1>::operator[]
PUBLIC	??E?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,1>::operator--
PUBLIC	??E?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,1>::operator--
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@XZ			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@N@Z			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@NNNNNNNN@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@000@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	?length@?$tmat4x2@N$00@glm@@SAHXZ		; glm::tmat4x2<double,1>::length
PUBLIC	??A?$tmat4x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ; glm::tmat4x2<double,1>::operator[]
PUBLIC	??A?$tmat4x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ; glm::tmat4x2<double,1>::operator[]
PUBLIC	??E?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,1>::operator--
PUBLIC	??E?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,1>::operator--
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@XZ			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@000@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<float,0>::operator--
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<float,0>::operator--
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@XZ			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@NNNNNNNN@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@000@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	?length@?$tmat4x2@N$0A@@glm@@SAHXZ		; glm::tmat4x2<double,0>::length
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x2<double,0>::operator--
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x2<double,0>::operator--
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@XZ			; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z	; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@000@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	?length@?$tmat4x3@M$01@glm@@SAHXZ		; glm::tmat4x3<float,2>::length
PUBLIC	??A?$tmat4x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ; glm::tmat4x3<float,2>::operator[]
PUBLIC	??A?$tmat4x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ; glm::tmat4x3<float,2>::operator[]
PUBLIC	??E?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,2>::operator--
PUBLIC	??E?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,2>::operator--
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@XZ			; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z	; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@000@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	?length@?$tmat4x3@N$01@glm@@SAHXZ		; glm::tmat4x3<double,2>::length
PUBLIC	??A?$tmat4x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ; glm::tmat4x3<double,2>::operator[]
PUBLIC	??A?$tmat4x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ; glm::tmat4x3<double,2>::operator[]
PUBLIC	??E?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,2>::operator--
PUBLIC	??E?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,2>::operator--
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@XZ			; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z	; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@000@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	?length@?$tmat4x3@M$00@glm@@SAHXZ		; glm::tmat4x3<float,1>::length
PUBLIC	??A?$tmat4x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ; glm::tmat4x3<float,1>::operator[]
PUBLIC	??A?$tmat4x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ; glm::tmat4x3<float,1>::operator[]
PUBLIC	??E?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,1>::operator--
PUBLIC	??E?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,1>::operator--
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@XZ			; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z	; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@000@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	?length@?$tmat4x3@N$00@glm@@SAHXZ		; glm::tmat4x3<double,1>::length
PUBLIC	??A?$tmat4x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ; glm::tmat4x3<double,1>::operator[]
PUBLIC	??A?$tmat4x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ; glm::tmat4x3<double,1>::operator[]
PUBLIC	??E?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,1>::operator--
PUBLIC	??E?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,1>::operator--
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@XZ			; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<float,0>::operator--
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<float,0>::operator--
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@XZ			; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z	; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@000@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	?length@?$tmat4x3@N$0A@@glm@@SAHXZ		; glm::tmat4x3<double,0>::length
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x3<double,0>::operator--
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x3<double,0>::operator--
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@XZ			; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	?length@?$tmat4x4@M$01@glm@@SAHXZ		; glm::tmat4x4<float,2>::length
PUBLIC	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??E?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,2>::operator--
PUBLIC	??E?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,2>::operator--
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@XZ			; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBN000000000000000@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@000@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	?length@?$tmat4x4@N$01@glm@@SAHXZ		; glm::tmat4x4<double,2>::length
PUBLIC	??A?$tmat4x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ; glm::tmat4x4<double,2>::operator[]
PUBLIC	??A?$tmat4x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ; glm::tmat4x4<double,2>::operator[]
PUBLIC	??E?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,2>::operator--
PUBLIC	??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,2>::operator--
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@XZ			; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	?length@?$tmat4x4@M$00@glm@@SAHXZ		; glm::tmat4x4<float,1>::length
PUBLIC	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
PUBLIC	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
PUBLIC	??E?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,1>::operator--
PUBLIC	??E?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,1>::operator--
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@XZ			; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBN000000000000000@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@000@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	?length@?$tmat4x4@N$00@glm@@SAHXZ		; glm::tmat4x4<double,1>::length
PUBLIC	??A?$tmat4x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ; glm::tmat4x4<double,1>::operator[]
PUBLIC	??A?$tmat4x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ; glm::tmat4x4<double,1>::operator[]
PUBLIC	??E?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,1>::operator--
PUBLIC	??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,1>::operator--
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<float,0>::operator--
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<float,0>::operator--
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ			; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN000000000000000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	?length@?$tmat4x4@N$0A@@glm@@SAHXZ		; glm::tmat4x4<double,0>::length
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ		; glm::tmat4x4<double,0>::operator--
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z		; glm::tmat4x4<double,0>::operator--
PUBLIC	?length@?$tquat@M$01@glm@@SAHXZ			; glm::tquat<float,2>::length
PUBLIC	??A?$tquat@M$01@glm@@QEAAAEAMH@Z		; glm::tquat<float,2>::operator[]
PUBLIC	??A?$tquat@M$01@glm@@QEBAAEBMH@Z		; glm::tquat<float,2>::operator[]
PUBLIC	??0?$tquat@M$01@glm@@QEAA@XZ			; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBMAEBU?$tvec3@M$01@1@@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBM000@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	?length@?$tquat@N$01@glm@@SAHXZ			; glm::tquat<double,2>::length
PUBLIC	??A?$tquat@N$01@glm@@QEAAAEANH@Z		; glm::tquat<double,2>::operator[]
PUBLIC	??A?$tquat@N$01@glm@@QEBAAEBNH@Z		; glm::tquat<double,2>::operator[]
PUBLIC	??0?$tquat@N$01@glm@@QEAA@XZ			; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBNAEBU?$tvec3@N$01@1@@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBN000@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	?length@?$tquat@M$00@glm@@SAHXZ			; glm::tquat<float,1>::length
PUBLIC	??A?$tquat@M$00@glm@@QEAAAEAMH@Z		; glm::tquat<float,1>::operator[]
PUBLIC	??A?$tquat@M$00@glm@@QEBAAEBMH@Z		; glm::tquat<float,1>::operator[]
PUBLIC	??0?$tquat@M$00@glm@@QEAA@XZ			; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBMAEBU?$tvec3@M$00@1@@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBM000@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	?length@?$tquat@N$00@glm@@SAHXZ			; glm::tquat<double,1>::length
PUBLIC	??A?$tquat@N$00@glm@@QEAAAEANH@Z		; glm::tquat<double,1>::operator[]
PUBLIC	??A?$tquat@N$00@glm@@QEBAAEBNH@Z		; glm::tquat<double,1>::operator[]
PUBLIC	??0?$tquat@N$00@glm@@QEAA@XZ			; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBNAEBU?$tvec3@N$00@1@@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBN000@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	?length@?$tquat@M$0A@@glm@@SAHXZ		; glm::tquat<float,0>::length
PUBLIC	??A?$tquat@M$0A@@glm@@QEAAAEAMH@Z		; glm::tquat<float,0>::operator[]
PUBLIC	??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z		; glm::tquat<float,0>::operator[]
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	?length@?$tquat@N$0A@@glm@@SAHXZ		; glm::tquat<double,0>::length
PUBLIC	??A?$tquat@N$0A@@glm@@QEAAAEANH@Z		; glm::tquat<double,0>::operator[]
PUBLIC	??A?$tquat@N$0A@@glm@@QEBAAEBNH@Z		; glm::tquat<double,0>::operator[]
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@XZ			; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBNAEBU?$tvec3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	?length@?$tdualquat@M$01@glm@@SAHXZ		; glm::tdualquat<float,2>::length
PUBLIC	??A?$tdualquat@M$01@glm@@QEAAAEAU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??A?$tdualquat@M$01@glm@@QEBAAEBU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@XZ		; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@0@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	?length@?$tdualquat@N$01@glm@@SAHXZ		; glm::tdualquat<double,2>::length
PUBLIC	??A?$tdualquat@N$01@glm@@QEAAAEAU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??A?$tdualquat@N$01@glm@@QEBAAEBU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@XZ		; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@0@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	?length@?$tdualquat@M$00@glm@@SAHXZ		; glm::tdualquat<float,1>::length
PUBLIC	??A?$tdualquat@M$00@glm@@QEAAAEAU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??A?$tdualquat@M$00@glm@@QEBAAEBU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@XZ		; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@0@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	?length@?$tdualquat@N$00@glm@@SAHXZ		; glm::tdualquat<double,1>::length
PUBLIC	??A?$tdualquat@N$00@glm@@QEAAAEAU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??A?$tdualquat@N$00@glm@@QEBAAEBU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@XZ		; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@0@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	?length@?$tdualquat@M$0A@@glm@@SAHXZ		; glm::tdualquat<float,0>::length
PUBLIC	??A?$tdualquat@M$0A@@glm@@QEAAAEAU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??A?$tdualquat@M$0A@@glm@@QEBAAEBU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@XZ		; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	?length@?$tdualquat@N$0A@@glm@@SAHXZ		; glm::tdualquat<double,0>::length
PUBLIC	??A?$tdualquat@N$0A@@glm@@QEAAAEAU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??A?$tdualquat@N$0A@@glm@@QEBAAEBU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@XZ		; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
PUBLIC	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
PUBLIC	??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z		; glm::tvec2<float,2>::tvec2<float,2><float,int>
PUBLIC	??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z		; glm::tvec2<float,2>::tvec2<float,2><int,float>
PUBLIC	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z		; glm::tvec2<float,2>::tvec2<float,2><int,int>
PUBLIC	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
PUBLIC	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
PUBLIC	??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z		; glm::tvec2<float,1>::tvec2<float,1><float,int>
PUBLIC	??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z		; glm::tvec2<float,1>::tvec2<float,1><int,float>
PUBLIC	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z		; glm::tvec2<float,1>::tvec2<float,1><int,int>
PUBLIC	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
PUBLIC	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
PUBLIC	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
PUBLIC	??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
PUBLIC	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
PUBLIC	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
PUBLIC	??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
PUBLIC	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
PUBLIC	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
PUBLIC	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
PUBLIC	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
PUBLIC	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
PUBLIC	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
PUBLIC	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
PUBLIC	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>
PUBLIC	??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
PUBLIC	??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
PUBLIC	??$?0HHHM@?$tvec4@M$00@glm@@QEAA@HHHM@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
PUBLIC	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
PUBLIC	??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z		; glm::tvec2<double,2>::tvec2<double,2><double,int>
PUBLIC	??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z		; glm::tvec2<double,2>::tvec2<double,2><int,double>
PUBLIC	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z		; glm::tvec2<double,2>::tvec2<double,2><int,int>
PUBLIC	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
PUBLIC	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
PUBLIC	??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z		; glm::tvec2<double,1>::tvec2<double,1><double,int>
PUBLIC	??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z		; glm::tvec2<double,1>::tvec2<double,1><int,double>
PUBLIC	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z		; glm::tvec2<double,1>::tvec2<double,1><int,int>
PUBLIC	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
PUBLIC	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
PUBLIC	??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z		; glm::tvec2<double,0>::tvec2<double,0><double,int>
PUBLIC	??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z		; glm::tvec2<double,0>::tvec2<double,0><int,double>
PUBLIC	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z		; glm::tvec2<double,0>::tvec2<double,0><int,int>
PUBLIC	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
PUBLIC	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
PUBLIC	??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
PUBLIC	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
PUBLIC	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
PUBLIC	??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
PUBLIC	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
PUBLIC	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
PUBLIC	??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
PUBLIC	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
PUBLIC	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
PUBLIC	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
PUBLIC	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
PUBLIC	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
PUBLIC	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
PUBLIC	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
PUBLIC	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
PUBLIC	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
PUBLIC	??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>
PUBLIC	??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>
PUBLIC	??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>
PUBLIC	??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>
PUBLIC	??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>
PUBLIC	??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z	; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z	; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z	; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>
PUBLIC	??$?0HHHN@?$tvec4@N$01@glm@@QEAA@HHHN@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
PUBLIC	??$?0HHHN@?$tvec4@N$00@glm@@QEAA@HHHN@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
PUBLIC	??$?0HHHN@?$tvec4@N$0A@@glm@@QEAA@HHHN@Z	; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
PUBLIC	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
PUBLIC	??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z ; glm::normalize<float,2>
PUBLIC	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
PUBLIC	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
PUBLIC	??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z ; glm::normalize<float,1>
PUBLIC	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0>
PUBLIC	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
PUBLIC	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
PUBLIC	??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z ; glm::normalize<double,2>
PUBLIC	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
PUBLIC	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
PUBLIC	??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z ; glm::normalize<double,1>
PUBLIC	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
PUBLIC	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
PUBLIC	??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z ; glm::normalize<double,0>
PUBLIC	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
PUBLIC	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
PUBLIC	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
PUBLIC	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
PUBLIC	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
PUBLIC	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
PUBLIC	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bf000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__xmm@00000000000000010000000000000001
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@3ff00000000000003ff0000000000000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	cos:PROC
EXTRN	sin:PROC
EXTRN	sqrt:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+72
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+89
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+97
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+93
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+101
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+89
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+97
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+93
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+101
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+89
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+97
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+93
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+93
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+101
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+97
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+113
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+121
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+103
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+122
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+130
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z DD imagerel $LN19
	DD	imagerel $LN19+115
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+113
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+121
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+103
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+122
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+130
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z DD imagerel $LN19
	DD	imagerel $LN19+115
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+113
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+121
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+103
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+111
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+114
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+122
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+130
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z DD imagerel $LN19
	DD	imagerel $LN19+115
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+115
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@M@Z DD imagerel $LN19
	DD	imagerel $LN19+98
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+134
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@N@Z DD imagerel $LN19
	DD	imagerel $LN19+108
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+115
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@M@Z DD imagerel $LN19
	DD	imagerel $LN19+98
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+134
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@N@Z DD imagerel $LN19
	DD	imagerel $LN19+108
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+115
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN19
	DD	imagerel $LN19+98
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+134
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+101
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z DD imagerel $LN19
	DD	imagerel $LN19+108
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+129
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+123
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+111
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+119
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+116
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+124
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+111
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+119
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+116
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+124
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+111
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+119
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+112
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+114
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+116
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+124
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+119
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+150
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+160
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+165
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z DD imagerel $LN21
	DD	imagerel $LN21+158
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+118
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+158
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+150
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+160
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+165
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z DD imagerel $LN21
	DD	imagerel $LN21+158
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+118
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+158
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+150
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+107
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+149
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+140
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+160
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+165
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z DD imagerel $LN21
	DD	imagerel $LN21+158
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+118
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+158
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+151
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+178
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+141
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+91
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+174
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+179
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+172
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+166
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+178
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+141
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+91
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+174
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+179
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+172
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+166
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+149
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+154
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+178
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+147
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+141
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+91
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+136
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+126
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+174
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+179
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+172
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+166
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+165
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+155
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+141
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+139
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+147
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+141
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+139
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+147
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN15
	DD	imagerel $LN15+141
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+131
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+135
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+133
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+139
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN15
	DD	imagerel $LN15+147
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+110
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+141
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+127
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+182
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+190
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+218
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+176
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+114
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+169
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+133
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+173
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+181
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+166
	DD	imagerel $unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+195
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+203
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+239
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+185
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+122
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+182
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+184
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+182
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+194
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+182
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+190
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+218
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+176
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+114
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+169
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+133
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+173
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+181
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+166
	DD	imagerel $unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+195
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+203
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+239
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+185
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+122
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+182
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+184
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+182
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+194
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+182
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+190
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+218
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+176
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+114
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+169
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+133
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+173
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+181
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+166
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+195
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+203
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+239
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+185
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+122
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+182
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+142
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+184
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+182
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+194
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+175
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+183
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+194
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+290
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+175
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+170
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+125
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+103
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+154
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+215
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+226
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+196
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+207
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+206
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+139
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+190
	DD	imagerel $unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+183
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+194
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+290
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+175
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+170
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+125
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+103
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+154
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+215
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+226
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+196
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+207
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+206
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+139
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+190
	DD	imagerel $unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+183
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN15
	DD	imagerel $LN15+194
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z DD imagerel $LN23
	DD	imagerel $LN23+290
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+175
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+170
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+125
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+181
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+103
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+154
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+215
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z DD imagerel $LN15
	DD	imagerel $LN15+226
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+196
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+207
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+206
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN21
	DD	imagerel $LN21+139
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+190
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+181
	DD	imagerel $unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z DD imagerel $LN42
	DD	imagerel $LN42+351
	DD	imagerel $unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+188
	DD	imagerel $unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z DD imagerel $LN24
	DD	imagerel $LN24+343
	DD	imagerel $unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+181
	DD	imagerel $unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z DD imagerel $LN42
	DD	imagerel $LN42+351
	DD	imagerel $unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+188
	DD	imagerel $unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z DD imagerel $LN24
	DD	imagerel $LN24+343
	DD	imagerel $unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+181
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN42
	DD	imagerel $LN42+351
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z DD imagerel $LN18
	DD	imagerel $LN18+188
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD imagerel $LN24
	DD	imagerel $LN24+343
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD imagerel $LN37
	DD	imagerel $LN37+90
	DD	imagerel $unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+66
	DD	imagerel $unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+282
	DD	imagerel $unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD imagerel $LN32
	DD	imagerel $LN32+134
	DD	imagerel $unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+101
	DD	imagerel $unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD imagerel $LN37
	DD	imagerel $LN37+90
	DD	imagerel $unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+66
	DD	imagerel $unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+282
	DD	imagerel $unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD imagerel $LN32
	DD	imagerel $LN32+134
	DD	imagerel $unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+101
	DD	imagerel $unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN37
	DD	imagerel $LN37+90
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+66
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+282
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD imagerel $LN32
	DD	imagerel $LN32+134
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+101
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z DD imagerel $LN165
	DD	imagerel $LN165+435
	DD	imagerel $unwind$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z DD imagerel $LN30
	DD	imagerel $LN30+133
	DD	imagerel $unwind$??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z DD imagerel $LN165
	DD	imagerel $LN165+435
	DD	imagerel $unwind$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z DD imagerel $LN30
	DD	imagerel $LN30+133
	DD	imagerel $unwind$??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z DD imagerel $LN165
	DD	imagerel $LN165+435
	DD	imagerel $unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN17
	DD	imagerel $LN17+102
	DD	imagerel $unwind$??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN30
	DD	imagerel $LN30+133
	DD	imagerel $unwind$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z DD imagerel $LN162
	DD	imagerel $LN162+438
	DD	imagerel $unwind$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z DD imagerel $LN27
	DD	imagerel $LN27+168
	DD	imagerel $unwind$??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z DD imagerel $LN162
	DD	imagerel $LN162+438
	DD	imagerel $unwind$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z DD imagerel $LN27
	DD	imagerel $LN27+168
	DD	imagerel $unwind$??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z DD imagerel $LN162
	DD	imagerel $LN162+438
	DD	imagerel $unwind$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z DD imagerel $LN27
	DD	imagerel $LN27+168
	DD	imagerel $unwind$??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z DD imagerel $LN40
	DD	imagerel $LN40+357
	DD	imagerel $unwind$??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z DD imagerel $LN139
	DD	imagerel $LN139+763
	DD	imagerel $unwind$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z DD imagerel $LN26
	DD	imagerel $LN26+42
	DD	imagerel $unwind$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z DD imagerel $LN139
	DD	imagerel $LN139+763
	DD	imagerel $unwind$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z DD imagerel $LN26
	DD	imagerel $LN26+42
	DD	imagerel $unwind$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z DD imagerel $LN139
	DD	imagerel $LN139+763
	DD	imagerel $unwind$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z DD imagerel $LN26
	DD	imagerel $LN26+42
	DD	imagerel $unwind$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z DD imagerel $LN126
	DD	imagerel $LN126+756
	DD	imagerel $unwind$??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z DD imagerel $LN126
	DD	imagerel $LN126+756
	DD	imagerel $unwind$??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z DD imagerel $LN126
	DD	imagerel $LN126+756
	DD	imagerel $unwind$??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@3ff00000000000003ff0000000000000
CONST	SEGMENT
__xmm@3ff00000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000010000000000000001
CONST	SEGMENT
__xmm@00000000000000010000000000000001 DB 01H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z DD 0a2401H
	DD	027824H
	DD	03681dH
	DD	0b6410H
	DD	0a3410H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z DD 0134f01H
	DD	02c84fH
	DD	03b84aH
	DD	04a841H
	DD	05983cH
	DD	068837H
	DD	077832H
	DD	08682bH
	DD	014340fH
	DD	012010fH
	DD	07008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z DD 0134f01H
	DD	02c84fH
	DD	03b84aH
	DD	04a841H
	DD	05983cH
	DD	068837H
	DD	077832H
	DD	08682bH
	DD	014340fH
	DD	012010fH
	DD	07008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z DD 0134f01H
	DD	02c84fH
	DD	03b84aH
	DD	04a841H
	DD	05983cH
	DD	068837H
	DD	077832H
	DD	08682bH
	DD	014340fH
	DD	012010fH
	DD	07008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z DD 0135201H
	DD	04b852H
	DD	05a84dH
	DD	069844H
	DD	07883fH
	DD	08783aH
	DD	096833H
	DD	0177417H
	DD	0163417H
	DD	0140117H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z DD 0135201H
	DD	04b852H
	DD	05a84dH
	DD	069844H
	DD	07883fH
	DD	08783aH
	DD	096833H
	DD	0177417H
	DD	0163417H
	DD	0140117H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z DD 0135201H
	DD	04b852H
	DD	05a84dH
	DD	069844H
	DD	07883fH
	DD	08783aH
	DD	096833H
	DD	0177417H
	DD	0163417H
	DD	0140117H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z DD 0103101H
	DD	02b831H
	DD	03a82cH
	DD	049827H
	DD	058822H
	DD	06781aH
	DD	076813H
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z DD 081f01H
	DD	02781fH
	DD	036817H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 030b01H
	DD	0680bH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z DD 0b5f01H
	DD	0a85fH
	DD	019852H
	DD	028844H
	DD	037836H
	DD	04681dH
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 020901H
	DD	050027209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z DD 0b5801H
	DD	0a858H
	DD	01984bH
	DD	02883dH
	DD	037832H
	DD	046827H
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 030b01H
	DD	0680bH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z DD 0b5f01H
	DD	0a85fH
	DD	019852H
	DD	028844H
	DD	037836H
	DD	04681dH
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 020901H
	DD	050027209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z DD 0b5801H
	DD	0a858H
	DD	01984bH
	DD	02883dH
	DD	037832H
	DD	046827H
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 030b01H
	DD	0680bH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z DD 0b5f01H
	DD	0a85fH
	DD	019852H
	DD	028844H
	DD	037836H
	DD	04681dH
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 020901H
	DD	050027209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z DD 0b5801H
	DD	0a858H
	DD	01984bH
	DD	02883dH
	DD	037832H
	DD	046827H
	DD	0a207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 031b19H
	DD	0140109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z DD 043301H
	DD	066833H
	DD	03004d208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 021519H
	DD	03002b206H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z DD 043301H
	DD	046833H
	DD	030049208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 031b19H
	DD	0140109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z DD 043301H
	DD	066833H
	DD	03004d208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 021519H
	DD	03002b206H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z DD 043301H
	DD	046833H
	DD	030049208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 031b19H
	DD	0140109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z DD 043301H
	DD	066833H
	DD	03004d208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ DD 021819H
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 021519H
	DD	03002b206H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z DD 0104d01H
	DD	02b84dH
	DD	03a843H
	DD	04983eH
	DD	058830H
	DD	067827H
	DD	07681bH
	DD	012340fH
	DD	07008f20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z DD 043301H
	DD	046833H
	DD	030049208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ DD 021519H
	DD	030029206H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$00@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$01@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z DD 020901H
	DD	050023209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z DD 020901H
	DD	050023209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z DD 020901H
	DD	050023209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z DD 010501H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z DD 010501H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$00@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z DD 010501H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$01@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	05680bH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	05680bH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$00@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	05680bH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$01@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z DD 020901H
	DD	050021209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$00@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$01@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@N@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$00@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@M@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@N@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$01@glm@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@M@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$00@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$01@glm@@QEAA@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$00@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$00@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@N@Z DD 040b01H
	DD	03680bH
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$01@glm@@QEAA@XZ DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@M@Z DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$01@glm@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tquat@N$0A@@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tquat@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,0,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tquat@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANAEBU?$tquat@N$00@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANAEBU?$tquat@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,1,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANAEBU?$tquat@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANAEBU?$tquat@N$01@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANAEBU?$tquat@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,2,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANAEBU?$tquat@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,0,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tquat@M$00@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tquat@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,1,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tquat@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tquat@M$01@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tquat@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,2,0>::call, COMDAT

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 19   : 		}

	ret	0
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tquat@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utquat@glm@@@glm@@YANAEBU?$tquat@N$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@N$0A@Utquat@glm@@@glm@@YANAEBU?$tquat@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@N$0A@Utquat@glm@@@glm@@YANAEBU?$tquat@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$00Utquat@glm@@@glm@@YANAEBU?$tquat@N$00@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@N$00Utquat@glm@@@glm@@YANAEBU?$tquat@N$00@0@0@Z PROC ; glm::dot<double,1,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@N$00Utquat@glm@@@glm@@YANAEBU?$tquat@N$00@0@0@Z ENDP ; glm::dot<double,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$01Utquat@glm@@@glm@@YANAEBU?$tquat@N$01@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@N$01Utquat@glm@@@glm@@YANAEBU?$tquat@N$01@0@0@Z PROC ; glm::dot<double,2,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [rcx+16]
	mulsd	xmm1, QWORD PTR [rdx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, QWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rcx+8]
	mulsd	xmm2, QWORD PTR [rdx+8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	addsd	xmm2, xmm1
	addsd	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@N$01Utquat@glm@@@glm@@YANAEBU?$tquat@N$01@0@0@Z ENDP ; glm::dot<double,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$00Utquat@glm@@@glm@@YAMAEBU?$tquat@M$00@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@M$00Utquat@glm@@@glm@@YAMAEBU?$tquat@M$00@0@0@Z PROC ; glm::dot<float,1,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@M$00Utquat@glm@@@glm@@YAMAEBU?$tquat@M$00@0@0@Z ENDP ; glm::dot<float,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$01Utquat@glm@@@glm@@YAMAEBU?$tquat@M$01@0@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$dot@M$01Utquat@glm@@@glm@@YAMAEBU?$tquat@M$01@0@0@Z PROC ; glm::dot<float,2,glm::tquat>, COMDAT

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR [rdx+12]
	movss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	addss	xmm2, xmm1
	addss	xmm0, xmm2

; 175  : 	}

	ret	0
??$dot@M$01Utquat@glm@@@glm@@YAMAEBU?$tquat@M$01@0@0@Z ENDP ; glm::dot<float,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$0A@@glm@@YANAEBU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@N$0A@@glm@@YANAEBU?$tquat@N$0A@@0@@Z PROC	; glm::length<double,0>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm3, QWORD PTR [rcx+8]
	movsd	xmm1, QWORD PTR [rcx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	jmp	sqrt
??$length@N$0A@@glm@@YANAEBU?$tquat@N$0A@@0@@Z ENDP	; glm::length<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<double,0,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movsd	xmm0, QWORD PTR [r8+16]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	rdi
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movsd	QWORD PTR [rsi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rsi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$00@glm@@YANAEBU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@N$00@glm@@YANAEBU?$tquat@N$00@0@@Z PROC	; glm::length<double,1>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm3, QWORD PTR [rcx+8]
	movsd	xmm1, QWORD PTR [rcx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	jmp	sqrt
??$length@N$00@glm@@YANAEBU?$tquat@N$00@0@@Z ENDP	; glm::length<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<double,1,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,1,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movsd	xmm0, QWORD PTR [r8+16]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	rdi
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movsd	QWORD PTR [rsi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rsi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$01@glm@@YANAEBU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@N$01@glm@@YANAEBU?$tquat@N$01@0@@Z PROC	; glm::length<double,2>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm3, QWORD PTR [rcx+8]
	movsd	xmm1, QWORD PTR [rcx+16]
	movsd	xmm0, QWORD PTR [rcx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	jmp	sqrt
??$length@N$01@glm@@YANAEBU?$tquat@N$01@0@@Z ENDP	; glm::length<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<double,2,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,2,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movsd	xmm0, QWORD PTR [r8+16]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	rdi
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movsd	QWORD PTR [rsi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rsi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::length<float,0>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movss	xmm2, DWORD PTR [rcx]
	movss	xmm3, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	rex_jmp	QWORD PTR __imp_sqrtf
??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::length<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movss	xmm0, DWORD PTR [r8+8]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	rdi
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movss	DWORD PTR [rsi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rsi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$00@glm@@YAMAEBU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@M$00@glm@@YAMAEBU?$tquat@M$00@0@@Z PROC	; glm::length<float,1>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movss	xmm2, DWORD PTR [rcx]
	movss	xmm3, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	rex_jmp	QWORD PTR __imp_sqrtf
??$length@M$00@glm@@YAMAEBU?$tquat@M$00@0@@Z ENDP	; glm::length<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,1,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,1,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movss	xmm0, DWORD PTR [r8+8]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	rdi
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movss	DWORD PTR [rsi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rsi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$01@glm@@YAMAEBU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
q$ = 8
??$length@M$01@glm@@YAMAEBU?$tquat@M$01@0@@Z PROC	; glm::length<float,2>, COMDAT

; 375  : 		return glm::sqrt(dot(q, q));

	movss	xmm2, DWORD PTR [rcx]
	movss	xmm3, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	rex_jmp	QWORD PTR __imp_sqrtf
??$length@M$01@glm@@YAMAEBU?$tquat@M$01@0@@Z ENDP	; glm::length<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,2,0>::call, COMDAT

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	ret	0
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,2,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN6:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	movss	xmm0, DWORD PTR [r8+8]
	mov	rdi, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rsi, rcx
	call	rdi
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	rdi
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	rdi

; 41   : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rsi
	movss	DWORD PTR [rsi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rsi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rsi], xmm0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 665  : 		return tvec3<T, P>(

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm0, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z PROC	; glm::operator*<float,1>, COMDAT

; 665  : 		return tvec3<T, P>(

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm0, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 665  : 		return tvec3<T, P>(

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm0, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z PROC	; glm::operator*<double,2>, COMDAT

; 665  : 		return tvec3<T, P>(

	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, rcx
	mulsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx+8]
	mulsd	xmm1, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+16]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z PROC	; glm::operator*<double,1>, COMDAT

; 665  : 		return tvec3<T, P>(

	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, rcx
	mulsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx+8]
	mulsd	xmm1, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+16]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v1$ = 16
v2$ = 24
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 665  : 		return tvec3<T, P>(

	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, rcx
	mulsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx+8]
	mulsd	xmm1, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+16]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat2x4@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat2x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 296  : 		return tdualquat<T, P>(

	movsd	xmm1, QWORD PTR [rdx+8]
	mov	rax, rcx
	movsd	xmm0, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm4, QWORD PTR [rdx+56]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR [rdx+16]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	unpcklpd xmm0, xmm3
	unpcklpd xmm1, xmm4
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat2x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 160
x$ = 168
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 303  : 	{

$LN126:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 144				; 00000090H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movsd	xmm0, QWORD PTR [rdx]
	mov	rbx, rdx
	movsd	xmm1, QWORD PTR [rdx+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [rdx+80]
	addsd	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	addsd	xmm3, xmm2
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm3
	call	sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm11, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm9, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm9, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+72]
	movsd	xmm8, QWORD PTR [rbx+16]
	subsd	xmm10, QWORD PTR [rbx+48]
	subsd	xmm8, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm11, xmm12
	mulsd	xmm9, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	call	sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm10, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm9, QWORD PTR [rbx+64]
	movaps	xmm1, xmm12

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm11, QWORD PTR [rbx+72]
	addsd	xmm9, QWORD PTR [rbx+16]
	subsd	xmm11, QWORD PTR [rbx+48]
	movsd	xmm8, QWORD PTR [rbx+32]
	addsd	xmm8, QWORD PTR [rbx+8]
	divsd	xmm1, xmm0
	mulsd	xmm10, xmm12
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm8, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm10, QWORD PTR [rbx+8]
	movaps	xmm1, xmm12

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm9, QWORD PTR [rbx+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm11, QWORD PTR [rbx+16]
	addsd	xmm10, QWORD PTR [rbx+32]
	addsd	xmm9, QWORD PTR [rbx+48]
	subsd	xmm11, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm8, xmm12
	mulsd	xmm10, xmm1
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN7@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movaps	xmm0, xmm2
	call	sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm9, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm11, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm11, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+64]
	movsd	xmm8, QWORD PTR [rbx+72]
	addsd	xmm10, QWORD PTR [rbx+16]
	addsd	xmm8, QWORD PTR [rbx+48]
	divsd	xmm1, xmm0
	mulsd	xmm9, xmm12
	mulsd	xmm11, xmm1
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm10, xmm1
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm8, xmm1
$LN7@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm7, QWORD PTR [rbx+24]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+144]
	movsd	xmm3, QWORD PTR [rbx+56]
	movaps	xmm0, xmm7
	movsd	xmm4, QWORD PTR [rbx+88]
	movaps	xmm2, xmm7
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, xmm3
	mulsd	xmm0, xmm11
	movaps	xmm1, xmm4
	mov	rax, rdi
	mulsd	xmm1, xmm8
	movaps	xmm5, xmm3
	mulsd	xmm6, xmm9
	mulsd	xmm2, xmm8
	mulsd	xmm5, xmm11
	addsd	xmm6, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm9
	mulsd	xmm7, xmm10
	subsd	xmm6, xmm1
	movaps	xmm1, xmm4
	subsd	xmm5, xmm0
	mulsd	xmm1, xmm10
	movaps	xmm0, xmm3
	mulsd	xmm3, xmm8
	mulsd	xmm0, xmm10
	addsd	xmm5, xmm1
	mulsd	xmm6, xmm12
	movaps	xmm1, xmm4
	addsd	xmm7, xmm3
	subsd	xmm2, xmm0
	mulsd	xmm1, xmm11
	mulsd	xmm4, xmm9
	movaps	xmm0, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	addsd	xmm2, xmm1
	unpcklpd xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm1, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm7, xmm4
	unpcklpd xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movups	XMMWORD PTR [rdi], xmm0
	mulsd	xmm2, xmm12
	movaps	xmm0, xmm6
	mulsd	xmm7, QWORD PTR __real@bfe0000000000000
	movaps	xmm6, XMMWORD PTR [r11-16]
	mulsd	xmm5, xmm12
	movaps	xmm12, XMMWORD PTR [r11-112]
	movups	XMMWORD PTR [rdi+16], xmm1
	movaps	xmm1, xmm2
	unpcklpd xmm0, xmm5
	unpcklpd xmm1, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat2x4@N$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat2x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 296  : 		return tdualquat<T, P>(

	movsd	xmm1, QWORD PTR [rdx+8]
	mov	rax, rcx
	movsd	xmm0, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm4, QWORD PTR [rdx+56]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR [rdx+16]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	unpcklpd xmm0, xmm3
	unpcklpd xmm1, xmm4
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat2x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 160
x$ = 168
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 303  : 	{

$LN126:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 144				; 00000090H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movsd	xmm0, QWORD PTR [rdx]
	mov	rbx, rdx
	movsd	xmm1, QWORD PTR [rdx+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [rdx+80]
	addsd	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	addsd	xmm3, xmm2
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm3
	call	sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm11, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm9, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm9, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+72]
	movsd	xmm8, QWORD PTR [rbx+16]
	subsd	xmm10, QWORD PTR [rbx+48]
	subsd	xmm8, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm11, xmm12
	mulsd	xmm9, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	call	sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm10, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm9, QWORD PTR [rbx+64]
	movaps	xmm1, xmm12

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm11, QWORD PTR [rbx+72]
	addsd	xmm9, QWORD PTR [rbx+16]
	subsd	xmm11, QWORD PTR [rbx+48]
	movsd	xmm8, QWORD PTR [rbx+32]
	addsd	xmm8, QWORD PTR [rbx+8]
	divsd	xmm1, xmm0
	mulsd	xmm10, xmm12
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm8, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm10, QWORD PTR [rbx+8]
	movaps	xmm1, xmm12

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm9, QWORD PTR [rbx+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm11, QWORD PTR [rbx+16]
	addsd	xmm10, QWORD PTR [rbx+32]
	addsd	xmm9, QWORD PTR [rbx+48]
	subsd	xmm11, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm8, xmm12
	mulsd	xmm10, xmm1
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN7@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movaps	xmm0, xmm2
	call	sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm9, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm11, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm11, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+64]
	movsd	xmm8, QWORD PTR [rbx+72]
	addsd	xmm10, QWORD PTR [rbx+16]
	addsd	xmm8, QWORD PTR [rbx+48]
	divsd	xmm1, xmm0
	mulsd	xmm9, xmm12
	mulsd	xmm11, xmm1
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm10, xmm1
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm8, xmm1
$LN7@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm7, QWORD PTR [rbx+24]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+144]
	movsd	xmm3, QWORD PTR [rbx+56]
	movaps	xmm0, xmm7
	movsd	xmm4, QWORD PTR [rbx+88]
	movaps	xmm2, xmm7
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, xmm3
	mulsd	xmm0, xmm11
	movaps	xmm1, xmm4
	mov	rax, rdi
	mulsd	xmm1, xmm8
	movaps	xmm5, xmm3
	mulsd	xmm6, xmm9
	mulsd	xmm2, xmm8
	mulsd	xmm5, xmm11
	addsd	xmm6, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm9
	mulsd	xmm7, xmm10
	subsd	xmm6, xmm1
	movaps	xmm1, xmm4
	subsd	xmm5, xmm0
	mulsd	xmm1, xmm10
	movaps	xmm0, xmm3
	mulsd	xmm3, xmm8
	mulsd	xmm0, xmm10
	addsd	xmm5, xmm1
	mulsd	xmm6, xmm12
	movaps	xmm1, xmm4
	addsd	xmm7, xmm3
	subsd	xmm2, xmm0
	mulsd	xmm1, xmm11
	mulsd	xmm4, xmm9
	movaps	xmm0, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	addsd	xmm2, xmm1
	unpcklpd xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm1, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm7, xmm4
	unpcklpd xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movups	XMMWORD PTR [rdi], xmm0
	mulsd	xmm2, xmm12
	movaps	xmm0, xmm6
	mulsd	xmm7, QWORD PTR __real@bfe0000000000000
	movaps	xmm6, XMMWORD PTR [r11-16]
	mulsd	xmm5, xmm12
	movaps	xmm12, XMMWORD PTR [r11-112]
	movups	XMMWORD PTR [rdi+16], xmm1
	movaps	xmm1, xmm2
	unpcklpd xmm0, xmm5
	unpcklpd xmm1, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat2x4@N$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat2x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 296  : 		return tdualquat<T, P>(

	movsd	xmm1, QWORD PTR [rdx+8]
	mov	rax, rcx
	movsd	xmm0, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm4, QWORD PTR [rdx+56]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR [rdx+16]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	unpcklpd xmm0, xmm3
	unpcklpd xmm1, xmm4
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat2x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 160
x$ = 168
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 303  : 	{

$LN126:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 144				; 00000090H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movsd	xmm0, QWORD PTR [rdx]
	mov	rbx, rdx
	movsd	xmm1, QWORD PTR [rdx+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [rdx+80]
	addsd	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	addsd	xmm3, xmm2
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm3
	call	sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm11, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm9, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm9, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+72]
	movsd	xmm8, QWORD PTR [rbx+16]
	subsd	xmm10, QWORD PTR [rbx+48]
	subsd	xmm8, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm11, xmm12
	mulsd	xmm9, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	call	sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm10, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm9, QWORD PTR [rbx+64]
	movaps	xmm1, xmm12

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm11, QWORD PTR [rbx+72]
	addsd	xmm9, QWORD PTR [rbx+16]
	subsd	xmm11, QWORD PTR [rbx+48]
	movsd	xmm8, QWORD PTR [rbx+32]
	addsd	xmm8, QWORD PTR [rbx+8]
	divsd	xmm1, xmm0
	mulsd	xmm10, xmm12
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm8, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm10, QWORD PTR [rbx+8]
	movaps	xmm1, xmm12

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm9, QWORD PTR [rbx+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm11, QWORD PTR [rbx+16]
	addsd	xmm10, QWORD PTR [rbx+32]
	addsd	xmm9, QWORD PTR [rbx+48]
	subsd	xmm11, QWORD PTR [rbx+64]
	divsd	xmm1, xmm0
	mulsd	xmm8, xmm12
	mulsd	xmm10, xmm1
	mulsd	xmm9, xmm1
	mulsd	xmm11, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN7@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movaps	xmm0, xmm2
	call	sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	movaps	xmm9, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm11, QWORD PTR [rbx+32]
	movaps	xmm1, xmm12
	subsd	xmm11, QWORD PTR [rbx+8]
	movsd	xmm10, QWORD PTR [rbx+64]
	movsd	xmm8, QWORD PTR [rbx+72]
	addsd	xmm10, QWORD PTR [rbx+16]
	addsd	xmm8, QWORD PTR [rbx+48]
	divsd	xmm1, xmm0
	mulsd	xmm9, xmm12
	mulsd	xmm11, xmm1
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm10, xmm1
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm8, xmm1
$LN7@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm7, QWORD PTR [rbx+24]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+144]
	movsd	xmm3, QWORD PTR [rbx+56]
	movaps	xmm0, xmm7
	movsd	xmm4, QWORD PTR [rbx+88]
	movaps	xmm2, xmm7
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, xmm3
	mulsd	xmm0, xmm11
	movaps	xmm1, xmm4
	mov	rax, rdi
	mulsd	xmm1, xmm8
	movaps	xmm5, xmm3
	mulsd	xmm6, xmm9
	mulsd	xmm2, xmm8
	mulsd	xmm5, xmm11
	addsd	xmm6, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm9
	mulsd	xmm7, xmm10
	subsd	xmm6, xmm1
	movaps	xmm1, xmm4
	subsd	xmm5, xmm0
	mulsd	xmm1, xmm10
	movaps	xmm0, xmm3
	mulsd	xmm3, xmm8
	mulsd	xmm0, xmm10
	addsd	xmm5, xmm1
	mulsd	xmm6, xmm12
	movaps	xmm1, xmm4
	addsd	xmm7, xmm3
	subsd	xmm2, xmm0
	mulsd	xmm1, xmm11
	mulsd	xmm4, xmm9
	movaps	xmm0, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	addsd	xmm2, xmm1
	unpcklpd xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm1, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm7, xmm4
	unpcklpd xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movups	XMMWORD PTR [rdi], xmm0
	mulsd	xmm2, xmm12
	movaps	xmm0, xmm6
	mulsd	xmm7, QWORD PTR __real@bfe0000000000000
	movaps	xmm6, XMMWORD PTR [r11-16]
	mulsd	xmm5, xmm12
	movaps	xmm12, XMMWORD PTR [r11-112]
	movups	XMMWORD PTR [rdi+16], xmm1
	movaps	xmm1, xmm2
	unpcklpd xmm0, xmm5
	unpcklpd xmm1, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
__$ReturnUdt$ = 48
x$ = 56
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 295  : 	{

$LN26:
	sub	rsp, 40					; 00000028H

; 296  : 		return tdualquat<T, P>(

	movups	xmm0, XMMWORD PTR [rdx+16]
	mov	rax, rcx
	movups	XMMWORD PTR $T2[rsp], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movups	XMMWORD PTR $T1[rsp], xmm0
	movdqu	XMMWORD PTR [rcx], xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z
_TEXT	SEGMENT
real$ = 32
dual$ = 48
__$ReturnUdt$ = 176
x$ = 184
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 303  : 	{

$LN139:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rdi
	push	rbp
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 160				; 000000a0H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movss	xmm0, DWORD PTR [rdx]
	mov	rbx, rdx
	movss	xmm1, DWORD PTR [rdx+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [rdx+40]
	addss	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	addss	xmm3, xmm2
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm10, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm8, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm8, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+36]
	movss	xmm7, DWORD PTR [rbx+8]
	subss	xmm9, DWORD PTR [rbx+24]
	subss	xmm7, DWORD PTR [rbx+32]
	divss	xmm1, xmm10
	mulss	xmm10, xmm11
	mulss	xmm8, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN135@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm9, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm8, DWORD PTR [rbx+32]
	movaps	xmm1, xmm11

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm10, DWORD PTR [rbx+36]
	addss	xmm8, DWORD PTR [rbx+8]
	subss	xmm10, DWORD PTR [rbx+24]
	movss	xmm7, DWORD PTR [rbx+16]
	addss	xmm7, DWORD PTR [rbx+4]
	divss	xmm1, xmm9
	mulss	xmm9, xmm11
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN136@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm7, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm9, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm8, DWORD PTR [rbx+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm10, DWORD PTR [rbx+8]
	addss	xmm9, DWORD PTR [rbx+4]
	addss	xmm8, DWORD PTR [rbx+24]
	subss	xmm10, DWORD PTR [rbx+32]
	divss	xmm1, xmm7
	mulss	xmm7, xmm11
	mulss	xmm9, xmm1
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN137@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	movaps	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm8, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm10, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm10, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+32]
	movss	xmm7, DWORD PTR [rbx+36]
	addss	xmm9, DWORD PTR [rbx+8]
	addss	xmm7, DWORD PTR [rbx+24]
	divss	xmm1, xmm8
	mulss	xmm8, xmm11
	mulss	xmm10, xmm1
$LN135@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm9, xmm1
$LN136@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm7, xmm1
$LN137@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm6, DWORD PTR [rbx+12]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+160]
	movss	xmm4, DWORD PTR [rbx+28]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [rbx+44]
	movaps	xmm2, xmm4
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm8
	movaps	xmm3, xmm4
	mov	rax, rdi
	mulss	xmm0, xmm10
	mulss	xmm1, xmm7
	addss	xmm2, xmm0
	mulss	xmm3, xmm10
	movaps	xmm0, xmm6
	movss	DWORD PTR real$[rbp-61], xmm10
	mulss	xmm0, xmm8
	subss	xmm2, xmm1
	movss	DWORD PTR real$[rbp-65], xmm8
	movaps	xmm1, xmm5
	movss	DWORD PTR real$[rbp-69], xmm7
	subss	xmm3, xmm0
	mulss	xmm1, xmm9
	movaps	xmm0, xmm4
	movss	DWORD PTR real$[rbp-73], xmm9
	mulss	xmm2, xmm11
	addss	xmm3, xmm1
	mulss	xmm0, xmm9
	movaps	xmm1, xmm5
	mulss	xmm4, xmm7
	movss	DWORD PTR dual$[rbp-73], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	mulss	xmm2, xmm7
	movaps	xmm7, XMMWORD PTR [r11-32]
	addss	xmm6, xmm4
	mulss	xmm1, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm2, xmm0
	movups	xmm0, XMMWORD PTR real$[rbp-73]
	mulss	xmm5, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	addss	xmm2, xmm1
	mulss	xmm3, xmm11
	addss	xmm6, xmm5
	movdqu	XMMWORD PTR [rdi], xmm0
	mulss	xmm2, xmm11
	mulss	xmm6, DWORD PTR __real@bf000000
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR dual$[rbp-65], xmm2
	movss	DWORD PTR dual$[rbp-61], xmm6
	movaps	xmm6, XMMWORD PTR [r11-16]
	movss	DWORD PTR dual$[rbp-69], xmm3
	movups	xmm1, XMMWORD PTR dual$[rbp-73]
	movdqu	XMMWORD PTR [rdi+16], xmm1
	mov	rdi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rbp
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
__$ReturnUdt$ = 48
x$ = 56
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 295  : 	{

$LN26:
	sub	rsp, 40					; 00000028H

; 296  : 		return tdualquat<T, P>(

	movups	xmm0, XMMWORD PTR [rdx+16]
	mov	rax, rcx
	movups	XMMWORD PTR $T2[rsp], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movups	XMMWORD PTR $T1[rsp], xmm0
	movdqu	XMMWORD PTR [rcx], xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat2x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z
_TEXT	SEGMENT
real$ = 32
dual$ = 48
__$ReturnUdt$ = 176
x$ = 184
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 303  : 	{

$LN139:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rdi
	push	rbp
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 160				; 000000a0H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movss	xmm0, DWORD PTR [rdx]
	mov	rbx, rdx
	movss	xmm1, DWORD PTR [rdx+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [rdx+40]
	addss	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	addss	xmm3, xmm2
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm10, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm8, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm8, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+36]
	movss	xmm7, DWORD PTR [rbx+8]
	subss	xmm9, DWORD PTR [rbx+24]
	subss	xmm7, DWORD PTR [rbx+32]
	divss	xmm1, xmm10
	mulss	xmm10, xmm11
	mulss	xmm8, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN135@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm9, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm8, DWORD PTR [rbx+32]
	movaps	xmm1, xmm11

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm10, DWORD PTR [rbx+36]
	addss	xmm8, DWORD PTR [rbx+8]
	subss	xmm10, DWORD PTR [rbx+24]
	movss	xmm7, DWORD PTR [rbx+16]
	addss	xmm7, DWORD PTR [rbx+4]
	divss	xmm1, xmm9
	mulss	xmm9, xmm11
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN136@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm7, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm9, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm8, DWORD PTR [rbx+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm10, DWORD PTR [rbx+8]
	addss	xmm9, DWORD PTR [rbx+4]
	addss	xmm8, DWORD PTR [rbx+24]
	subss	xmm10, DWORD PTR [rbx+32]
	divss	xmm1, xmm7
	mulss	xmm7, xmm11
	mulss	xmm9, xmm1
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN137@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	movaps	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm8, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm10, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm10, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+32]
	movss	xmm7, DWORD PTR [rbx+36]
	addss	xmm9, DWORD PTR [rbx+8]
	addss	xmm7, DWORD PTR [rbx+24]
	divss	xmm1, xmm8
	mulss	xmm8, xmm11
	mulss	xmm10, xmm1
$LN135@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm9, xmm1
$LN136@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm7, xmm1
$LN137@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm6, DWORD PTR [rbx+12]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+160]
	movss	xmm4, DWORD PTR [rbx+28]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [rbx+44]
	movaps	xmm2, xmm4
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm8
	movaps	xmm3, xmm4
	mov	rax, rdi
	mulss	xmm0, xmm10
	mulss	xmm1, xmm7
	addss	xmm2, xmm0
	mulss	xmm3, xmm10
	movaps	xmm0, xmm6
	movss	DWORD PTR real$[rbp-61], xmm10
	mulss	xmm0, xmm8
	subss	xmm2, xmm1
	movss	DWORD PTR real$[rbp-65], xmm8
	movaps	xmm1, xmm5
	movss	DWORD PTR real$[rbp-69], xmm7
	subss	xmm3, xmm0
	mulss	xmm1, xmm9
	movaps	xmm0, xmm4
	movss	DWORD PTR real$[rbp-73], xmm9
	mulss	xmm2, xmm11
	addss	xmm3, xmm1
	mulss	xmm0, xmm9
	movaps	xmm1, xmm5
	mulss	xmm4, xmm7
	movss	DWORD PTR dual$[rbp-73], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	mulss	xmm2, xmm7
	movaps	xmm7, XMMWORD PTR [r11-32]
	addss	xmm6, xmm4
	mulss	xmm1, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm2, xmm0
	movups	xmm0, XMMWORD PTR real$[rbp-73]
	mulss	xmm5, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	addss	xmm2, xmm1
	mulss	xmm3, xmm11
	addss	xmm6, xmm5
	movdqu	XMMWORD PTR [rdi], xmm0
	mulss	xmm2, xmm11
	mulss	xmm6, DWORD PTR __real@bf000000
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR dual$[rbp-65], xmm2
	movss	DWORD PTR dual$[rbp-61], xmm6
	movaps	xmm6, XMMWORD PTR [r11-16]
	movss	DWORD PTR dual$[rbp-69], xmm3
	movups	xmm1, XMMWORD PTR dual$[rbp-73]
	movdqu	XMMWORD PTR [rdi+16], xmm1
	mov	rdi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rbp
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
__$ReturnUdt$ = 48
x$ = 56
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 295  : 	{

$LN26:
	sub	rsp, 40					; 00000028H

; 296  : 		return tdualquat<T, P>(

	movups	xmm0, XMMWORD PTR [rdx+16]
	mov	rax, rcx
	movups	XMMWORD PTR $T2[rsp], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movups	XMMWORD PTR $T1[rsp], xmm0
	movdqu	XMMWORD PTR [rcx], xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat2x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z
_TEXT	SEGMENT
real$ = 32
dual$ = 48
__$ReturnUdt$ = 176
x$ = 184
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 303  : 	{

$LN139:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rdi
	push	rbp
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 160				; 000000a0H

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	movss	xmm0, DWORD PTR [rdx]
	mov	rbx, rdx
	movss	xmm1, DWORD PTR [rdx+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [rdx+40]
	addss	xmm3, xmm1
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	addss	xmm3, xmm2
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm10, xmm0

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm8, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm8, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+36]
	movss	xmm7, DWORD PTR [rbx+8]
	subss	xmm9, DWORD PTR [rbx+24]
	subss	xmm7, DWORD PTR [rbx+32]
	divss	xmm1, xmm10
	mulss	xmm10, xmm11
	mulss	xmm8, xmm1

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN135@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm9, xmm0

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm8, DWORD PTR [rbx+32]
	movaps	xmm1, xmm11

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm10, DWORD PTR [rbx+36]
	addss	xmm8, DWORD PTR [rbx+8]
	subss	xmm10, DWORD PTR [rbx+24]
	movss	xmm7, DWORD PTR [rbx+16]
	addss	xmm7, DWORD PTR [rbx+4]
	divss	xmm1, xmm9
	mulss	xmm9, xmm11
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN136@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm7, xmm0

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm9, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm8, DWORD PTR [rbx+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm10, DWORD PTR [rbx+8]
	addss	xmm9, DWORD PTR [rbx+4]
	addss	xmm8, DWORD PTR [rbx+24]
	subss	xmm10, DWORD PTR [rbx+32]
	divss	xmm1, xmm7
	mulss	xmm7, xmm11
	mulss	xmm9, xmm1
	mulss	xmm8, xmm1
	mulss	xmm10, xmm1

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN137@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	movaps	xmm0, xmm2
	call	QWORD PTR __imp_sqrtf

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm11, DWORD PTR __real@3f000000
	movaps	xmm8, xmm0

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm10, DWORD PTR [rbx+16]
	movaps	xmm1, xmm11
	subss	xmm10, DWORD PTR [rbx+4]
	movss	xmm9, DWORD PTR [rbx+32]
	movss	xmm7, DWORD PTR [rbx+36]
	addss	xmm9, DWORD PTR [rbx+8]
	addss	xmm7, DWORD PTR [rbx+24]
	divss	xmm1, xmm8
	mulss	xmm8, xmm11
	mulss	xmm10, xmm1
$LN135@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm9, xmm1
$LN136@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm7, xmm1
$LN137@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm6, DWORD PTR [rbx+12]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);
; 350  : 	}

	lea	r11, QWORD PTR [rsp+160]
	movss	xmm4, DWORD PTR [rbx+28]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [rbx+44]
	movaps	xmm2, xmm4
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm8
	movaps	xmm3, xmm4
	mov	rax, rdi
	mulss	xmm0, xmm10
	mulss	xmm1, xmm7
	addss	xmm2, xmm0
	mulss	xmm3, xmm10
	movaps	xmm0, xmm6
	movss	DWORD PTR real$[rbp-61], xmm10
	mulss	xmm0, xmm8
	subss	xmm2, xmm1
	movss	DWORD PTR real$[rbp-65], xmm8
	movaps	xmm1, xmm5
	movss	DWORD PTR real$[rbp-69], xmm7
	subss	xmm3, xmm0
	mulss	xmm1, xmm9
	movaps	xmm0, xmm4
	movss	DWORD PTR real$[rbp-73], xmm9
	mulss	xmm2, xmm11
	addss	xmm3, xmm1
	mulss	xmm0, xmm9
	movaps	xmm1, xmm5
	mulss	xmm4, xmm7
	movss	DWORD PTR dual$[rbp-73], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	mulss	xmm2, xmm7
	movaps	xmm7, XMMWORD PTR [r11-32]
	addss	xmm6, xmm4
	mulss	xmm1, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm2, xmm0
	movups	xmm0, XMMWORD PTR real$[rbp-73]
	mulss	xmm5, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	addss	xmm2, xmm1
	mulss	xmm3, xmm11
	addss	xmm6, xmm5
	movdqu	XMMWORD PTR [rdi], xmm0
	mulss	xmm2, xmm11
	mulss	xmm6, DWORD PTR __real@bf000000
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR dual$[rbp-65], xmm2
	movss	DWORD PTR dual$[rbp-61], xmm6
	movaps	xmm6, XMMWORD PTR [r11-16]
	movss	DWORD PTR dual$[rbp-69], xmm3
	movups	xmm1, XMMWORD PTR dual$[rbp-73]
	movdqu	XMMWORD PTR [rdi+16], xmm1
	mov	rdi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rbp
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
q$ = 152
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z PROC ; glm::mat4_cast<double,0>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ENDP ; glm::mat4_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z PROC ; glm::mat3_cast<double,0>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm11, QWORD PTR __real@3ff0000000000000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z	; glm::tmat3x3<double,0>::tmat3x3<double,0>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movsd	xmm0, QWORD PTR [rbx+16]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movsd	xmm1, QWORD PTR [rbx+8]
	movaps	xmm5, xmm0
	movsd	xmm2, QWORD PTR [rbx+24]
	movaps	xmm10, xmm1
	movsd	xmm9, QWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulsd	xmm10, xmm1
	movaps	xmm7, xmm0
	mulsd	xmm7, QWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulsd	xmm8, xmm1
	mulsd	xmm4, xmm1
	mulsd	xmm5, xmm0
	mulsd	xmm2, xmm0
	movaps	xmm0, xmm11
	mulsd	xmm9, xmm9
	movaps	xmm1, xmm5
	addsd	xmm1, xmm10
	addsd	xmm10, xmm9
	addsd	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm1, xmm1
	addsd	xmm10, xmm10
	addsd	xmm5, xmm5
	subsd	xmm0, xmm1
	movaps	xmm1, xmm2
	addsd	xmm1, xmm3
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subsd	xmm0, xmm4
	addsd	xmm1, xmm1
	addsd	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addsd	xmm3, xmm3
	addsd	xmm0, xmm0
	movsd	QWORD PTR [rdi+8], xmm1
	movaps	xmm1, xmm6
	addsd	xmm1, xmm8
	subsd	xmm8, xmm6
	movsd	QWORD PTR [rdi+24], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addsd	xmm4, xmm4
	movsd	QWORD PTR [rdi+16], xmm0
	movaps	xmm0, xmm11
	subsd	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subsd	xmm0, xmm5
	addsd	xmm8, xmm8
	addsd	xmm1, xmm1
	movsd	QWORD PTR [rdi+48], xmm4
	movsd	QWORD PTR [rdi+64], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movsd	QWORD PTR [rdi+56], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movsd	QWORD PTR [rdi+32], xmm0
	movsd	QWORD PTR [rdi+40], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ENDP ; glm::mat3_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z PROC ; glm::normalize<double,0>, COMDAT

; 380  : 	{

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movsd	xmm1, QWORD PTR [rdx]
	mov	rdi, rdx
	movsd	xmm0, QWORD PTR [rdx+8]
	mov	rbx, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	call	sqrt
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comisd	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rbx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+24], rax
	jmp	SHORT $LN25@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mov	rax, rbx
	divsd	xmm1, xmm0
	sub	rdi, rbx
	mov	ecx, 2
	unpcklpd xmm1, xmm1
$LL16@normalize:

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi+rax]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [rax], xmm0
	lea	rax, QWORD PTR [rax+16]
	sub	rcx, 1
	jne	SHORT $LL16@normalize
$LN25@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z ENDP ; glm::normalize<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movsd	xmm0, QWORD PTR [rcx+8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rcx+16]
	mulsd	xmm2, QWORD PTR [rdx+16]
	addsd	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addsd	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC ; glm::cross<double,0>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 182  : 	}

	ret	0
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP ; glm::cross<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z PROC ; glm::sin<double,0,glm::tvec3>, COMDAT

; 45   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	sin
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	sin
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	sin

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ENDP ; glm::sin<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z PROC ; glm::cos<double,0,glm::tvec3>, COMDAT

; 54   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	cos
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	cos
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	cos

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ENDP ; glm::cos<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 629  : 		return tvec3<T, P>(

	movups	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	unpcklpd xmm2, xmm2
	mulpd	xmm0, xmm2
	mulsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 622  : 	{

$LN162:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movsd	xmm1, QWORD PTR [rdx+32]
	mov	rbx, rdx
	movsd	xmm0, QWORD PTR [rdx+64]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movsd	xmm2, QWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subsd	xmm3, QWORD PTR [rdx]
	subsd	xmm4, QWORD PTR [rdx]
	subsd	xmm2, xmm1
	mov	rdi, rcx
	subsd	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addsd	xmm1, QWORD PTR [rdx]
	subsd	xmm2, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comisd	xmm2, xmm5
	seta	sil
	comisd	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm1
	call	sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm2, QWORD PTR __real@3fd0000000000000
	movaps	xmm3, xmm0
	mulsd	xmm3, QWORD PTR __real@3fe0000000000000
	divsd	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	addsd	xmm1, QWORD PTR [rbx+16]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [rdi+16], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0
	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+8], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	subsd	xmm0, QWORD PTR [rbx+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]

; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [rdi+8], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]
	movsd	QWORD PTR [rdi], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	addsd	xmm0, QWORD PTR [rbx+16]

; 663  : 			break;

	jmp	SHORT $LN160@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	subsd	xmm1, QWORD PTR [rbx+16]
	movsd	QWORD PTR [rdi+24], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]
$LN160@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+8], xmm1
$LN159@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+16], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
m4$ = 152
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat4x4@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
q$ = 152
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z PROC ; glm::mat4_cast<double,1>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@AEBU?$tquat@N$00@0@@Z ENDP ; glm::mat4_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z PROC ; glm::mat3_cast<double,1>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm11, QWORD PTR __real@3ff0000000000000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@N$00@glm@@QEAA@N@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movsd	xmm0, QWORD PTR [rbx+16]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movsd	xmm1, QWORD PTR [rbx+8]
	movaps	xmm5, xmm0
	movsd	xmm2, QWORD PTR [rbx+24]
	movaps	xmm10, xmm1
	movsd	xmm9, QWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulsd	xmm10, xmm1
	movaps	xmm7, xmm0
	mulsd	xmm7, QWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulsd	xmm8, xmm1
	mulsd	xmm4, xmm1
	mulsd	xmm5, xmm0
	mulsd	xmm2, xmm0
	movaps	xmm0, xmm11
	mulsd	xmm9, xmm9
	movaps	xmm1, xmm5
	addsd	xmm1, xmm10
	addsd	xmm10, xmm9
	addsd	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm1, xmm1
	addsd	xmm10, xmm10
	addsd	xmm5, xmm5
	subsd	xmm0, xmm1
	movaps	xmm1, xmm2
	addsd	xmm1, xmm3
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subsd	xmm0, xmm4
	addsd	xmm1, xmm1
	addsd	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addsd	xmm3, xmm3
	addsd	xmm0, xmm0
	movsd	QWORD PTR [rdi+8], xmm1
	movaps	xmm1, xmm6
	addsd	xmm1, xmm8
	subsd	xmm8, xmm6
	movsd	QWORD PTR [rdi+24], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addsd	xmm4, xmm4
	movsd	QWORD PTR [rdi+16], xmm0
	movaps	xmm0, xmm11
	subsd	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subsd	xmm0, xmm5
	addsd	xmm8, xmm8
	addsd	xmm1, xmm1
	movsd	QWORD PTR [rdi+48], xmm4
	movsd	QWORD PTR [rdi+64], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movsd	QWORD PTR [rdi+56], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movsd	QWORD PTR [rdi+32], xmm0
	movsd	QWORD PTR [rdi+40], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z ENDP ; glm::mat3_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z PROC ; glm::normalize<double,1>, COMDAT

; 380  : 	{

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movsd	xmm1, QWORD PTR [rdx]
	mov	rdi, rdx
	movsd	xmm0, QWORD PTR [rdx+8]
	mov	rbx, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	call	sqrt
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comisd	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rbx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+24], rax
	jmp	SHORT $LN25@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mov	rax, rbx
	divsd	xmm1, xmm0
	sub	rdi, rbx
	mov	ecx, 2
	unpcklpd xmm1, xmm1
$LL16@normalize:

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi+rax]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [rax], xmm0
	lea	rax, QWORD PTR [rax+16]
	sub	rcx, 1
	jne	SHORT $LL16@normalize
$LN25@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z ENDP ; glm::normalize<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANAEBU?$tvec3@N$00@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANAEBU?$tvec3@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movsd	xmm0, QWORD PTR [rcx+8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rcx+16]
	mulsd	xmm2, QWORD PTR [rdx+16]
	addsd	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addsd	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANAEBU?$tvec3@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z PROC	; glm::cross<double,1>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 182  : 	}

	ret	0
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@0@Z ENDP	; glm::cross<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z PROC ; glm::sin<double,1,glm::tvec3>, COMDAT

; 45   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	sin
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	sin
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	sin

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z ENDP ; glm::sin<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z PROC ; glm::cos<double,1,glm::tvec3>, COMDAT

; 54   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	cos
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	cos
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	cos

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@AEBU10@@Z ENDP ; glm::cos<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@N@Z PROC	; glm::operator*<double,1>, COMDAT

; 629  : 		return tvec3<T, P>(

	movups	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	unpcklpd xmm2, xmm2
	mulpd	xmm0, xmm2
	mulsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@AEBU10@N@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 622  : 	{

$LN162:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movsd	xmm1, QWORD PTR [rdx+32]
	mov	rbx, rdx
	movsd	xmm0, QWORD PTR [rdx+64]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movsd	xmm2, QWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subsd	xmm3, QWORD PTR [rdx]
	subsd	xmm4, QWORD PTR [rdx]
	subsd	xmm2, xmm1
	mov	rdi, rcx
	subsd	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addsd	xmm1, QWORD PTR [rdx]
	subsd	xmm2, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comisd	xmm2, xmm5
	seta	sil
	comisd	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm1
	call	sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm2, QWORD PTR __real@3fd0000000000000
	movaps	xmm3, xmm0
	mulsd	xmm3, QWORD PTR __real@3fe0000000000000
	divsd	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	addsd	xmm1, QWORD PTR [rbx+16]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [rdi+16], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0
	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+8], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	subsd	xmm0, QWORD PTR [rbx+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]

; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [rdi+8], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]
	movsd	QWORD PTR [rdi], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	addsd	xmm0, QWORD PTR [rbx+16]

; 663  : 			break;

	jmp	SHORT $LN160@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	subsd	xmm1, QWORD PTR [rbx+16]
	movsd	QWORD PTR [rdi+24], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]
$LN160@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+8], xmm1
$LN159@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+16], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
m4$ = 152
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat4x4@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
q$ = 152
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z PROC ; glm::mat4_cast<double,2>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@AEBU?$tquat@N$01@0@@Z ENDP ; glm::mat4_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z PROC ; glm::mat3_cast<double,2>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm11, QWORD PTR __real@3ff0000000000000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@N$01@glm@@QEAA@N@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movsd	xmm0, QWORD PTR [rbx+16]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movsd	xmm1, QWORD PTR [rbx+8]
	movaps	xmm5, xmm0
	movsd	xmm2, QWORD PTR [rbx+24]
	movaps	xmm10, xmm1
	movsd	xmm9, QWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulsd	xmm10, xmm1
	movaps	xmm7, xmm0
	mulsd	xmm7, QWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulsd	xmm8, xmm1
	mulsd	xmm4, xmm1
	mulsd	xmm5, xmm0
	mulsd	xmm2, xmm0
	movaps	xmm0, xmm11
	mulsd	xmm9, xmm9
	movaps	xmm1, xmm5
	addsd	xmm1, xmm10
	addsd	xmm10, xmm9
	addsd	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addsd	xmm1, xmm1
	addsd	xmm10, xmm10
	addsd	xmm5, xmm5
	subsd	xmm0, xmm1
	movaps	xmm1, xmm2
	addsd	xmm1, xmm3
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subsd	xmm0, xmm4
	addsd	xmm1, xmm1
	addsd	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addsd	xmm3, xmm3
	addsd	xmm0, xmm0
	movsd	QWORD PTR [rdi+8], xmm1
	movaps	xmm1, xmm6
	addsd	xmm1, xmm8
	subsd	xmm8, xmm6
	movsd	QWORD PTR [rdi+24], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addsd	xmm4, xmm4
	movsd	QWORD PTR [rdi+16], xmm0
	movaps	xmm0, xmm11
	subsd	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subsd	xmm0, xmm5
	addsd	xmm8, xmm8
	addsd	xmm1, xmm1
	movsd	QWORD PTR [rdi+48], xmm4
	movsd	QWORD PTR [rdi+64], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movsd	QWORD PTR [rdi+56], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movsd	QWORD PTR [rdi+32], xmm0
	movsd	QWORD PTR [rdi+40], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z ENDP ; glm::mat3_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z PROC ; glm::normalize<double,2>, COMDAT

; 380  : 	{

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movsd	xmm1, QWORD PTR [rdx]
	mov	rdi, rdx
	movsd	xmm0, QWORD PTR [rdx+8]
	mov	rbx, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+24]
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	addsd	xmm0, xmm1
	addsd	xmm3, xmm2
	addsd	xmm0, xmm3
	call	sqrt
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comisd	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rbx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+24], rax
	jmp	SHORT $LN25@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mov	rax, rbx
	divsd	xmm1, xmm0
	sub	rdi, rbx
	mov	ecx, 2
	unpcklpd xmm1, xmm1
$LL16@normalize:

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi+rax]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [rax], xmm0
	lea	rax, QWORD PTR [rax+16]
	sub	rcx, 1
	jne	SHORT $LL16@normalize
$LN25@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z ENDP ; glm::normalize<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANAEBU?$tvec3@N$01@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANAEBU?$tvec3@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movsd	xmm0, QWORD PTR [rcx+8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	movsd	xmm1, QWORD PTR [rcx]
	mulsd	xmm1, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rcx+16]
	mulsd	xmm2, QWORD PTR [rdx+16]
	addsd	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addsd	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANAEBU?$tvec3@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z PROC	; glm::cross<double,2>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movsd	xmm1, QWORD PTR [r8+16]
	mov	rax, rcx
	mulsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [r8+8]
	mulsd	xmm0, QWORD PTR [rdx+16]
	movsd	xmm2, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [rdx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [r8+16]
	mulsd	xmm3, QWORD PTR [r8+8]
	movsd	QWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rdx+16]
	mulsd	xmm2, QWORD PTR [rdx+8]
	subsd	xmm1, xmm0
	subsd	xmm3, xmm2
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3

; 182  : 	}

	ret	0
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@0@Z ENDP	; glm::cross<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z PROC ; glm::sin<double,2,glm::tvec3>, COMDAT

; 45   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	sin
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	sin
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	sin

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z ENDP ; glm::sin<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z PROC ; glm::cos<double,2,glm::tvec3>, COMDAT

; 54   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	cos
	movaps	xmm7, xmm0
	movsd	xmm0, QWORD PTR [rbx+8]
	call	cos
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx]
	call	cos

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movsd	QWORD PTR [rdi+8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	QWORD PTR [rdi+16], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@AEBU10@@Z ENDP ; glm::cos<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@N@Z PROC	; glm::operator*<double,2>, COMDAT

; 629  : 		return tvec3<T, P>(

	movups	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	unpcklpd xmm2, xmm2
	mulpd	xmm0, xmm2
	mulsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@AEBU10@N@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 622  : 	{

$LN162:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movsd	xmm1, QWORD PTR [rdx+32]
	mov	rbx, rdx
	movsd	xmm0, QWORD PTR [rdx+64]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movsd	xmm2, QWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subsd	xmm3, QWORD PTR [rdx]
	subsd	xmm4, QWORD PTR [rdx]
	subsd	xmm2, xmm1
	mov	rdi, rcx
	subsd	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addsd	xmm1, QWORD PTR [rdx]
	subsd	xmm2, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comisd	xmm2, xmm5
	seta	sil
	comisd	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm1
	call	sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm2, QWORD PTR __real@3fd0000000000000
	movaps	xmm3, xmm0
	mulsd	xmm3, QWORD PTR __real@3fe0000000000000
	divsd	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	addsd	xmm1, QWORD PTR [rbx+16]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [rdi+16], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0
	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+8], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	subsd	xmm0, QWORD PTR [rbx+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]

; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [rdi+8], xmm3
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+56]
	addsd	xmm0, QWORD PTR [rbx+40]
	movsd	QWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm1, QWORD PTR [rbx+24]
	addsd	xmm1, QWORD PTR [rbx+8]
	movsd	QWORD PTR [rdi], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+24], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [rbx+48]
	addsd	xmm0, QWORD PTR [rbx+16]

; 663  : 			break;

	jmp	SHORT $LN160@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [rbx+40]
	subsd	xmm0, QWORD PTR [rbx+56]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm1, QWORD PTR [rbx+48]
	subsd	xmm1, QWORD PTR [rbx+16]
	movsd	QWORD PTR [rdi+24], xmm3
	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [rbx+8]
	subsd	xmm0, QWORD PTR [rbx+24]
$LN160@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rdi+8], xmm1
$LN159@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulsd	xmm0, xmm2
	movsd	QWORD PTR [rdi+16], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
m4$ = 152
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat4x4@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
q$ = 104
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z PROC ; glm::mat4_cast<float,0>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ENDP ; glm::mat4_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z PROC ; glm::mat3_cast<float,0>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movss	xmm11, DWORD PTR __real@3f800000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movss	xmm0, DWORD PTR [rbx+8]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movss	xmm1, DWORD PTR [rbx+4]
	movaps	xmm5, xmm0
	movss	xmm2, DWORD PTR [rbx+12]
	movaps	xmm10, xmm1
	movss	xmm9, DWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulss	xmm10, xmm1
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulss	xmm8, xmm1
	mulss	xmm4, xmm1
	mulss	xmm5, xmm0
	mulss	xmm2, xmm0
	movaps	xmm0, xmm11
	movaps	xmm1, xmm5
	mulss	xmm9, xmm9
	addss	xmm1, xmm10
	addss	xmm10, xmm9
	addss	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addss	xmm1, xmm1
	addss	xmm10, xmm10
	addss	xmm5, xmm5
	subss	xmm0, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, xmm3
	subss	xmm3, xmm2
	movss	DWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, xmm4
	addss	xmm1, xmm1
	addss	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addss	xmm3, xmm3
	addss	xmm0, xmm0
	movss	DWORD PTR [rdi+4], xmm1
	movaps	xmm1, xmm6
	addss	xmm1, xmm8
	subss	xmm8, xmm6
	movss	DWORD PTR [rdi+12], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addss	xmm4, xmm4
	movss	DWORD PTR [rdi+8], xmm0
	movaps	xmm0, xmm11
	subss	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm0, xmm5
	addss	xmm8, xmm8
	addss	xmm1, xmm1
	movss	DWORD PTR [rdi+24], xmm4
	movss	DWORD PTR [rdi+32], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR [rdi+28], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movss	DWORD PTR [rdi+16], xmm0
	movss	DWORD PTR [rdi+20], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ENDP ; glm::mat3_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0>, COMDAT

; 380  : 	{

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movss	xmm1, DWORD PTR [rdx]
	mov	rdi, rdx
	movss	xmm0, DWORD PTR [rdx+4]
	mov	rbx, rcx
	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm3, DWORD PTR [rdx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comiss	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	DWORD PTR [rbx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rbx], rax
	mov	DWORD PTR [rbx+8], eax
	jmp	SHORT $LN28@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi]
	shufps	xmm1, xmm1, 0
	mulps	xmm1, xmm0
	movups	XMMWORD PTR [rbx], xmm1
$LN28@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rcx+8]
	mulss	xmm2, DWORD PTR [rdx+8]
	addss	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addss	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 182  : 	}

	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::sin<float,0,glm::tvec3>, COMDAT

; 45   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_sinf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_sinf

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::sin<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::cos<float,0,glm::tvec3>, COMDAT

; 54   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_cosf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_cosf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_cosf

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::cos<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 629  : 		return tvec3<T, P>(

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm2, DWORD PTR [rdx+8]
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 622  : 	{

$LN165:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movss	xmm1, DWORD PTR [rdx+16]
	mov	rbx, rdx
	movss	xmm0, DWORD PTR [rdx+32]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movss	xmm2, DWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subss	xmm3, DWORD PTR [rdx]
	subss	xmm4, DWORD PTR [rdx]
	subss	xmm2, xmm1
	mov	rdi, rcx
	subss	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addss	xmm1, DWORD PTR [rdx]
	subss	xmm2, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comiss	xmm2, xmm5
	seta	sil
	comiss	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm2, DWORD PTR __real@3e800000
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR __real@3f000000
	divss	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	addss	xmm1, DWORD PTR [rbx+8]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [rdi+8], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0
	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+4], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	subss	xmm0, DWORD PTR [rbx+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]

; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [rdi+4], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN162@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]
	movss	DWORD PTR [rdi], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	addss	xmm0, DWORD PTR [rbx+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	subss	xmm1, DWORD PTR [rbx+8]
	movss	DWORD PTR [rdi+12], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]
$LN163@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+4], xmm1
$LN162@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+8], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
m4$ = 104
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
q$ = 104
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z PROC ; glm::mat4_cast<float,1>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU?$tquat@M$00@0@@Z ENDP ; glm::mat4_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z PROC ; glm::mat3_cast<float,1>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movss	xmm11, DWORD PTR __real@3f800000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@M$00@glm@@QEAA@M@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movss	xmm0, DWORD PTR [rbx+8]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movss	xmm1, DWORD PTR [rbx+4]
	movaps	xmm5, xmm0
	movss	xmm2, DWORD PTR [rbx+12]
	movaps	xmm10, xmm1
	movss	xmm9, DWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulss	xmm10, xmm1
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulss	xmm8, xmm1
	mulss	xmm4, xmm1
	mulss	xmm5, xmm0
	mulss	xmm2, xmm0
	movaps	xmm0, xmm11
	movaps	xmm1, xmm5
	mulss	xmm9, xmm9
	addss	xmm1, xmm10
	addss	xmm10, xmm9
	addss	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addss	xmm1, xmm1
	addss	xmm10, xmm10
	addss	xmm5, xmm5
	subss	xmm0, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, xmm3
	subss	xmm3, xmm2
	movss	DWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, xmm4
	addss	xmm1, xmm1
	addss	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addss	xmm3, xmm3
	addss	xmm0, xmm0
	movss	DWORD PTR [rdi+4], xmm1
	movaps	xmm1, xmm6
	addss	xmm1, xmm8
	subss	xmm8, xmm6
	movss	DWORD PTR [rdi+12], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addss	xmm4, xmm4
	movss	DWORD PTR [rdi+8], xmm0
	movaps	xmm0, xmm11
	subss	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm0, xmm5
	addss	xmm8, xmm8
	addss	xmm1, xmm1
	movss	DWORD PTR [rdi+24], xmm4
	movss	DWORD PTR [rdi+32], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR [rdi+28], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movss	DWORD PTR [rdi+16], xmm0
	movss	DWORD PTR [rdi+20], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z ENDP ; glm::mat3_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z PROC ; glm::normalize<float,1>, COMDAT

; 380  : 	{

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movss	xmm1, DWORD PTR [rdx]
	mov	rdi, rdx
	movss	xmm0, DWORD PTR [rdx+4]
	mov	rbx, rcx
	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm3, DWORD PTR [rdx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comiss	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	DWORD PTR [rbx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rbx], rax
	mov	DWORD PTR [rbx+8], eax
	jmp	SHORT $LN28@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi]
	shufps	xmm1, xmm1, 0
	mulps	xmm1, xmm0
	movups	XMMWORD PTR [rbx], xmm1
$LN28@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z ENDP ; glm::normalize<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tvec3@M$00@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tvec3@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rcx+8]
	mulss	xmm2, DWORD PTR [rdx+8]
	addss	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addss	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMAEBU?$tvec3@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z PROC	; glm::cross<float,1>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 182  : 	}

	ret	0
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@0@Z ENDP	; glm::cross<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z PROC ; glm::sin<float,1,glm::tvec3>, COMDAT

; 45   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_sinf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_sinf

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z ENDP ; glm::sin<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z PROC ; glm::cos<float,1,glm::tvec3>, COMDAT

; 54   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_cosf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_cosf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_cosf

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@AEBU10@@Z ENDP ; glm::cos<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@M@Z PROC	; glm::operator*<float,1>, COMDAT

; 629  : 		return tvec3<T, P>(

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm2, DWORD PTR [rdx+8]
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@AEBU10@M@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 622  : 	{

$LN165:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movss	xmm1, DWORD PTR [rdx+16]
	mov	rbx, rdx
	movss	xmm0, DWORD PTR [rdx+32]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movss	xmm2, DWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subss	xmm3, DWORD PTR [rdx]
	subss	xmm4, DWORD PTR [rdx]
	subss	xmm2, xmm1
	mov	rdi, rcx
	subss	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addss	xmm1, DWORD PTR [rdx]
	subss	xmm2, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comiss	xmm2, xmm5
	seta	sil
	comiss	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm2, DWORD PTR __real@3e800000
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR __real@3f000000
	divss	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	addss	xmm1, DWORD PTR [rbx+8]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [rdi+8], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0
	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+4], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	subss	xmm0, DWORD PTR [rbx+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]

; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [rdi+4], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN162@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]
	movss	DWORD PTR [rdi], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	addss	xmm0, DWORD PTR [rbx+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	subss	xmm1, DWORD PTR [rbx+8]
	movss	DWORD PTR [rdi+12], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]
$LN163@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+4], xmm1
$LN162@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+8], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
m4$ = 104
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat4x4@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
q$ = 104
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z PROC ; glm::mat4_cast<float,2>, COMDAT

; 616  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
	mov	rax, rbx

; 618  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU?$tquat@M$01@0@@Z ENDP ; glm::mat4_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 144
q$ = 152
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z PROC ; glm::mat3_cast<float,2>, COMDAT

; 588  : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-40], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11

; 589  : 		tmat3x3<T, P> Result(T(1));

	movss	xmm11, DWORD PTR __real@3f800000
	movaps	xmm1, xmm11
	call	??0?$tmat3x3@M$01@glm@@QEAA@M@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>

; 590  : 		T qxx(q.x * q.x);
; 591  : 		T qyy(q.y * q.y);
; 592  : 		T qzz(q.z * q.z);

	movss	xmm0, DWORD PTR [rbx+8]

; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);
; 595  : 		T qyz(q.y * q.z);
; 596  : 		T qwx(q.w * q.x);
; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;
; 612  : 	}

	lea	r11, QWORD PTR [rsp+128]
	movss	xmm1, DWORD PTR [rbx+4]
	movaps	xmm5, xmm0
	movss	xmm2, DWORD PTR [rbx+12]
	movaps	xmm10, xmm1
	movss	xmm9, DWORD PTR [rbx]
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR [rbx]
	movaps	xmm8, xmm0
	mov	rax, rdi
	mulss	xmm10, xmm1
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx]
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [rbx]
	movaps	xmm4, xmm2
	mov	rbx, QWORD PTR [r11+16]
	mulss	xmm8, xmm1
	mulss	xmm4, xmm1
	mulss	xmm5, xmm0
	mulss	xmm2, xmm0
	movaps	xmm0, xmm11
	movaps	xmm1, xmm5
	mulss	xmm9, xmm9
	addss	xmm1, xmm10
	addss	xmm10, xmm9
	addss	xmm5, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	addss	xmm1, xmm1
	addss	xmm10, xmm10
	addss	xmm5, xmm5
	subss	xmm0, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, xmm3
	subss	xmm3, xmm2
	movss	DWORD PTR [rdi], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, xmm4
	addss	xmm1, xmm1
	addss	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	addss	xmm3, xmm3
	addss	xmm0, xmm0
	movss	DWORD PTR [rdi+4], xmm1
	movaps	xmm1, xmm6
	addss	xmm1, xmm8
	subss	xmm8, xmm6
	movss	DWORD PTR [rdi+12], xmm3
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addss	xmm4, xmm4
	movss	DWORD PTR [rdi+8], xmm0
	movaps	xmm0, xmm11
	subss	xmm11, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm0, xmm5
	addss	xmm8, xmm8
	addss	xmm1, xmm1
	movss	DWORD PTR [rdi+24], xmm4
	movss	DWORD PTR [rdi+32], xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	movss	DWORD PTR [rdi+28], xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	movss	DWORD PTR [rdi+16], xmm0
	movss	DWORD PTR [rdi+20], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z ENDP ; glm::mat3_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
q$ = 56
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z PROC ; glm::normalize<float,2>, COMDAT

; 380  : 	{

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 381  : 		T len = length(q);

	movss	xmm1, DWORD PTR [rdx]
	mov	rdi, rdx
	movss	xmm0, DWORD PTR [rdx+4]
	mov	rbx, rcx
	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm3, DWORD PTR [rdx+12]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm3, xmm2
	addss	xmm0, xmm3
	call	QWORD PTR __imp_sqrtf
	xorps	xmm1, xmm1

; 382  : 		if(len <= T(0)) // Problem

	comiss	xmm1, xmm0
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xor	eax, eax
	mov	DWORD PTR [rbx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rbx], rax
	mov	DWORD PTR [rbx+8], eax
	jmp	SHORT $LN28@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [rdi]
	shufps	xmm1, xmm1, 0
	mulps	xmm1, xmm0
	movups	XMMWORD PTR [rbx], xmm1
$LN28@normalize:
	mov	rax, rbx

; 386  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z ENDP ; glm::normalize<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tvec3@M$01@3@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tvec3@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call, COMDAT

; 58   : 			tvec3<T, P> tmp(x * y);

	movss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rcx+8]
	mulss	xmm2, DWORD PTR [rdx+8]
	addss	xmm0, xmm1

; 59   : 			return tmp.x + tmp.y + tmp.z;

	addss	xmm0, xmm2

; 60   : 		}

	ret	0
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMAEBU?$tvec3@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z PROC	; glm::cross<float,2>, COMDAT

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	movss	xmm1, DWORD PTR [r8+8]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [r8+4]
	mulss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rdx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3

; 182  : 	}

	ret	0
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@0@Z ENDP	; glm::cross<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z PROC ; glm::sin<float,2,glm::tvec3>, COMDAT

; 45   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_sinf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_sinf

; 47   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z ENDP ; glm::sin<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z PROC ; glm::cos<float,2,glm::tvec3>, COMDAT

; 54   : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	call	QWORD PTR __imp_cosf
	movaps	xmm7, xmm0
	movss	xmm0, DWORD PTR [rbx+4]
	call	QWORD PTR __imp_cosf
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx]
	call	QWORD PTR __imp_cosf

; 56   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	movss	DWORD PTR [rdi+4], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movss	DWORD PTR [rdi+8], xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi], xmm0
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@AEBU10@@Z ENDP ; glm::cos<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
v$ = 16
scalar$ = 24
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 629  : 		return tvec3<T, P>(

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	mulss	xmm1, DWORD PTR [rdx+4]
	mulss	xmm2, DWORD PTR [rdx+8]
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm2

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@AEBU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 622  : 	{

$LN165:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	movss	xmm1, DWORD PTR [rdx+16]
	mov	rbx, rdx
	movss	xmm0, DWORD PTR [rdx+32]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	movaps	xmm4, xmm1
	movss	xmm2, DWORD PTR [rdx]

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	movaps	xmm3, xmm0
	subss	xmm3, DWORD PTR [rdx]
	subss	xmm4, DWORD PTR [rdx]
	subss	xmm2, xmm1
	mov	rdi, rcx
	subss	xmm3, xmm1

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	addss	xmm1, DWORD PTR [rdx]
	subss	xmm2, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;
; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	movaps	xmm5, xmm1
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm2
$LN4@quat_cast:

; 633  : 			biggestIndex = 1;
; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	xor	esi, esi
	comiss	xmm2, xmm5
	seta	sil
	comiss	xmm4, xmm1
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm1, xmm4

; 638  : 			biggestIndex = 2;

	mov	esi, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm1, xmm3

; 643  : 			biggestIndex = 3;

	mov	esi, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm2, DWORD PTR __real@3e800000
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR __real@3f000000
	divss	xmm2, xmm3

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	test	esi, esi
	je	$LN7@quat_cast
	sub	esi, 1
	je	$LN8@quat_cast
	sub	esi, 1
	je	SHORT $LN9@quat_cast
	cmp	esi, 1
	jne	$LN11@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	addss	xmm1, DWORD PTR [rbx+8]

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [rdi+8], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0
	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+4], xmm0

; 675  : 			break;

	jmp	$LN11@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	subss	xmm0, DWORD PTR [rbx+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]

; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [rdi+4], xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+28]
	addss	xmm0, DWORD PTR [rbx+20]
	movss	DWORD PTR [rdi], xmm1

; 669  : 			break;

	jmp	SHORT $LN162@quat_cast
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 660  : 			Result.x = biggestVal;
; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm1, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]
	movss	DWORD PTR [rdi], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+12], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [rbx+24]
	addss	xmm0, DWORD PTR [rbx+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+28]

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm1, DWORD PTR [rbx+24]
	subss	xmm1, DWORD PTR [rbx+8]
	movss	DWORD PTR [rdi+12], xmm3
	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [rbx+4]
	subss	xmm0, DWORD PTR [rbx+12]
$LN163@quat_cast:

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mulss	xmm1, xmm2
	movss	DWORD PTR [rdi+4], xmm1
$LN162@quat_cast:

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	mulss	xmm0, xmm2
	movss	DWORD PTR [rdi+8], xmm0
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
__$ReturnUdt$ = 96
m4$ = 104
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 686  : 	{

$LN4:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	mov	rax, rbx

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat4x4@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$0A@@glm@@QEAA@HHHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHN@?$tvec4@N$0A@@glm@@QEAA@HHHN@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	cvtdq2pd xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	xmm1, QWORD PTR d$[rsp]
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHN@?$tvec4@N$0A@@glm@@QEAA@HHHN@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$00@glm@@QEAA@HHHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHN@?$tvec4@N$00@glm@@QEAA@HHHN@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	cvtdq2pd xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	xmm1, QWORD PTR d$[rsp]
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHN@?$tvec4@N$00@glm@@QEAA@HHHN@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$01@glm@@QEAA@HHHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHN@?$tvec4@N$01@glm@@QEAA@HHHN@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	cvtdq2pd xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	xmm1, QWORD PTR d$[rsp]
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHN@?$tvec4@N$01@glm@@QEAA@HHHN@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx+8], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx+8], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r9d
	movsd	QWORD PTR [rcx+8], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	ret	0
??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 221  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR [rdx+16]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+16], rax

; 278  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	ret	0
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 221  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR [rdx+16]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+16], rax

; 278  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	ret	0
??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 221  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+24], xmm1
	ret	0
??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR [rdx+16]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+16], rax

; 278  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	ret	0
??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2pd xmm1, xmm1
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,0>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 96   : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 98   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm0
	ret	0
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2pd xmm1, xmm1
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,1>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 96   : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 98   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm0
	ret	0
??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movd	xmm1, r8d
	movsd	QWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx+16], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movsd	QWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2pd xmm1, xmm1
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,2>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 96   : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR [rdx+8]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2pd xmm0, xmm0
	mov	QWORD PTR [rcx+8], rax

; 98   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm0
	ret	0
??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,double>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx], xmm0
	ret	0
??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><double,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 95   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 88   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z PROC		; glm::tvec2<double,1>::tvec2<double,1><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z PROC		; glm::tvec2<double,1>::tvec2<double,1><int,double>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx], xmm0
	ret	0
??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1><int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z PROC		; glm::tvec2<double,1>::tvec2<double,1><double,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1><double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 95   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 88   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z PROC		; glm::tvec2<double,2>::tvec2<double,2><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	movsd	QWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+8], xmm1
	ret	0
??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z PROC		; glm::tvec2<double,2>::tvec2<double,2><int,double>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx], xmm0
	ret	0
??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2><int,double>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z PROC		; glm::tvec2<double,2>::tvec2<double,2><double,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm0
	ret	0
??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2><double,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 95   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 88   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	cvtdq2ps xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm1, DWORD PTR d$[rsp]
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$00@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHM@?$tvec4@M$00@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	cvtdq2ps xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm1, DWORD PTR d$[rsp]
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHM@?$tvec4@M$00@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	cvtdq2ps xmm1, xmm1
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm1, DWORD PTR d$[rsp]
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx+4], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx+4], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>, COMDAT

; 200  : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 204  : 	{}

	mov	rax, rcx
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r9d
	movss	DWORD PTR [rcx+4], xmm0
	movd	xmm0, DWORD PTR d$[rsp]
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 221  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 275  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 276  : 		z(static_cast<T>(a.z)),

	mov	eax, DWORD PTR [rdx+8]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+8], eax

; 278  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	ret	0
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 221  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 275  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 276  : 		z(static_cast<T>(a.z)),

	mov	eax, DWORD PTR [rdx+8]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+8], eax

; 278  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	ret	0
??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>, COMDAT

; 204  : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movd	xmm1, DWORD PTR d$[rsp]
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>, COMDAT

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 221  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d
	movd	xmm1, r9d

; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 224  : 	{}

	mov	rax, rcx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	ret	0
??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>, COMDAT

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 275  : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 276  : 		z(static_cast<T>(a.z)),

	mov	eax, DWORD PTR [rdx+8]
	movd	xmm0, r8d

; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+8], eax

; 278  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	ret	0
??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2ps xmm1, xmm1
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 96   : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 98   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2ps xmm1, xmm1
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,1>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 96   : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 98   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movd	xmm1, r8d
	movss	DWORD PTR [rcx], xmm0
	movd	xmm0, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>, COMDAT

; 80   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r9d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>, COMDAT

; 77   : 		x(static_cast<T>(a)),

	movss	DWORD PTR [rcx], xmm1

; 80   : 	{}

	mov	rax, rcx
	movd	xmm1, r9d
	movd	xmm0, r8d
	cvtdq2ps xmm1, xmm1
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,2>, COMDAT

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 138  : 	{}

	mov	rax, rcx
	ret	0
??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>, COMDAT

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 96   : 		y(static_cast<T>(a.y)),

	mov	eax, DWORD PTR [rdx+4]
	movd	xmm0, r8d

; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	DWORD PTR [rcx+4], eax

; 98   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx], xmm0
	ret	0
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,1>::tvec2<float,1><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,1>::tvec2<float,1><int,float>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx], xmm0
	ret	0
??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1><int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,1>::tvec2<float,1><float,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1><float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,2>::tvec2<float,2><int,int>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	movd	xmm1, r8d
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,2>::tvec2<float,2><int,float>, COMDAT

; 66   : 	{}

	movd	xmm0, edx
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx], xmm0
	ret	0
??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2><int,float>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,2>::tvec2<float,2><float,int>, COMDAT

; 66   : 	{}

	movd	xmm0, r8d
	mov	rax, rcx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm0
	ret	0
??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2><float,int>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 96   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 89   : 	{}

	mov	rax, rcx
	ret	0
??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 112
m$ = 120
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rbx, rcx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [rbx+8], rcx
	mov	QWORD PTR [rbx+16], rcx
	mov	QWORD PTR [rbx+24], rax
	mov	QWORD PTR [rbx+32], rcx
	mov	QWORD PTR [rbx+40], rcx
	mov	QWORD PTR [rbx+48], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+56], rax
	call	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@AEBU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+48]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 32
m$ = 40
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 88   : 	{

$LN32:
	sub	rsp, 24
	xor	r8d, r8d
	movaps	XMMWORD PTR [rsp], xmm6
	mov	QWORD PTR [rcx], r8
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+56], rax

; 89   : 		*this = dualquat_cast(m);
; 90   : 	}

	mov	rax, rcx
	mov	QWORD PTR [rcx+32], r8
	mov	QWORD PTR [rcx+40], r8
	mov	QWORD PTR [rcx+48], r8
	movsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm6, QWORD PTR [rdx+56]
	movsd	xmm5, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm4, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm0, QWORD PTR [rdx+32]
	unpcklpd xmm5, xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx], xmm5
	unpcklpd xmm1, xmm6
	movaps	xmm6, XMMWORD PTR [rsp]
	unpcklpd xmm4, xmm2
	movups	XMMWORD PTR [rcx+16], xmm4
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 24
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm6, QWORD PTR [rdx]
	movsd	xmm4, QWORD PTR [rdx+24]
	movsd	xmm5, QWORD PTR [rdx+16]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	xmm2, xmm5
	movsd	xmm7, QWORD PTR [r8+16]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movsd	xmm8, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movsd	xmm9, QWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movsd	xmm10, QWORD PTR [r8+8]
	mulsd	xmm2, xmm10
	mulsd	xmm1, xmm8
	mulsd	xmm0, xmm9
	addsd	xmm2, xmm0
	movaps	xmm0, xmm9
	mulsd	xmm0, xmm5
	subsd	xmm2, xmm1
	movaps	xmm1, xmm7
	mulsd	xmm1, xmm6
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [rcx+32], xmm2
	movaps	xmm2, xmm4
	mulsd	xmm2, xmm10
	mulsd	xmm4, xmm7
	mulsd	xmm7, xmm5
	subsd	xmm2, xmm0
	movaps	xmm0, xmm10
	mulsd	xmm10, xmm8
	mulsd	xmm0, xmm6
	addsd	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulsd	xmm1, xmm9
	mulsd	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subsd	xmm1, xmm0
	mulsd	xmm2, xmm3
	addsd	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addsd	xmm1, xmm4
	movsd	QWORD PTR [rcx+40], xmm2
	addsd	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulsd	xmm1, xmm3
	mulsd	xmm10, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [rcx+48], xmm1
	movsd	QWORD PTR [rcx+56], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax
	mov	QWORD PTR [rcx+56], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+56], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@N$0A@@glm@@QEAA@XZ PROC			; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 34   : 		{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	mov	QWORD PTR [rcx+56], rdx
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@XZ ENDP			; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QEBAAEBU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$0A@@glm@@QEBAAEBU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@N$0A@@glm@@QEBAAEBU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QEAAAEAU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$0A@@glm@@QEAAAEAU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@N$0A@@glm@@QEAAAEAU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$0A@@glm@@SAHXZ PROC		; glm::tdualquat<double,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	mov	eax, 1065353216				; 3f800000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	DWORD PTR [rbx+8], ecx
	mov	QWORD PTR [rbx+12], rax
	mov	QWORD PTR [rbx+20], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rbx+28], eax
	call	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
$T3 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 88   : 	{

$LN37:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	xor	r8d, r8d
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], r8
	mov	DWORD PTR [rcx+8], r8d
	mov	DWORD PTR [rcx+28], eax
	mov	QWORD PTR [rcx+20], r8

; 89   : 		*this = dualquat_cast(m);

	movups	xmm0, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR $T2[rbp-64], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rbp-64]
	movups	XMMWORD PTR $T1[rbp-64], xmm0
	mov	rax, QWORD PTR $T1[rbp-64]
	mov	QWORD PTR $T3[rbp-64], rax
	mov	rax, QWORD PTR $T1[rbp-56]
	mov	QWORD PTR $T3[rbp-56], rax

; 90   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T3[rbp-64]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movss	xmm3, DWORD PTR __real@3f000000
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm4, DWORD PTR [rdx+12]
	movss	xmm5, DWORD PTR [rdx+8]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm2, xmm5
	movss	xmm6, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movss	xmm8, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movss	xmm9, DWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movss	xmm10, DWORD PTR [r8+4]
	mulss	xmm2, xmm10
	mulss	xmm1, xmm8
	mulss	xmm0, xmm9
	addss	xmm2, xmm0
	movaps	xmm0, xmm9
	mulss	xmm0, xmm5
	subss	xmm2, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm2, xmm3
	movss	DWORD PTR [rcx+16], xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm10
	mulss	xmm4, xmm7
	subss	xmm2, xmm0
	mulss	xmm7, xmm5
	movaps	xmm0, xmm10
	mulss	xmm10, xmm8
	mulss	xmm0, xmm6
	addss	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulss	xmm1, xmm9
	mulss	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subss	xmm1, xmm0
	mulss	xmm2, xmm3
	addss	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addss	xmm1, xmm4
	movss	DWORD PTR [rcx+20], xmm2
	addss	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulss	xmm1, xmm3
	mulss	xmm10, DWORD PTR __real@bf000000
	movss	DWORD PTR [rcx+24], xmm1
	movss	DWORD PTR [rcx+28], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movdqu	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], rdx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+28], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx+20], rdx
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	eax, eax
	mov	QWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 32   : 				, dual(tquat<T, P>(0, 0, 0, 0))

	mov	QWORD PTR [rcx+20], rax
	mov	DWORD PTR [rcx+28], eax

; 34   : 		{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QEBAAEBU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$0A@@glm@@QEBAAEBU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@M$0A@@glm@@QEBAAEBU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QEAAAEAU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$0A@@glm@@QEAAAEAU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@M$0A@@glm@@QEAAAEAU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$0A@@glm@@SAHXZ PROC		; glm::tdualquat<float,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 112
m$ = 120
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rbx, rcx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [rbx+8], rcx
	mov	QWORD PTR [rbx+16], rcx
	mov	QWORD PTR [rbx+24], rax
	mov	QWORD PTR [rbx+32], rcx
	mov	QWORD PTR [rbx+40], rcx
	mov	QWORD PTR [rbx+48], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+56], rax
	call	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@AEBU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+48]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 32
m$ = 40
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 88   : 	{

$LN32:
	sub	rsp, 24
	xor	r8d, r8d
	movaps	XMMWORD PTR [rsp], xmm6
	mov	QWORD PTR [rcx], r8
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+56], rax

; 89   : 		*this = dualquat_cast(m);
; 90   : 	}

	mov	rax, rcx
	mov	QWORD PTR [rcx+32], r8
	mov	QWORD PTR [rcx+40], r8
	mov	QWORD PTR [rcx+48], r8
	movsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm6, QWORD PTR [rdx+56]
	movsd	xmm5, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm4, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm0, QWORD PTR [rdx+32]
	unpcklpd xmm5, xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx], xmm5
	unpcklpd xmm1, xmm6
	movaps	xmm6, XMMWORD PTR [rsp]
	unpcklpd xmm4, xmm2
	movups	XMMWORD PTR [rcx+16], xmm4
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 24
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@0@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@0@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm6, QWORD PTR [rdx]
	movsd	xmm4, QWORD PTR [rdx+24]
	movsd	xmm5, QWORD PTR [rdx+16]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	xmm2, xmm5
	movsd	xmm7, QWORD PTR [r8+16]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movsd	xmm8, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movsd	xmm9, QWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movsd	xmm10, QWORD PTR [r8+8]
	mulsd	xmm2, xmm10
	mulsd	xmm1, xmm8
	mulsd	xmm0, xmm9
	addsd	xmm2, xmm0
	movaps	xmm0, xmm9
	mulsd	xmm0, xmm5
	subsd	xmm2, xmm1
	movaps	xmm1, xmm7
	mulsd	xmm1, xmm6
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [rcx+32], xmm2
	movaps	xmm2, xmm4
	mulsd	xmm2, xmm10
	mulsd	xmm4, xmm7
	mulsd	xmm7, xmm5
	subsd	xmm2, xmm0
	movaps	xmm0, xmm10
	mulsd	xmm10, xmm8
	mulsd	xmm0, xmm6
	addsd	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulsd	xmm1, xmm9
	mulsd	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subsd	xmm1, xmm0
	mulsd	xmm2, xmm3
	addsd	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addsd	xmm1, xmm4
	movsd	QWORD PTR [rcx+40], xmm2
	addsd	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulsd	xmm1, xmm3
	mulsd	xmm10, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [rcx+48], xmm1
	movsd	QWORD PTR [rcx+56], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@AEBU?$tvec3@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax
	mov	QWORD PTR [rcx+56], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@AEBU?$tquat@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+56], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@N$00@glm@@QEAA@XZ PROC			; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 34   : 		{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	mov	QWORD PTR [rcx+56], rdx
	ret	0
??0?$tdualquat@N$00@glm@@QEAA@XZ ENDP			; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QEBAAEBU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$00@glm@@QEBAAEBU?$tquat@N$00@1@H@Z PROC ; glm::tdualquat<double,1>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@N$00@glm@@QEBAAEBU?$tquat@N$00@1@H@Z ENDP ; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QEAAAEAU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$00@glm@@QEAAAEAU?$tquat@N$00@1@H@Z PROC ; glm::tdualquat<double,1>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@N$00@glm@@QEAAAEAU?$tquat@N$00@1@H@Z ENDP ; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$00@glm@@SAHXZ PROC		; glm::tdualquat<double,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$00@glm@@SAHXZ ENDP		; glm::tdualquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	mov	eax, 1065353216				; 3f800000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	DWORD PTR [rbx+8], ecx
	mov	QWORD PTR [rbx+12], rax
	mov	QWORD PTR [rbx+20], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rbx+28], eax
	call	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@AEBU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
$T3 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 88   : 	{

$LN37:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	xor	r8d, r8d
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], r8
	mov	DWORD PTR [rcx+8], r8d
	mov	DWORD PTR [rcx+28], eax
	mov	QWORD PTR [rcx+20], r8

; 89   : 		*this = dualquat_cast(m);

	movups	xmm0, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR $T2[rbp-64], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rbp-64]
	movups	XMMWORD PTR $T1[rbp-64], xmm0
	mov	rax, QWORD PTR $T1[rbp-64]
	mov	QWORD PTR $T3[rbp-64], rax
	mov	rax, QWORD PTR $T1[rbp-56]
	mov	QWORD PTR $T3[rbp-56], rax

; 90   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T3[rbp-64]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@0@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@0@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movss	xmm3, DWORD PTR __real@3f000000
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm4, DWORD PTR [rdx+12]
	movss	xmm5, DWORD PTR [rdx+8]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm2, xmm5
	movss	xmm6, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movss	xmm8, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movss	xmm9, DWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movss	xmm10, DWORD PTR [r8+4]
	mulss	xmm2, xmm10
	mulss	xmm1, xmm8
	mulss	xmm0, xmm9
	addss	xmm2, xmm0
	movaps	xmm0, xmm9
	mulss	xmm0, xmm5
	subss	xmm2, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm2, xmm3
	movss	DWORD PTR [rcx+16], xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm10
	mulss	xmm4, xmm7
	subss	xmm2, xmm0
	mulss	xmm7, xmm5
	movaps	xmm0, xmm10
	mulss	xmm10, xmm8
	mulss	xmm0, xmm6
	addss	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulss	xmm1, xmm9
	mulss	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subss	xmm1, xmm0
	mulss	xmm2, xmm3
	addss	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addss	xmm1, xmm4
	movss	DWORD PTR [rcx+20], xmm2
	addss	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulss	xmm1, xmm3
	mulss	xmm10, DWORD PTR __real@bf000000
	movss	DWORD PTR [rcx+24], xmm1
	movss	DWORD PTR [rcx+28], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@AEBU?$tvec3@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movdqu	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@AEBU?$tquat@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], rdx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+28], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx+20], rdx
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@M$00@glm@@QEAA@XZ PROC			; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	eax, eax
	mov	QWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 32   : 				, dual(tquat<T, P>(0, 0, 0, 0))

	mov	QWORD PTR [rcx+20], rax
	mov	DWORD PTR [rcx+28], eax

; 34   : 		{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$00@glm@@QEAA@XZ ENDP			; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QEBAAEBU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$00@glm@@QEBAAEBU?$tquat@M$00@1@H@Z PROC ; glm::tdualquat<float,1>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@M$00@glm@@QEBAAEBU?$tquat@M$00@1@H@Z ENDP ; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QEAAAEAU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$00@glm@@QEAAAEAU?$tquat@M$00@1@H@Z PROC ; glm::tdualquat<float,1>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@M$00@glm@@QEAAAEAU?$tquat@M$00@1@H@Z ENDP ; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$00@glm@@SAHXZ PROC		; glm::tdualquat<float,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$00@glm@@SAHXZ ENDP		; glm::tdualquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 112
m$ = 120
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rbx, rcx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [rbx+8], rcx
	mov	QWORD PTR [rbx+16], rcx
	mov	QWORD PTR [rbx+24], rax
	mov	QWORD PTR [rbx+32], rcx
	mov	QWORD PTR [rbx+40], rcx
	mov	QWORD PTR [rbx+48], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+56], rax
	call	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@AEBU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+48]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 32
m$ = 40
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 88   : 	{

$LN32:
	sub	rsp, 24
	xor	r8d, r8d
	movaps	XMMWORD PTR [rsp], xmm6
	mov	QWORD PTR [rcx], r8
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+56], rax

; 89   : 		*this = dualquat_cast(m);
; 90   : 	}

	mov	rax, rcx
	mov	QWORD PTR [rcx+32], r8
	mov	QWORD PTR [rcx+40], r8
	mov	QWORD PTR [rcx+48], r8
	movsd	xmm1, QWORD PTR [rdx+8]
	movsd	xmm6, QWORD PTR [rdx+56]
	movsd	xmm5, QWORD PTR [rdx]
	movsd	xmm2, QWORD PTR [rdx+24]
	movsd	xmm4, QWORD PTR [rdx+16]
	movsd	xmm3, QWORD PTR [rdx+40]
	movsd	xmm0, QWORD PTR [rdx+32]
	unpcklpd xmm5, xmm1
	movsd	xmm1, QWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx], xmm5
	unpcklpd xmm1, xmm6
	movaps	xmm6, XMMWORD PTR [rsp]
	unpcklpd xmm4, xmm2
	movups	XMMWORD PTR [rcx+16], xmm4
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 24
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@0@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@0@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm6, QWORD PTR [rdx]
	movsd	xmm4, QWORD PTR [rdx+24]
	movsd	xmm5, QWORD PTR [rdx+16]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	xmm2, xmm5
	movsd	xmm7, QWORD PTR [r8+16]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movsd	xmm8, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movsd	xmm9, QWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movsd	xmm10, QWORD PTR [r8+8]
	mulsd	xmm2, xmm10
	mulsd	xmm1, xmm8
	mulsd	xmm0, xmm9
	addsd	xmm2, xmm0
	movaps	xmm0, xmm9
	mulsd	xmm0, xmm5
	subsd	xmm2, xmm1
	movaps	xmm1, xmm7
	mulsd	xmm1, xmm6
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [rcx+32], xmm2
	movaps	xmm2, xmm4
	mulsd	xmm2, xmm10
	mulsd	xmm4, xmm7
	mulsd	xmm7, xmm5
	subsd	xmm2, xmm0
	movaps	xmm0, xmm10
	mulsd	xmm10, xmm8
	mulsd	xmm0, xmm6
	addsd	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulsd	xmm1, xmm9
	mulsd	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subsd	xmm1, xmm0
	mulsd	xmm2, xmm3
	addsd	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addsd	xmm1, xmm4
	movsd	QWORD PTR [rcx+40], xmm2
	addsd	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulsd	xmm1, xmm3
	mulsd	xmm10, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [rcx+48], xmm1
	movsd	QWORD PTR [rcx+56], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@AEBU?$tvec3@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax
	mov	QWORD PTR [rcx+56], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@AEBU?$tquat@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+56], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@N$01@glm@@QEAA@XZ PROC			; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	edx, edx
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 34   : 		{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+48], rdx
	mov	QWORD PTR [rcx+56], rdx
	ret	0
??0?$tdualquat@N$01@glm@@QEAA@XZ ENDP			; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QEBAAEBU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$01@glm@@QEBAAEBU?$tquat@N$01@1@H@Z PROC ; glm::tdualquat<double,2>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@N$01@glm@@QEBAAEBU?$tquat@N$01@1@H@Z ENDP ; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QEAAAEAU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@N$01@glm@@QEAAAEAU?$tquat@N$01@1@H@Z PROC ; glm::tdualquat<double,2>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@N$01@glm@@QEAAAEAU?$tquat@N$01@1@H@Z ENDP ; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$01@glm@@SAHXZ PROC		; glm::tdualquat<double,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$01@glm@@SAHXZ ENDP		; glm::tdualquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 94   : 	{

$LN8:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	mov	eax, 1065353216				; 3f800000H
	xor	ecx, ecx
	mov	QWORD PTR [rbx], rcx
	mov	DWORD PTR [rbx+8], ecx
	mov	QWORD PTR [rbx+12], rax
	mov	QWORD PTR [rbx+20], rcx

; 95   : 		*this = dualquat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rbx+28], eax
	call	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@AEBU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 96   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
$T3 = 32
this$ = 80
m$ = 88
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 88   : 	{

$LN37:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	xor	r8d, r8d
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], r8
	mov	DWORD PTR [rcx+8], r8d
	mov	DWORD PTR [rcx+28], eax
	mov	QWORD PTR [rcx+20], r8

; 89   : 		*this = dualquat_cast(m);

	movups	xmm0, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR $T2[rbp-64], xmm0
	movups	xmm0, XMMWORD PTR [rdx]
	movups	xmm1, XMMWORD PTR $T2[rbp-64]
	movups	XMMWORD PTR $T1[rbp-64], xmm0
	mov	rax, QWORD PTR $T1[rbp-64]
	mov	QWORD PTR $T3[rbp-64], rax
	mov	rax, QWORD PTR $T1[rbp-56]
	mov	QWORD PTR $T3[rbp-56], rax

; 90   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T3[rbp-64]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
d$ = 24
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@0@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 74   : 		: real(r), dual(d)

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 	{}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@0@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 70   : 	{}

$LN6:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	movups	xmm0, XMMWORD PTR [rdx]
	movss	xmm3, DWORD PTR __real@3f000000
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm4, DWORD PTR [rdx+12]
	movss	xmm5, DWORD PTR [rdx+8]
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm2, xmm5
	movss	xmm6, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	xmm1, xmm7
	movss	xmm8, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-72], xmm9

; 70   : 	{}

	mov	rax, rcx
	movss	xmm9, DWORD PTR [r8]
	movaps	XMMWORD PTR [rsp], xmm10
	movss	xmm10, DWORD PTR [r8+4]
	mulss	xmm2, xmm10
	mulss	xmm1, xmm8
	mulss	xmm0, xmm9
	addss	xmm2, xmm0
	movaps	xmm0, xmm9
	mulss	xmm0, xmm5
	subss	xmm2, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm2, xmm3
	movss	DWORD PTR [rcx+16], xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm10
	mulss	xmm4, xmm7
	subss	xmm2, xmm0
	mulss	xmm7, xmm5
	movaps	xmm0, xmm10
	mulss	xmm10, xmm8
	mulss	xmm0, xmm6
	addss	xmm2, xmm1
	movaps	xmm1, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mulss	xmm1, xmm9
	mulss	xmm9, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+64]
	subss	xmm1, xmm0
	mulss	xmm2, xmm3
	addss	xmm10, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+16]
	addss	xmm1, xmm4
	movss	DWORD PTR [rcx+20], xmm2
	addss	xmm10, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mulss	xmm1, xmm3
	mulss	xmm10, DWORD PTR __real@bf000000
	movss	DWORD PTR [rcx+24], xmm1
	movss	DWORD PTR [rcx+28], xmm10
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@AEBU?$tvec3@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	movups	xmm0, XMMWORD PTR [rdx]
	xor	eax, eax
	movdqu	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 61   : 	{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@AEBU?$tquat@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tdualquat@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 56   : 	{}

	xor	edx, edx
	mov	eax, 1065353216				; 3f800000H
	mov	QWORD PTR [rcx+12], rax
	mov	QWORD PTR [rcx], rdx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+28], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx+20], rdx
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tdualquat@M$01@glm@@QEAA@XZ PROC			; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT

; 31   : 				: real(tquat<T, P>())

	xor	eax, eax
	mov	QWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 32   : 				, dual(tquat<T, P>(0, 0, 0, 0))

	mov	QWORD PTR [rcx+20], rax
	mov	DWORD PTR [rcx+28], eax

; 34   : 		{}

	mov	rax, rcx
	ret	0
??0?$tdualquat@M$01@glm@@QEAA@XZ ENDP			; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QEBAAEBU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$01@glm@@QEBAAEBU?$tquat@M$01@1@H@Z PROC ; glm::tdualquat<float,2>::operator[], COMDAT

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 23   : 	}

	ret	0
??A?$tdualquat@M$01@glm@@QEBAAEBU?$tquat@M$01@1@H@Z ENDP ; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QEAAAEAU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tdualquat@M$01@glm@@QEAAAEAU?$tquat@M$01@1@H@Z PROC ; glm::tdualquat<float,2>::operator[], COMDAT

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 16   : 	}

	ret	0
??A?$tdualquat@M$01@glm@@QEAAAEAU?$tquat@M$01@1@H@Z ENDP ; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$01@glm@@SAHXZ PROC		; glm::tdualquat<float,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$01@glm@@SAHXZ ENDP		; glm::tdualquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
__$ArrayPad$ = 144
this$ = 176
m$ = 184
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 179  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 165  : 	{

$LN24:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movsd	xmm6, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movsd	xmm7, QWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movsd	xmm8, QWORD PTR __real@3fe0000000000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulsd	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	cos
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	cos
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm7, QWORD PTR [rbx]
	movaps	xmm10, xmm0
	movsd	xmm0, QWORD PTR [rbx+16]
	movsd	xmm6, QWORD PTR [rbx+8]
	mulsd	xmm0, xmm8
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	sin
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	sin
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm5, xmm6
	mulsd	xmm5, xmm0
	movaps	xmm3, xmm0
	mov	rax, rdi
	mulsd	xmm3, xmm9
	movaps	xmm4, xmm10
	mulsd	xmm4, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm2, xmm5
	mulsd	xmm6, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm11
	movaps	xmm0, xmm6
	mulsd	xmm2, xmm8
	mulsd	xmm6, xmm11
	mulsd	xmm0, xmm8
	addsd	xmm2, xmm1
	mulsd	xmm4, xmm8
	movaps	xmm1, xmm3
	mulsd	xmm5, xmm11
	mulsd	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	mulsd	xmm3, xmm8
	subsd	xmm4, xmm5
	movaps	xmm8, XMMWORD PTR [r11-48]
	subsd	xmm1, xmm0
	movsd	QWORD PTR [rdi+24], xmm2
	addsd	xmm3, xmm6
	movsd	QWORD PTR [rdi+16], xmm4
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movsd	QWORD PTR [rdi], xmm1
	movsd	QWORD PTR [rdi+8], xmm3
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 128
u$ = 136
v$ = 144
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 112				; 00000070H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movsd	xmm4, QWORD PTR [rdx]
	mov	rbx, rcx
	movsd	xmm5, QWORD PTR [r8+8]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-56]
	movsd	xmm3, QWORD PTR [r8+16]
	movaps	xmm1, xmm4
	mulsd	xmm3, QWORD PTR [rdx+8]
	movaps	xmm0, xmm5
	movsd	xmm2, QWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movsd	xmm6, QWORD PTR [rdx+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5
	mulsd	xmm5, QWORD PTR [rdx+8]
	subsd	xmm3, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [r8+16]
	movaps	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rax-88], xmm3
	addsd	xmm4, xmm5
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	lea	rdx, QWORD PTR [rax-88]
	addsd	xmm4, xmm6
	movsd	QWORD PTR [rax-80], xmm2
	subsd	xmm1, xmm0
	addsd	xmm4, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rax-72], xmm1
	movsd	QWORD PTR [rax-64], xmm4
	call	??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@AEBU10@@Z ; glm::normalize<double,0>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat4x4@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@N$0A@@glm@@QEAA?AU?$tmat3x3@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z PROC		; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rcx+16], r8
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z ENDP		; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBNAEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@N$0A@@glm@@QEAA@AEBNAEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBNAEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@N$0A@@glm@@QEAA@XZ PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 82   : 	}

	ret	0
??A?$tquat@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 75   : 	}

	ret	0
??A?$tquat@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$0A@@glm@@SAHXZ PROC			; glm::tquat<double,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$0A@@glm@@SAHXZ ENDP			; glm::tquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ArrayPad$ = 88
this$ = 112
m$ = 120
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	movups	xmm0, XMMWORD PTR [rax]

; 179  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 165  : 	{

$LN42:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movss	xmm6, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR __real@3f000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulss	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_cosf
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_cosf
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_cosf

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm7, DWORD PTR [rbx]
	movaps	xmm10, xmm0
	movss	xmm0, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+4]
	mulss	xmm0, xmm8
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_sinf
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm4, xmm10
	movaps	xmm5, xmm0
	mulss	xmm4, xmm9
	mov	rax, rdi
	movaps	xmm3, xmm0
	mulss	xmm10, xmm6
	movaps	xmm1, xmm4
	mulss	xmm3, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm0, xmm10
	mulss	xmm1, xmm11
	mulss	xmm5, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+112]
	mulss	xmm10, xmm11
	movaps	xmm2, xmm5
	mulss	xmm0, xmm8
	mulss	xmm2, xmm8
	mulss	xmm4, xmm8
	addss	xmm2, xmm1
	mulss	xmm5, xmm11
	movaps	xmm1, xmm3
	mulss	xmm3, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	subss	xmm4, xmm5
	mulss	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	addss	xmm3, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm1, xmm0
	movss	DWORD PTR [rdi+12], xmm2
	movss	DWORD PTR [rdi+8], xmm4
	movss	DWORD PTR [rdi+4], xmm3
	movss	DWORD PTR [rdi], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 96
u$ = 104
v$ = 112
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 80					; 00000050H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movss	xmm4, DWORD PTR [rdx]
	mov	rbx, rcx
	movss	xmm5, DWORD PTR [r8+4]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-40]
	movss	xmm3, DWORD PTR [r8+8]
	movaps	xmm1, xmm4
	mulss	xmm3, DWORD PTR [rdx+4]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR [rdx+8]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	mulss	xmm5, DWORD PTR [rdx+4]
	subss	xmm3, xmm0
	movaps	xmm0, xmm4
	mulss	xmm2, xmm6
	mulss	xmm4, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm6, DWORD PTR [r8+8]
	addss	xmm4, xmm5
	subss	xmm2, xmm0
	movss	DWORD PTR [rax-56], xmm3
	movss	xmm0, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [rdx+4]
	lea	rdx, QWORD PTR [rax-56]
	addss	xmm4, xmm6
	movss	DWORD PTR [rax-52], xmm2
	subss	xmm1, xmm0
	addss	xmm4, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax-48], xmm1
	movss	DWORD PTR [rax-44], xmm4
	call	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
this$ = 96
__$ReturnUdt$ = 104
??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat4x4@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@M$0A@@glm@@QEAA?AU?$tmat3x3@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r9]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	DWORD PTR [rcx+8], r8d
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	DWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 82   : 	}

	ret	0
??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 75   : 	}

	ret	0
??A?$tquat@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$0A@@glm@@SAHXZ PROC			; glm::tquat<float,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$0A@@glm@@SAHXZ ENDP			; glm::tquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
__$ArrayPad$ = 144
this$ = 176
m$ = 184
??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 179  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 165  : 	{

$LN24:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movsd	xmm6, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movsd	xmm7, QWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movsd	xmm8, QWORD PTR __real@3fe0000000000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulsd	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	cos
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	cos
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm7, QWORD PTR [rbx]
	movaps	xmm10, xmm0
	movsd	xmm0, QWORD PTR [rbx+16]
	movsd	xmm6, QWORD PTR [rbx+8]
	mulsd	xmm0, xmm8
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	sin
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	sin
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm5, xmm6
	mulsd	xmm5, xmm0
	movaps	xmm3, xmm0
	mov	rax, rdi
	mulsd	xmm3, xmm9
	movaps	xmm4, xmm10
	mulsd	xmm4, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm2, xmm5
	mulsd	xmm6, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm11
	movaps	xmm0, xmm6
	mulsd	xmm2, xmm8
	mulsd	xmm6, xmm11
	mulsd	xmm0, xmm8
	addsd	xmm2, xmm1
	mulsd	xmm4, xmm8
	movaps	xmm1, xmm3
	mulsd	xmm5, xmm11
	mulsd	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	mulsd	xmm3, xmm8
	subsd	xmm4, xmm5
	movaps	xmm8, XMMWORD PTR [r11-48]
	subsd	xmm1, xmm0
	movsd	QWORD PTR [rdi+24], xmm2
	addsd	xmm3, xmm6
	movsd	QWORD PTR [rdi+16], xmm4
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movsd	QWORD PTR [rdi], xmm1
	movsd	QWORD PTR [rdi+8], xmm3
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
this$ = 128
u$ = 136
v$ = 144
??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 112				; 00000070H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movsd	xmm4, QWORD PTR [rdx]
	mov	rbx, rcx
	movsd	xmm5, QWORD PTR [r8+8]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-56]
	movsd	xmm3, QWORD PTR [r8+16]
	movaps	xmm1, xmm4
	mulsd	xmm3, QWORD PTR [rdx+8]
	movaps	xmm0, xmm5
	movsd	xmm2, QWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movsd	xmm6, QWORD PTR [rdx+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5
	mulsd	xmm5, QWORD PTR [rdx+8]
	subsd	xmm3, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [r8+16]
	movaps	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rax-88], xmm3
	addsd	xmm4, xmm5
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	lea	rdx, QWORD PTR [rax-88]
	addsd	xmm4, xmm6
	movsd	QWORD PTR [rax-80], xmm2
	subsd	xmm1, xmm0
	addsd	xmm4, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rax-72], xmm1
	movsd	QWORD PTR [rax-64], xmm4
	call	??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@AEBU10@@Z ; glm::normalize<double,1>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??B?$tquat@N$00@glm@@QEAA?AU?$tmat4x4@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@AEBU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@N$00@glm@@QEAA?AU?$tmat3x3@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@N$00@glm@@QEAA@AEBN000@Z PROC		; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rcx+16], r8
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBN000@Z ENDP		; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@AEBNAEBU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@N$00@glm@@QEAA@AEBNAEBU?$tvec3@N$00@1@@Z PROC ; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$00@glm@@QEAA@AEBNAEBU?$tvec3@N$00@1@@Z ENDP ; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@N$00@glm@@QEAA@XZ PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$00@glm@@QEAA@XZ ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$00@glm@@QEBAAEBNH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 82   : 	}

	ret	0
??A?$tquat@N$00@glm@@QEBAAEBNH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$00@glm@@QEAAAEANH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 75   : 	}

	ret	0
??A?$tquat@N$00@glm@@QEAAAEANH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$00@glm@@SAHXZ PROC			; glm::tquat<double,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$00@glm@@SAHXZ ENDP			; glm::tquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ArrayPad$ = 88
this$ = 112
m$ = 120
??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	movups	xmm0, XMMWORD PTR [rax]

; 179  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 165  : 	{

$LN42:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movss	xmm6, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR __real@3f000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulss	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_cosf
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_cosf
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_cosf

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm7, DWORD PTR [rbx]
	movaps	xmm10, xmm0
	movss	xmm0, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+4]
	mulss	xmm0, xmm8
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_sinf
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm4, xmm10
	movaps	xmm5, xmm0
	mulss	xmm4, xmm9
	mov	rax, rdi
	movaps	xmm3, xmm0
	mulss	xmm10, xmm6
	movaps	xmm1, xmm4
	mulss	xmm3, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm0, xmm10
	mulss	xmm1, xmm11
	mulss	xmm5, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+112]
	mulss	xmm10, xmm11
	movaps	xmm2, xmm5
	mulss	xmm0, xmm8
	mulss	xmm2, xmm8
	mulss	xmm4, xmm8
	addss	xmm2, xmm1
	mulss	xmm5, xmm11
	movaps	xmm1, xmm3
	mulss	xmm3, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	subss	xmm4, xmm5
	mulss	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	addss	xmm3, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm1, xmm0
	movss	DWORD PTR [rdi+12], xmm2
	movss	DWORD PTR [rdi+8], xmm4
	movss	DWORD PTR [rdi+4], xmm3
	movss	DWORD PTR [rdi], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
this$ = 96
u$ = 104
v$ = 112
??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 80					; 00000050H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movss	xmm4, DWORD PTR [rdx]
	mov	rbx, rcx
	movss	xmm5, DWORD PTR [r8+4]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-40]
	movss	xmm3, DWORD PTR [r8+8]
	movaps	xmm1, xmm4
	mulss	xmm3, DWORD PTR [rdx+4]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR [rdx+8]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	mulss	xmm5, DWORD PTR [rdx+4]
	subss	xmm3, xmm0
	movaps	xmm0, xmm4
	mulss	xmm2, xmm6
	mulss	xmm4, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm6, DWORD PTR [r8+8]
	addss	xmm4, xmm5
	subss	xmm2, xmm0
	movss	DWORD PTR [rax-56], xmm3
	movss	xmm0, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [rdx+4]
	lea	rdx, QWORD PTR [rax-56]
	addss	xmm4, xmm6
	movss	DWORD PTR [rax-52], xmm2
	subss	xmm1, xmm0
	addss	xmm4, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax-48], xmm1
	movss	DWORD PTR [rax-44], xmm4
	call	??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@AEBU10@@Z ; glm::normalize<float,1>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
this$ = 96
__$ReturnUdt$ = 104
??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??B?$tquat@M$00@glm@@QEAA?AU?$tmat4x4@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@AEBU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@M$00@glm@@QEAA?AU?$tmat3x3@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@M$00@glm@@QEAA@AEBM000@Z PROC		; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r9]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	DWORD PTR [rcx+8], r8d
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBM000@Z ENDP		; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@AEBMAEBU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@M$00@glm@@QEAA@AEBMAEBU?$tvec3@M$00@1@@Z PROC ; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$00@glm@@QEAA@AEBMAEBU?$tvec3@M$00@1@@Z ENDP ; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@M$00@glm@@QEAA@XZ PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	DWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$00@glm@@QEAA@XZ ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 82   : 	}

	ret	0
??A?$tquat@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 75   : 	}

	ret	0
??A?$tquat@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$00@glm@@SAHXZ PROC			; glm::tquat<float,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$00@glm@@SAHXZ ENDP			; glm::tquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
__$ArrayPad$ = 144
this$ = 176
m$ = 184
??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 179  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 165  : 	{

$LN24:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm0, QWORD PTR [rdx+16]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movsd	xmm6, QWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movsd	xmm7, QWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movsd	xmm8, QWORD PTR __real@3fe0000000000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulsd	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	cos
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	cos
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm7, QWORD PTR [rbx]
	movaps	xmm10, xmm0
	movsd	xmm0, QWORD PTR [rbx+16]
	movsd	xmm6, QWORD PTR [rbx+8]
	mulsd	xmm0, xmm8
	mulsd	xmm7, xmm8
	mulsd	xmm6, xmm8
	call	sin
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	sin
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm5, xmm6
	mulsd	xmm5, xmm0
	movaps	xmm3, xmm0
	mov	rax, rdi
	mulsd	xmm3, xmm9
	movaps	xmm4, xmm10
	mulsd	xmm4, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm2, xmm5
	mulsd	xmm6, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm11
	movaps	xmm0, xmm6
	mulsd	xmm2, xmm8
	mulsd	xmm6, xmm11
	mulsd	xmm0, xmm8
	addsd	xmm2, xmm1
	mulsd	xmm4, xmm8
	movaps	xmm1, xmm3
	mulsd	xmm5, xmm11
	mulsd	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	mulsd	xmm3, xmm8
	subsd	xmm4, xmm5
	movaps	xmm8, XMMWORD PTR [r11-48]
	subsd	xmm1, xmm0
	movsd	QWORD PTR [rdi+24], xmm2
	addsd	xmm3, xmm6
	movsd	QWORD PTR [rdi+16], xmm4
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movsd	QWORD PTR [rdi], xmm1
	movsd	QWORD PTR [rdi+8], xmm3
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
this$ = 128
u$ = 136
v$ = 144
??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 112				; 00000070H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movsd	xmm4, QWORD PTR [rdx]
	mov	rbx, rcx
	movsd	xmm5, QWORD PTR [r8+8]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-56]
	movsd	xmm3, QWORD PTR [r8+16]
	movaps	xmm1, xmm4
	mulsd	xmm3, QWORD PTR [rdx+8]
	movaps	xmm0, xmm5
	movsd	xmm2, QWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movsd	xmm6, QWORD PTR [rdx+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5
	mulsd	xmm5, QWORD PTR [rdx+8]
	subsd	xmm3, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [r8+16]
	movaps	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [r8+16]
	movsd	QWORD PTR [rax-88], xmm3
	addsd	xmm4, xmm5
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [r8]
	mulsd	xmm0, QWORD PTR [rdx+8]
	lea	rdx, QWORD PTR [rax-88]
	addsd	xmm4, xmm6
	movsd	QWORD PTR [rax-80], xmm2
	subsd	xmm1, xmm0
	addsd	xmm4, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rax-72], xmm1
	movsd	QWORD PTR [rax-64], xmm4
	call	??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@AEBU10@@Z ; glm::normalize<double,2>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
??B?$tquat@N$01@glm@@QEAA?AU?$tmat4x4@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@AEBU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@N$01@glm@@QEAA?AU?$tmat3x3@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@N$01@glm@@QEAA@AEBN000@Z PROC		; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rcx+16], r8
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBN000@Z ENDP		; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@AEBNAEBU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@N$01@glm@@QEAA@AEBNAEBU?$tvec3@N$01@1@@Z PROC ; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+24], rax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$01@glm@@QEAA@AEBNAEBU?$tvec3@N$01@1@@Z ENDP ; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@N$01@glm@@QEAA@XZ PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rcx+24], rax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@N$01@glm@@QEAA@XZ ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$01@glm@@QEBAAEBNH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 82   : 	}

	ret	0
??A?$tquat@N$01@glm@@QEBAAEBNH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@N$01@glm@@QEAAAEANH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 75   : 	}

	ret	0
??A?$tquat@N$01@glm@@QEAAAEANH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$01@glm@@SAHXZ PROC			; glm::tquat<double,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$01@glm@@SAHXZ ENDP			; glm::tquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ArrayPad$ = 88
this$ = 112
m$ = 120
??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 183  : 	{

$LN6:
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rcx

; 184  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	movups	xmm0, XMMWORD PTR $T1[rsp]

; 185  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 177  : 	{

$LN4:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 178  : 		*this = quat_cast(m);

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	movups	xmm0, XMMWORD PTR [rax]

; 179  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 144
eulerAngle$ = 152
??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 165  : 	{

$LN42:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR [rdx+8]
	mov	rbx, rdx
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	movss	xmm6, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR __real@3f000000
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	mulss	xmm0, xmm8
	movaps	XMMWORD PTR [rax-104], xmm11
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_cosf
	movaps	xmm11, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_cosf
	movaps	xmm9, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_cosf

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm7, DWORD PTR [rbx]
	movaps	xmm10, xmm0
	movss	xmm0, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+4]
	mulss	xmm0, xmm8
	mulss	xmm7, xmm8
	mulss	xmm6, xmm8
	call	QWORD PTR __imp_sinf
	movaps	xmm8, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_sinf
	movaps	xmm6, xmm0
	movaps	xmm0, xmm7
	call	QWORD PTR __imp_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm4, xmm10
	movaps	xmm5, xmm0
	mulss	xmm4, xmm9
	mov	rax, rdi
	movaps	xmm3, xmm0
	mulss	xmm10, xmm6
	movaps	xmm1, xmm4
	mulss	xmm3, xmm9
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm0, xmm10
	mulss	xmm1, xmm11
	mulss	xmm5, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+112]
	mulss	xmm10, xmm11
	movaps	xmm2, xmm5
	mulss	xmm0, xmm8
	mulss	xmm2, xmm8
	mulss	xmm4, xmm8
	addss	xmm2, xmm1
	mulss	xmm5, xmm11
	movaps	xmm1, xmm3
	mulss	xmm3, xmm8
	movaps	xmm8, XMMWORD PTR [r11-48]
	subss	xmm4, xmm5
	mulss	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	addss	xmm3, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	subss	xmm1, xmm0
	movss	DWORD PTR [rdi+12], xmm2
	movss	DWORD PTR [rdi+8], xmm4
	movss	DWORD PTR [rdi+4], xmm3
	movss	DWORD PTR [rdi], xmm1
	mov	rsp, r11
	pop	rdi
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
this$ = 96
u$ = 104
v$ = 112
??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 155  : 	{

$LN18:
	mov	rax, rsp
	push	rbx
	sub	rsp, 80					; 00000050H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	movss	xmm4, DWORD PTR [rdx]
	mov	rbx, rcx
	movss	xmm5, DWORD PTR [r8+4]

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);
; 159  : 
; 160  : 		*this = normalize(q);

	lea	rcx, QWORD PTR [rax-40]
	movss	xmm3, DWORD PTR [r8+8]
	movaps	xmm1, xmm4
	mulss	xmm3, DWORD PTR [rdx+4]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [r8]
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR [rdx+8]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	mulss	xmm5, DWORD PTR [rdx+4]
	subss	xmm3, xmm0
	movaps	xmm0, xmm4
	mulss	xmm2, xmm6
	mulss	xmm4, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [r8+8]
	mulss	xmm6, DWORD PTR [r8+8]
	addss	xmm4, xmm5
	subss	xmm2, xmm0
	movss	DWORD PTR [rax-56], xmm3
	movss	xmm0, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [rdx+4]
	lea	rdx, QWORD PTR [rax-56]
	addss	xmm4, xmm6
	movss	DWORD PTR [rax-52], xmm2
	subss	xmm1, xmm0
	addss	xmm4, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax-48], xmm1
	movss	DWORD PTR [rax-44], xmm4
	call	??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@AEBU10@@Z ; glm::normalize<float,2>

; 161  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 72
this$ = 96
__$ReturnUdt$ = 104
??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>, COMDAT

; 196  : 	{

$LN6:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx

; 197  : 		return mat4_cast(*this);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	mov	rdx, rax
	mov	rcx, rbx
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
	mov	rax, rbx

; 198  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??B?$tquat@M$01@glm@@QEAA?AU?$tmat4x4@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>, COMDAT

; 190  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 191  : 		return mat3_cast(*this);

	mov	rdx, rcx
	mov	rcx, rbx
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@AEBU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	mov	rax, rbx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??B?$tquat@M$01@glm@@QEAA?AU?$tmat3x3@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
this$ = 8
w$ = 16
x$ = 24
y$ = 32
z$ = 40
??0?$tquat@M$01@glm@@QEAA@AEBM000@Z PROC		; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r9]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	DWORD PTR [rcx+8], r8d
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 122  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBM000@Z ENDP		; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@AEBMAEBU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
v$ = 24
??0?$tquat@M$01@glm@@QEAA@AEBMAEBU?$tvec3@M$01@1@@Z PROC ; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+12], eax

; 117  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$01@glm@@QEAA@AEBMAEBU?$tvec3@M$01@1@@Z ENDP ; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tquat@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 112  : 	{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tquat@M$01@glm@@QEAA@XZ PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT

; 90   : 				: x(0), y(0), z(0), w(1)

	xor	eax, eax
	mov	DWORD PTR [rcx+12], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 92   : 		{}

	mov	rax, rcx
	ret	0
??0?$tquat@M$01@glm@@QEAA@XZ ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 82   : 	}

	ret	0
??A?$tquat@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tquat@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 75   : 	}

	ret	0
??A?$tquat@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$01@glm@@SAHXZ PROC			; glm::tquat<float,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$01@glm@@SAHXZ ENDP			; glm::tquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator--, COMDAT

; 394  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 396  : 		--*this;

	call	??F?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,0>::operator--

; 397  : 		return Result;

	mov	rax, rbx

; 398  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??F?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator++, COMDAT

; 386  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 388  : 		++*this;

	call	??E?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,0>::operator++

; 389  : 		return Result;

	mov	rax, rbx

; 390  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat4x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,0>::operator--, COMDAT

; 376  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 377  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 378  : 		--this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 379  : 		--this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 380  : 		--this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+96], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 381  : 		return *this;

	mov	rax, rcx

; 382  : 	}

	ret	0
??F?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,0>::operator++, COMDAT

; 366  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 367  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 368  : 		++this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 369  : 		++this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 370  : 		++this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+96], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 371  : 		return *this;

	mov	rax, rcx

; 372  : 	}

	ret	0
??E?$tmat4x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat4x4<double,0>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat4x4<double,0>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<double,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+72]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 235  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 226  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 217  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 208  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 199  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 190  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 181  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 172  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 85   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx+112], xmm1
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN000000000000000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
w3$ = 136
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN000000000000000@Z PROC	; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 65   : 	{

	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm1, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [r9]
	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, QWORD PTR w0$[rsp]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rcx, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [r11], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z1$[rsp]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w1$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [r11+32], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+48], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z2$[rsp]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w2$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y3$[rsp]
	movups	XMMWORD PTR [r11+64], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+80], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]

; 70   : 	}

	mov	rax, r11
	mov	rcx, QWORD PTR z3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w3$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+96], xmm0
	movups	XMMWORD PTR [r11+112], xmm1
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN000000000000000@Z ENDP	; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
s$ = 104
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	movsd	xmm0, QWORD PTR [rdi]
	movsd	QWORD PTR [rsp+32], xmm0
	call	??$?0HHHN@?$tvec4@N$0A@@glm@@QEAA@HHHN@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 55   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBN@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator--, COMDAT

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 396  : 		--*this;
; 397  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 398  : 	}

	ret	0
??F?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator++, COMDAT

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 388  : 		++*this;
; 389  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+48], xmm2

; 390  : 	}

	ret	0
??E?$tmat4x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,0>::operator--, COMDAT

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,0>::operator++, COMDAT

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+36]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 235  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 226  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 217  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 208  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 199  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 190  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 181  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 172  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 85   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
x3$ = 136
y3$ = 144
z3$ = 152
w3$ = 160
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z PROC	; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 65   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	mov	rax, QWORD PTR w0$[rbp-16]
	movss	DWORD PTR $T4[rbp-16], xmm0
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T4[rbp-12], xmm1
	movss	xmm1, DWORD PTR [rax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rax, QWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T4[rbp-4], xmm1
	movss	DWORD PTR $T4[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T4[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z1$[rbp-16]
	movss	DWORD PTR $T3[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T3[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR z2$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm1, DWORD PTR [rax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z3$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w3$[rbp-16]
	movss	DWORD PTR $T1[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 70   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T1[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ENDP	; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
s$ = 88
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movss	xmm1, DWORD PTR [rdi]
	movss	DWORD PTR [rsp+32], xmm1
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	movups	xmm0, XMMWORD PTR [rax]

; 55   : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator--, COMDAT

; 394  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 396  : 		--*this;

	call	??F?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,1>::operator--

; 397  : 		return Result;

	mov	rax, rbx

; 398  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??F?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator++, COMDAT

; 386  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 388  : 		++*this;

	call	??E?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,1>::operator++

; 389  : 		return Result;

	mov	rax, rbx

; 390  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat4x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,1>::operator--, COMDAT

; 376  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 377  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 378  : 		--this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 379  : 		--this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 380  : 		--this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+96], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 381  : 		return *this;

	mov	rax, rcx

; 382  : 	}

	ret	0
??F?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,1>::operator++, COMDAT

; 366  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 367  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 368  : 		++this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 369  : 		++this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 370  : 		++this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+96], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 371  : 		return *this;

	mov	rax, rcx

; 372  : 	}

	ret	0
??E?$tmat4x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$00@glm@@SAHXZ PROC			; glm::tmat4x4<double,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$00@glm@@SAHXZ ENDP			; glm::tmat4x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+72]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 235  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 226  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 217  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 208  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 199  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 190  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 181  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 172  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@000@Z PROC ; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 85   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx+112], xmm1
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@000@Z ENDP ; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBN000000000000000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
w3$ = 136
??0?$tmat4x4@N$00@glm@@QEAA@AEBN000000000000000@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 65   : 	{

	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm1, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [r9]
	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, QWORD PTR w0$[rsp]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rcx, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [r11], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z1$[rsp]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w1$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [r11+32], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+48], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z2$[rsp]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w2$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y3$[rsp]
	movups	XMMWORD PTR [r11+64], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+80], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]

; 70   : 	}

	mov	rax, r11
	mov	rcx, QWORD PTR z3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w3$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+96], xmm0
	movups	XMMWORD PTR [r11+112], xmm1
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBN000000000000000@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
s$ = 104
??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	movsd	xmm0, QWORD PTR [rdi]
	movsd	QWORD PTR [rsp+32], xmm0
	call	??$?0HHHN@?$tvec4@N$00@glm@@QEAA@HHHN@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 55   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@AEBN@Z ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
??0?$tmat4x4@N$00@glm@@QEAA@XZ PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$00@glm@@QEAA@XZ ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator--, COMDAT

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 396  : 		--*this;
; 397  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 398  : 	}

	ret	0
??F?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator++, COMDAT

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 388  : 		++*this;
; 389  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+48], xmm2

; 390  : 	}

	ret	0
??E?$tmat4x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,1>::operator--, COMDAT

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,1>::operator++, COMDAT

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$00@glm@@SAHXZ PROC			; glm::tmat4x4<float,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$00@glm@@SAHXZ ENDP			; glm::tmat4x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+36]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 235  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 226  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 217  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 208  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 199  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 190  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 181  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 172  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 85   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
x3$ = 136
y3$ = 144
z3$ = 152
w3$ = 160
??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 65   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	mov	rax, QWORD PTR w0$[rbp-16]
	movss	DWORD PTR $T4[rbp-16], xmm0
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T4[rbp-12], xmm1
	movss	xmm1, DWORD PTR [rax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rax, QWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T4[rbp-4], xmm1
	movss	DWORD PTR $T4[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T4[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z1$[rbp-16]
	movss	DWORD PTR $T3[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T3[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR z2$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm1, DWORD PTR [rax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z3$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w3$[rbp-16]
	movss	DWORD PTR $T1[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 70   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T1[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBM000000000000000@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
s$ = 88
??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movss	xmm1, DWORD PTR [rdi]
	movss	DWORD PTR [rsp+32], xmm1
	call	??$?0HHHM@?$tvec4@M$00@glm@@QEAA@HHHM@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
	movups	xmm0, XMMWORD PTR [rax]

; 55   : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBM@Z ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
??0?$tmat4x4@M$00@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator--, COMDAT

; 394  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 396  : 		--*this;

	call	??F?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,2>::operator--

; 397  : 		return Result;

	mov	rax, rbx

; 398  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??F?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator++, COMDAT

; 386  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	XMMWORD PTR [rdx+112], xmm1

; 388  : 		++*this;

	call	??E?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ	; glm::tmat4x4<double,2>::operator++

; 389  : 		return Result;

	mov	rax, rbx

; 390  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat4x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,2>::operator--, COMDAT

; 376  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 377  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 378  : 		--this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 379  : 		--this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 380  : 		--this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+96], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 381  : 		return *this;

	mov	rax, rcx

; 382  : 	}

	ret	0
??F?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<double,2>::operator++, COMDAT

; 366  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 367  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator

; 368  : 		++this->value[1];

	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator

; 369  : 		++this->value[2];

	mov	rdx, rax
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+64], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL15@operator
$LL17@operator:

; 370  : 		++this->value[3];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+96]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+96], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL17@operator

; 371  : 		return *this;

	mov	rax, rcx

; 372  : 	}

	ret	0
??E?$tmat4x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$01@glm@@SAHXZ PROC			; glm::tmat4x4<double,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$01@glm@@SAHXZ ENDP			; glm::tmat4x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+72]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 235  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 226  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 217  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 208  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 199  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 190  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 181  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 172  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@000@Z PROC ; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 85   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx+112], xmm1
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@000@Z ENDP ; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBN000000000000000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
w3$ = 136
??0?$tmat4x4@N$01@glm@@QEAA@AEBN000000000000000@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 65   : 	{

	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm1, QWORD PTR [r8]
	movsd	xmm3, QWORD PTR [r9]
	movsd	xmm0, QWORD PTR [rdx]
	mov	rax, QWORD PTR w0$[rsp]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rcx, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [r11], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z1$[rsp]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w1$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [r11+32], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+48], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]
	mov	rcx, QWORD PTR z2$[rsp]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w2$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	mov	rcx, QWORD PTR y3$[rsp]
	movups	XMMWORD PTR [r11+64], xmm0
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+80], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR [rax]

; 70   : 	}

	mov	rax, r11
	mov	rcx, QWORD PTR z3$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR w3$[rsp]
	movaps	xmm1, xmm3
	movsd	xmm2, QWORD PTR [rcx]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [r11+96], xmm0
	movups	XMMWORD PTR [r11+112], xmm1
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBN000000000000000@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
s$ = 104
??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	movsd	xmm0, QWORD PTR [rdi]
	movsd	QWORD PTR [rsp+32], xmm0
	call	??$?0HHHN@?$tvec4@N$01@glm@@QEAA@HHHN@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 55   : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@AEBN@Z ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 96
??0?$tmat4x4@N$01@glm@@QEAA@XZ PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 4
$LL4@tmat4x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+80], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+112], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat4x4@N$01@glm@@QEAA@XZ ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator--, COMDAT

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 396  : 		--*this;
; 397  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 398  : 	}

	ret	0
??F?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator++, COMDAT

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 388  : 		++*this;
; 389  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+48], xmm2

; 390  : 	}

	ret	0
??E?$tmat4x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,2>::operator--, COMDAT

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x4<float,2>::operator++, COMDAT

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+48]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 251  : 	}

	ret	0
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 244  : 	}

	ret	0
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$01@glm@@SAHXZ PROC			; glm::tmat4x4<float,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$01@glm@@SAHXZ ENDP			; glm::tmat4x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 230  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 232  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 233  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 234  : 		this->value[3] = col_type(m[3], 1);

	lea	rdx, QWORD PTR [rdi+36]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 235  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 221  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 223  : 		this->value[1] = m[1];
; 224  : 		this->value[2] = m[2];
; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 226  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 212  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 217  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 203  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 205  : 		this->value[1] = m[1];
; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T2[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 208  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 194  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 199  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 185  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 187  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 190  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 176  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 178  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 179  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 181  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
m$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 167  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 172  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 80   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 85   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
x3$ = 136
y3$ = 144
z3$ = 152
w3$ = 160
??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 65   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	mov	rax, QWORD PTR w0$[rbp-16]
	movss	DWORD PTR $T4[rbp-16], xmm0
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T4[rbp-12], xmm1
	movss	xmm1, DWORD PTR [rax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rax, QWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T4[rbp-4], xmm1
	movss	DWORD PTR $T4[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T4[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z1$[rbp-16]
	movss	DWORD PTR $T3[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T3[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR z2$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm1, DWORD PTR [rax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR x3$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z3$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR w3$[rbp-16]
	movss	DWORD PTR $T1[rbp-8], xmm1
	movss	xmm0, DWORD PTR [rax]

; 70   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T1[rbp-4], xmm0
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBM000000000000000@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
s$ = 88
??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 50   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	and	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	call	??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movss	xmm1, DWORD PTR [rdi]
	movss	DWORD PTR [rsp+32], xmm1
	call	??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
	movups	xmm0, XMMWORD PTR [rax]

; 55   : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 46   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4
	mov	rax, rcx
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 80
??0?$tmat4x4@M$01@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 4
$LL4@tmat4x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 1
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 19   : #			endif
; 20   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,0>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,0>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat4x3<double,0>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 221  : 	}

	ret	0
??A?$tmat4x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat4x3<double,0>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 214  : 	}

	ret	0
??A?$tmat4x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 196  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	xmm2, QWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	QWORD PTR [rbx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	QWORD PTR [rbx+40], xmm2
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0

; 168  : 		this->value[3] = col_type(0);

	movsd	QWORD PTR $T1[rsp+16], xmm0

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 160  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
m$ = 56
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 40					; 00000028H
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	movups	xmm0, XMMWORD PTR [rdx+48]
	movsd	xmm2, QWORD PTR [rdx+64]
	movups	XMMWORD PTR [rcx+48], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rcx+64], xmm2
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	QWORD PTR [rcx+88], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@000@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 83   : 	}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+88], xmm1
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@000@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
x3$ = 128
y3$ = 136
z3$ = 144
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z PROC	; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32					; 00000020H
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR [r9]
	movsd	xmm1, QWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-32]
	mov	rax, QWORD PTR x1$[rbp-32]
	movsd	QWORD PTR $T4[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rdx]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T4[rbp-16]
	movups	XMMWORD PTR [r11], xmm0
	movsd	QWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z1$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-32]
	movsd	QWORD PTR $T3[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T3[rbp-16]
	movups	XMMWORD PTR [r11+24], xmm0
	movsd	QWORD PTR [r11+40], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z2$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-32]
	movsd	QWORD PTR $T2[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T2[rbp-16]
	movups	XMMWORD PTR [r11+48], xmm0
	movsd	QWORD PTR [r11+64], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z3$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR $T1[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]

; 68   : 	}

	mov	rax, r11
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T1[rbp-16]
	movups	XMMWORD PTR [r11+72], xmm0
	movsd	QWORD PTR [r11+88], xmm1
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN00000000000@Z ENDP	; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
s$ = 88
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z PROC		; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z	; glm::tvec3<double,0>::tvec3<double,0><double,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,double,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,double>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 53   : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@AEBN@Z ENDP		; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
??0?$tmat4x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,0>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,0>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 221  : 	}

	ret	0
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 214  : 	}

	ret	0
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 204  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 205  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 196  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 186  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 187  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 177  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 178  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movsd	xmm0, QWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	mov	eax, DWORD PTR [rdx+8]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	QWORD PTR [rbx], xmm0
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	movsd	QWORD PTR [rbx+12], xmm0
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 168  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 169  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 160  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
m$ = 40
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 24
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], r9d
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR [rdx+32]
	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	xorps	xmm0, xmm0
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+36], xmm0
	mov	DWORD PTR [rcx+44], eax

; 151  : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 141  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 142  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@000@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 80   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 81   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rcx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx+44], eax

; 83   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@000@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z PROC	; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR [r9]
	movss	xmm1, DWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T4[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T4[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11], xmm0
	mov	DWORD PTR [r11+8], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x1$[rbp-16]
	mov	rcx, QWORD PTR z1$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T3[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+12], xmm0
	mov	DWORD PTR [r11+20], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x2$[rbp-16]
	mov	rcx, QWORD PTR z2$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T2[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+24], xmm0
	mov	DWORD PTR [r11+32], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x3$[rbp-16]
	mov	rcx, QWORD PTR z3$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T1[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+36], xmm0
	mov	DWORD PTR [r11+44], eax

; 68   : 	}

	mov	rax, r11
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM00000000000@Z ENDP	; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
s$ = 72
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 53   : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,1>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,1>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 221  : 	}

	ret	0
??A?$tmat4x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 214  : 	}

	ret	0
??A?$tmat4x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$00@glm@@SAHXZ PROC			; glm::tmat4x3<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$00@glm@@SAHXZ ENDP			; glm::tmat4x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 196  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	xmm2, QWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	QWORD PTR [rbx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	QWORD PTR [rbx+40], xmm2
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0

; 168  : 		this->value[3] = col_type(0);

	movsd	QWORD PTR $T1[rsp+16], xmm0

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 160  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
m$ = 56
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 40					; 00000028H
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	movups	xmm0, XMMWORD PTR [rdx+48]
	movsd	xmm2, QWORD PTR [rdx+64]
	movups	XMMWORD PTR [rcx+48], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rcx+64], xmm2
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	QWORD PTR [rcx+88], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@000@Z PROC ; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 83   : 	}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+88], xmm1
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@000@Z ENDP ; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
x3$ = 128
y3$ = 136
z3$ = 144
??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32					; 00000020H
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR [r9]
	movsd	xmm1, QWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-32]
	mov	rax, QWORD PTR x1$[rbp-32]
	movsd	QWORD PTR $T4[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rdx]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T4[rbp-16]
	movups	XMMWORD PTR [r11], xmm0
	movsd	QWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z1$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-32]
	movsd	QWORD PTR $T3[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T3[rbp-16]
	movups	XMMWORD PTR [r11+24], xmm0
	movsd	QWORD PTR [r11+40], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z2$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-32]
	movsd	QWORD PTR $T2[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T2[rbp-16]
	movups	XMMWORD PTR [r11+48], xmm0
	movsd	QWORD PTR [r11+64], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z3$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR $T1[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]

; 68   : 	}

	mov	rax, r11
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T1[rbp-16]
	movups	XMMWORD PTR [r11+72], xmm0
	movsd	QWORD PTR [r11+88], xmm1
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBN00000000000@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
s$ = 88
??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z	; glm::tvec3<double,1>::tvec3<double,1><double,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,double,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,double>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 53   : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@AEBN@Z ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
??0?$tmat4x3@N$00@glm@@QEAA@XZ PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$00@glm@@QEAA@XZ ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,1>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,1>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 221  : 	}

	ret	0
??A?$tmat4x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 214  : 	}

	ret	0
??A?$tmat4x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$00@glm@@SAHXZ PROC			; glm::tmat4x3<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$00@glm@@SAHXZ ENDP			; glm::tmat4x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 204  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 205  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 196  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 186  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 187  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 177  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 178  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movsd	xmm0, QWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	mov	eax, DWORD PTR [rdx+8]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	QWORD PTR [rbx], xmm0
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	movsd	QWORD PTR [rbx+12], xmm0
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 168  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 169  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 160  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
m$ = 40
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 24
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], r9d
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR [rdx+32]
	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	xorps	xmm0, xmm0
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+36], xmm0
	mov	DWORD PTR [rcx+44], eax

; 151  : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 141  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 142  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@000@Z PROC ; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 80   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 81   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rcx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx+44], eax

; 83   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@000@Z ENDP ; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR [r9]
	movss	xmm1, DWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T4[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T4[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11], xmm0
	mov	DWORD PTR [r11+8], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x1$[rbp-16]
	mov	rcx, QWORD PTR z1$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T3[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+12], xmm0
	mov	DWORD PTR [r11+20], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x2$[rbp-16]
	mov	rcx, QWORD PTR z2$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T2[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+24], xmm0
	mov	DWORD PTR [r11+32], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x3$[rbp-16]
	mov	rcx, QWORD PTR z3$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T1[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+36], xmm0
	mov	DWORD PTR [r11+44], eax

; 68   : 	}

	mov	rax, r11
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBM00000000000@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
s$ = 72
??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z	; glm::tvec3<float,1>::tvec3<float,1><float,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,float,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,float>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 53   : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@AEBM@Z ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x3@M$00@glm@@QEAA@XZ PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$00@glm@@QEAA@XZ ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,2>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<double,2>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+64]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+80], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 221  : 	}

	ret	0
??A?$tmat4x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 214  : 	}

	ret	0
??A?$tmat4x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$01@glm@@SAHXZ PROC			; glm::tmat4x3<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$01@glm@@SAHXZ ENDP			; glm::tmat4x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 196  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	xmm2, QWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	QWORD PTR [rbx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	QWORD PTR [rbx+40], xmm2
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0

; 168  : 		this->value[3] = col_type(0);

	movsd	QWORD PTR $T1[rsp+16], xmm0

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 160  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
m$ = 56
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 40					; 00000028H
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	movups	xmm0, XMMWORD PTR [rdx+48]
	movsd	xmm2, QWORD PTR [rdx+64]
	movups	XMMWORD PTR [rcx+48], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rcx+64], xmm2
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	QWORD PTR [rcx+88], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
m$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rbx+64], xmm1

; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@000@Z PROC ; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rcx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 83   : 	}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+88], xmm1
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@000@Z ENDP ; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
x3$ = 128
y3$ = 136
z3$ = 144
??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32					; 00000020H
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR [r9]
	movsd	xmm1, QWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-32]
	mov	rax, QWORD PTR x1$[rbp-32]
	movsd	QWORD PTR $T4[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rdx]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T4[rbp-16]
	movups	XMMWORD PTR [r11], xmm0
	movsd	QWORD PTR [r11+16], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z1$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-32]
	movsd	QWORD PTR $T3[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T3[rbp-16]
	movups	XMMWORD PTR [r11+24], xmm0
	movsd	QWORD PTR [r11+40], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z2$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-32]
	movsd	QWORD PTR $T2[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rbp-32]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T2[rbp-16]
	movups	XMMWORD PTR [r11+48], xmm0
	movsd	QWORD PTR [r11+64], xmm1
	movsd	xmm1, QWORD PTR [rcx]
	mov	rcx, QWORD PTR z3$[rbp-32]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR $T1[rbp-16], xmm0
	movsd	xmm0, QWORD PTR [rax]

; 68   : 	}

	mov	rax, r11
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR $T1[rbp-16]
	movups	XMMWORD PTR [r11+72], xmm0
	movsd	QWORD PTR [r11+88], xmm1
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBN00000000000@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
s$ = 88
??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movsd	xmm1, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z	; glm::tvec3<double,2>::tvec3<double,2><double,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movsd	xmm2, QWORD PTR [rdi]
	call	??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,double,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	movsd	xmm3, QWORD PTR [rdi]
	call	??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,double>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 53   : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@AEBN@Z ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
??0?$tmat4x3@N$01@glm@@QEAA@XZ PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+64], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+72], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+88], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x3@N$01@glm@@QEAA@XZ ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator--, COMDAT

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 348  : 		--*this;
; 349  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 350  : 	}

	ret	0
??F?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator++, COMDAT

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 340  : 		++*this;
; 341  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 342  : 	}

	ret	0
??E?$tmat4x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,2>::operator--, COMDAT

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x3<float,2>::operator++, COMDAT

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 324  : 	}

	ret	0
??E?$tmat4x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 221  : 	}

	ret	0
??A?$tmat4x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 214  : 	}

	ret	0
??A?$tmat4x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$01@glm@@SAHXZ PROC			; glm::tmat4x3<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$01@glm@@SAHXZ ENDP			; glm::tmat4x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 200  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 202  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 203  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 204  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 205  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 191  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 193  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 194  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 195  : 		this->value[3] = col_type(m[3], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 196  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 182  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 184  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 185  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 186  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 187  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 173  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 175  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 176  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 177  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 178  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 164  : 	{

$LN21:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	movsd	xmm0, QWORD PTR [rdx]

; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	mov	eax, DWORD PTR [rdx+8]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	QWORD PTR [rbx], xmm0
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	movsd	QWORD PTR [rbx+12], xmm0
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 168  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 169  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 155  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 158  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 159  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 160  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
m$ = 40
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 146  : 	{

$LN23:
	sub	rsp, 24
	mov	r8d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rdx]

; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], r9d
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR [rdx+32]
	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	xorps	xmm0, xmm0
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+36], xmm0
	mov	DWORD PTR [rcx+44], eax

; 151  : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 137  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 139  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 140  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rax+8]

; 141  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp+8], 0
	mov	DWORD PTR [rbx+32], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rbx+36], xmm0
	mov	DWORD PTR [rbx+44], eax

; 142  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@000@Z PROC ; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 78   : 	{

	mov	r10d, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 80   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 81   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 82   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rcx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx+44], eax

; 83   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@000@Z ENDP ; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
x3$ = 112
y3$ = 120
z3$ = 128
??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 63   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	r11, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r10d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR [r9]
	movss	xmm1, DWORD PTR [r8]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	rcx, QWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T4[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T4[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11], xmm0
	mov	DWORD PTR [r11+8], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x1$[rbp-16]
	mov	rcx, QWORD PTR z1$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	rcx, QWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T3[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T3[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+12], xmm0
	mov	DWORD PTR [r11+20], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x2$[rbp-16]
	mov	rcx, QWORD PTR z2$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	rcx, QWORD PTR y3$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T2[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+24], xmm0
	mov	DWORD PTR [r11+32], eax
	movss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR x3$[rbp-16]
	mov	rcx, QWORD PTR z3$[rbp-16]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rbp-8], xmm0
	movss	xmm0, DWORD PTR [rax]
	mov	eax, DWORD PTR $T1[rbp-8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [r11+36], xmm0
	mov	DWORD PTR [r11+44], eax

; 68   : 	}

	mov	rax, r11
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBM00000000000@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
s$ = 72
??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 48   : 	{

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	movss	xmm1, DWORD PTR [rdx]
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r9d, r9d
	call	??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z	; glm::tvec3<float,2>::tvec3<float,2><float,int,int>

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	movss	xmm2, DWORD PTR [rdi]
	call	??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,float,int>

; 51   : 		this->value[2] = col_type(0, 0, s);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	movss	xmm3, DWORD PTR [rdi]
	call	??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,float>

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 53   : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@AEBM@Z ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x3@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 44   : 	{}

	mov	edx, 4
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3
	mov	rax, rcx
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x3@M$01@glm@@QEAA@XZ PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 4
$LL4@tmat4x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+36], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x3@M$01@glm@@QEAA@XZ ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,0>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,0>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat4x2<double,0>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 228  : 	}

	ret	0
??A?$tmat4x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat4x2<double,0>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 221  : 	}

	ret	0
??A?$tmat4x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+72]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+48], xmm0
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 144  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@000@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 85   : 	{

	mov	rax, rcx
	mov	r10d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 90   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@000@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
x3$ = 64
y3$ = 72
??0?$tmat4x2@N$0A@@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 70   : 	{

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y3$[rsp]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
scalar$ = 88
??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z	; glm::tvec2<double,0>::tvec2<double,0><double,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z	; glm::tvec2<double,0>::tvec2<double,0><int,double>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,0>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,0>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	ret	0
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 221  : 	}

	ret	0
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 212  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+36]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 194  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	rax, QWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 176  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 158  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 144  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL20@tmat4x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL20@tmat4x2

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], r8d
	and	DWORD PTR $T2[rsp+4], r8d
	mov	rax, QWORD PTR $T2[rsp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 149  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@000@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 85   : 	{

	mov	r10, rcx
	mov	rax, rcx
	mov	ecx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r10], rax

; 87   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [r10+8], rax

; 88   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [r10+16], rax

; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	mov	rcx, QWORD PTR [rax]

; 90   : 	}

	mov	rax, r10
	mov	QWORD PTR [r10+24], rcx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@000@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 16
$T2 = 16
$T3 = 16
$T4 = 16
this$ = 16
x0$ = 24
y0$ = 32
x1$ = 40
y1$ = 48
x2$ = 56
y2$ = 64
x3$ = 72
y3$ = 80
??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 70   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);
; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR $T4[rbp], xmm1

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rbp]
	movss	DWORD PTR $T4[rbp+4], xmm2
	mov	rax, QWORD PTR $T4[rbp]
	movss	DWORD PTR $T3[rbp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rbp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T3[rbp], xmm3
	mov	rax, QWORD PTR $T3[rbp]
	movss	DWORD PTR $T2[rbp], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR x3$[rbp]
	movss	DWORD PTR $T2[rbp+4], xmm1
	movss	xmm1, DWORD PTR y3$[rbp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR $T2[rbp]
	mov	QWORD PTR [rcx+16], rax
	movss	DWORD PTR $T1[rbp], xmm0
	movss	DWORD PTR $T1[rbp+4], xmm1
	mov	rax, QWORD PTR $T1[rbp]
	mov	QWORD PTR [rcx+24], rax

; 75   : 	}

	mov	rax, rcx
	pop	rbp
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
$T4 = 64
this$ = 64
scalar$ = 72
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
??0?$tmat4x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,1>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,1>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 228  : 	}

	ret	0
??A?$tmat4x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 221  : 	}

	ret	0
??A?$tmat4x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$00@glm@@SAHXZ PROC			; glm::tmat4x2<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$00@glm@@SAHXZ ENDP			; glm::tmat4x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+72]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+48], xmm0
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 144  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@000@Z PROC ; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 85   : 	{

	mov	rax, rcx
	mov	r10d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 90   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@000@Z ENDP ; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
x3$ = 64
y3$ = 72
??0?$tmat4x2@N$00@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 70   : 	{

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y3$[rsp]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
scalar$ = 88
??0?$tmat4x2@N$00@glm@@QEAA@N@Z PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z	; glm::tvec2<double,1>::tvec2<double,1><double,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z	; glm::tvec2<double,1>::tvec2<double,1><int,double>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x2@N$00@glm@@QEAA@XZ PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@N$00@glm@@QEAA@XZ ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,1>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,1>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	ret	0
??A?$tmat4x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 221  : 	}

	ret	0
??A?$tmat4x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$00@glm@@SAHXZ PROC			; glm::tmat4x2<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$00@glm@@SAHXZ ENDP			; glm::tmat4x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 212  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+36]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 194  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	rax, QWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 176  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 158  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 144  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL20@tmat4x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL20@tmat4x2

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], r8d
	and	DWORD PTR $T2[rsp+4], r8d
	mov	rax, QWORD PTR $T2[rsp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 149  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@000@Z PROC ; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 85   : 	{

	mov	r10, rcx
	mov	rax, rcx
	mov	ecx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r10], rax

; 87   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [r10+8], rax

; 88   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [r10+16], rax

; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	mov	rcx, QWORD PTR [rax]

; 90   : 	}

	mov	rax, r10
	mov	QWORD PTR [r10+24], rcx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@000@Z ENDP ; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 16
$T2 = 16
$T3 = 16
$T4 = 16
this$ = 16
x0$ = 24
y0$ = 32
x1$ = 40
y1$ = 48
x2$ = 56
y2$ = 64
x3$ = 72
y3$ = 80
??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 70   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);
; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR $T4[rbp], xmm1

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rbp]
	movss	DWORD PTR $T4[rbp+4], xmm2
	mov	rax, QWORD PTR $T4[rbp]
	movss	DWORD PTR $T3[rbp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rbp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T3[rbp], xmm3
	mov	rax, QWORD PTR $T3[rbp]
	movss	DWORD PTR $T2[rbp], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR x3$[rbp]
	movss	DWORD PTR $T2[rbp+4], xmm1
	movss	xmm1, DWORD PTR y3$[rbp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR $T2[rbp]
	mov	QWORD PTR [rcx+16], rax
	movss	DWORD PTR $T1[rbp], xmm0
	movss	DWORD PTR $T1[rbp+4], xmm1
	mov	rax, QWORD PTR $T1[rbp]
	mov	QWORD PTR [rcx+24], rax

; 75   : 	}

	mov	rax, rcx
	pop	rbp
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
$T4 = 64
this$ = 64
scalar$ = 72
??0?$tmat4x2@M$00@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z	; glm::tvec2<float,1>::tvec2<float,1><float,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z	; glm::tvec2<float,1>::tvec2<float,1><int,float>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
??0?$tmat4x2@M$00@glm@@QEAA@XZ PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>
	mov	rcx, QWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat4x2@M$00@glm@@QEAA@XZ ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+48], xmm1
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,2>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<double,2>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 228  : 	}

	ret	0
??A?$tmat4x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 221  : 	}

	ret	0
??A?$tmat4x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$01@glm@@SAHXZ PROC			; glm::tmat4x2<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$01@glm@@SAHXZ ENDP			; glm::tmat4x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+72]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+48], xmm0
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+96]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+48], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 144  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@000@Z PROC ; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 85   : 	{

	mov	rax, rcx
	mov	r10d, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax]

; 90   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@000@Z ENDP ; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
x3$ = 64
y3$ = 72
??0?$tmat4x2@N$01@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 70   : 	{

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y3$[rsp]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x3$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+48], xmm0
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 80
scalar$ = 88
??0?$tmat4x2@N$01@glm@@QEAA@N@Z PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z	; glm::tvec2<double,2>::tvec2<double,2><double,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T3[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z	; glm::tvec2<double,2>::tvec2<double,2><int,double>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
this$ = 64
??0?$tmat4x2@N$01@glm@@QEAA@XZ PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+32], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+48], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@N$01@glm@@QEAA@XZ ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator--, COMDAT

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 355  : 		--*this;
; 356  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 357  : 	}

	ret	0
??F?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator++, COMDAT

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 347  : 		++*this;
; 348  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 349  : 	}

	ret	0
??E?$tmat4x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,2>::operator--, COMDAT

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 341  : 	}

	ret	0
??F?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat4x2<float,2>::operator++, COMDAT

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm1

; 331  : 	}

	ret	0
??E?$tmat4x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	ret	0
??A?$tmat4x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat4x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 221  : 	}

	ret	0
??A?$tmat4x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$01@glm@@SAHXZ PROC			; glm::tmat4x2<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$01@glm@@SAHXZ ENDP			; glm::tmat4x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 207  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 209  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 210  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 212  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 198  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 200  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 201  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 202  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+36]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 203  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 189  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 191  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 194  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 180  : 	{

	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	rax, QWORD PTR [rdx]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 171  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 173  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], 0
	and	DWORD PTR $T2[rsp+4], 0
	mov	rax, QWORD PTR $T2[rsp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 176  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 162  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 164  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 165  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 166  : 		this->value[3] = col_type(m[3]);

	lea	rdx, QWORD PTR [rdi+48]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
m$ = 56
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 153  : 	{

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 155  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 156  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+24], rax

; 158  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
m$ = 16
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 144  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL20@tmat4x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL20@tmat4x2

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[rsp], r8d
	and	DWORD PTR $T2[rsp+4], r8d
	mov	rax, QWORD PTR $T2[rsp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+24], rax

; 149  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@000@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@000@Z PROC ; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 85   : 	{

	mov	r10, rcx
	mov	rax, rcx
	mov	ecx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r10], rax

; 87   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [r10+8], rax

; 88   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [r10+16], rax

; 89   : 		this->value[3] = v3;

	mov	rax, QWORD PTR v3$[rsp]
	mov	rcx, QWORD PTR [rax]

; 90   : 	}

	mov	rax, r10
	mov	QWORD PTR [r10+24], rcx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@000@Z ENDP ; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 16
$T2 = 16
$T3 = 16
$T4 = 16
this$ = 16
x0$ = 24
y0$ = 32
x1$ = 40
y1$ = 48
x2$ = 56
y2$ = 64
x3$ = 72
y3$ = 80
??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 70   : 	{

$LN23:
	push	rbp
	mov	rbp, rsp
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);
; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR $T4[rbp], xmm1

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rbp]
	movss	DWORD PTR $T4[rbp+4], xmm2
	mov	rax, QWORD PTR $T4[rbp]
	movss	DWORD PTR $T3[rbp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rbp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T3[rbp], xmm3
	mov	rax, QWORD PTR $T3[rbp]
	movss	DWORD PTR $T2[rbp], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR x3$[rbp]
	movss	DWORD PTR $T2[rbp+4], xmm1
	movss	xmm1, DWORD PTR y3$[rbp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR $T2[rbp]
	mov	QWORD PTR [rcx+16], rax
	movss	DWORD PTR $T1[rbp], xmm0
	movss	DWORD PTR $T1[rbp+4], xmm1
	mov	rax, QWORD PTR $T1[rbp]
	mov	QWORD PTR [rcx+24], rax

; 75   : 	}

	mov	rax, rcx
	pop	rbp
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
$T4 = 64
this$ = 64
scalar$ = 72
??0?$tmat4x2@M$01@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 55   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z	; glm::tvec2<float,2>::tvec2<float,2><float,int>

; 57   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z	; glm::tvec2<float,2>::tvec2<float,2><int,float>

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 60   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat4x2@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 51   : 	{}

	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2
	mov	rax, rcx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
this$ = 48
??0?$tmat4x2@M$01@glm@@QEAA@XZ PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT

; 18   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 4
$LL4@tmat4x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T4[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 21   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+16], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>
	mov	rcx, QWORD PTR [rax]

; 24   : #			endif
; 25   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat4x2@M$01@glm@@QEAA@XZ ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;

	xor	eax, eax
	mov	r8, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1
	mov	edx, eax
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL15@operator

; 317  : 		return Result;

	mov	rax, r8

; 318  : 	}

	ret	0
??F?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator++, COMDAT

; 306  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1

; 308  : 		++*this;

	call	??E?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ	; glm::tmat3x4<double,0>::operator++

; 309  : 		return Result;

	mov	rax, rbx

; 310  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat3x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,0>::operator--, COMDAT

; 297  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 298  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 299  : 		--this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 300  : 		--this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 301  : 		return *this;

	mov	rax, rcx

; 302  : 	}

	ret	0
??F?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,0>::operator++, COMDAT

; 288  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 289  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 290  : 		++this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 291  : 		++this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+64], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 292  : 		return *this;

	mov	rax, rcx

; 293  : 	}

	ret	0
??E?$tmat3x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat3x4<double,0>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat3x4<double,0>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 183  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 175  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	movups	xmm1, XMMWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 167  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 159  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 151  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 135  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 127  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@00@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@00@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
??0?$tmat3x4@N$0A@@glm@@QEAA@NNNNNNNNNNNN@Z PROC	; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 58   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movsd	xmm2, QWORD PTR w2$[rsp]
	movups	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z2$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@NNNNNNNNNNNN@Z ENDP	; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 112
scalar$ = 120
??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 96					; 00000060H
	movaps	XMMWORD PTR [rsp+80], xmm6
	lea	rax, QWORD PTR [rcx+16]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0NHHH@?$tvec4@N$0A@@glm@@QEAA@NHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HNHH@?$tvec4@N$0A@@glm@@QEAA@HNHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHNH@?$tvec4@N$0A@@glm@@QEAA@HHNH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+80]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
??0?$tmat3x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator++, COMDAT

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+32], xmm2

; 310  : 	}

	ret	0
??E?$tmat3x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,0>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,0>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 175  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 127  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@00@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@00@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z PROC	; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 58   : 	{

$LN21:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rbp-16]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T3[rbp-4], xmm0
	movss	xmm0, DWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	DWORD PTR $T3[rbp-12], xmm2
	movss	DWORD PTR $T3[rbp-8], xmm3
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm0, DWORD PTR z1$[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm1, DWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movss	xmm1, DWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm1, DWORD PTR z2$[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movss	xmm0, DWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm0, DWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T1[rbp-4], xmm0
	movss	DWORD PTR $T1[rbp-8], xmm1
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@MMMMMMMMMMMM@Z ENDP	; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
scalar$ = 104
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+8]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
??0?$tmat3x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;

	xor	eax, eax
	mov	r8, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1
	mov	edx, eax
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL15@operator

; 317  : 		return Result;

	mov	rax, r8

; 318  : 	}

	ret	0
??F?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator++, COMDAT

; 306  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1

; 308  : 		++*this;

	call	??E?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ	; glm::tmat3x4<double,1>::operator++

; 309  : 		return Result;

	mov	rax, rbx

; 310  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat3x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,1>::operator--, COMDAT

; 297  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 298  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 299  : 		--this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 300  : 		--this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 301  : 		return *this;

	mov	rax, rcx

; 302  : 	}

	ret	0
??F?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,1>::operator++, COMDAT

; 288  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 289  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 290  : 		++this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 291  : 		++this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+64], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 292  : 		return *this;

	mov	rax, rcx

; 293  : 	}

	ret	0
??E?$tmat3x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$00@glm@@SAHXZ PROC			; glm::tmat3x4<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$00@glm@@SAHXZ ENDP			; glm::tmat3x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 183  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 175  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	movups	xmm1, XMMWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 167  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 159  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 151  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 135  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 127  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@00@Z PROC ; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@00@Z ENDP ; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
??0?$tmat3x4@N$00@glm@@QEAA@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 58   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movsd	xmm2, QWORD PTR w2$[rsp]
	movups	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z2$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 112
scalar$ = 120
??0?$tmat3x4@N$00@glm@@QEAA@N@Z PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 96					; 00000060H
	movaps	XMMWORD PTR [rsp+80], xmm6
	lea	rax, QWORD PTR [rcx+16]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0NHHH@?$tvec4@N$00@glm@@QEAA@NHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HNHH@?$tvec4@N$00@glm@@QEAA@HNHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHNH@?$tvec4@N$00@glm@@QEAA@HHNH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+80]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
??0?$tmat3x4@N$00@glm@@QEAA@XZ PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$00@glm@@QEAA@XZ ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator++, COMDAT

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+32], xmm2

; 310  : 	}

	ret	0
??E?$tmat3x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,1>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,1>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$00@glm@@SAHXZ PROC			; glm::tmat3x4<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$00@glm@@SAHXZ ENDP			; glm::tmat3x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 175  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 127  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@00@Z PROC ; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@00@Z ENDP ; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 58   : 	{

$LN21:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rbp-16]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T3[rbp-4], xmm0
	movss	xmm0, DWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	DWORD PTR $T3[rbp-12], xmm2
	movss	DWORD PTR $T3[rbp-8], xmm3
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm0, DWORD PTR z1$[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm1, DWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movss	xmm1, DWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm1, DWORD PTR z2$[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movss	xmm0, DWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm0, DWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T1[rbp-4], xmm0
	movss	DWORD PTR $T1[rbp-8], xmm1
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
scalar$ = 104
??0?$tmat3x4@M$00@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+8]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0MHHH@?$tvec4@M$00@glm@@QEAA@MHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HMHH@?$tvec4@M$00@glm@@QEAA@HMHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHMH@?$tvec4@M$00@glm@@QEAA@HHMH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
??0?$tmat3x4@M$00@glm@@QEAA@XZ PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$00@glm@@QEAA@XZ ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;

	xor	eax, eax
	mov	r8, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1
	mov	edx, eax
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
	mov	rdx, rax
$LL13@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL13@operator
$LL15@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL15@operator

; 317  : 		return Result;

	mov	rax, r8

; 318  : 	}

	ret	0
??F?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator++, COMDAT

; 306  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	rbx, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	XMMWORD PTR [rdx+80], xmm1

; 308  : 		++*this;

	call	??E?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ	; glm::tmat3x4<double,2>::operator++

; 309  : 		return Result;

	mov	rax, rbx

; 310  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??E?$tmat3x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,2>::operator--, COMDAT

; 297  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 298  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 299  : 		--this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 300  : 		--this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+64], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 301  : 		return *this;

	mov	rax, rcx

; 302  : 	}

	ret	0
??F?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<double,2>::operator++, COMDAT

; 288  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 289  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL9@operator

; 290  : 		++this->value[1];

	mov	rdx, rax
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rdx*8+32], xmm1
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL11@operator
$LL13@operator:

; 291  : 		++this->value[2];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+64]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+64], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL13@operator

; 292  : 		return *this;

	mov	rax, rcx

; 293  : 	}

	ret	0
??E?$tmat3x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$01@glm@@SAHXZ PROC			; glm::tmat3x4<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$01@glm@@SAHXZ ENDP			; glm::tmat3x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 183  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 175  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	movups	xmm1, XMMWORD PTR [rdx+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	xor	edx, edx
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 167  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 159  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 151  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+48]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 135  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
m$ = 104
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 127  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@00@Z PROC ; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	mov	QWORD PTR [rax+8], r11
	lea	rax, QWORD PTR [rax+32]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [r9+16]
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@00@Z ENDP ; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
x2$ = 80
y2$ = 88
z2$ = 96
w2$ = 104
??0?$tmat3x4@N$01@glm@@QEAA@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 58   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movsd	xmm2, QWORD PTR w2$[rsp]
	movups	XMMWORD PTR [rcx+32], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z2$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm1
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 112
scalar$ = 120
??0?$tmat3x4@N$01@glm@@QEAA@N@Z PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 96					; 00000060H
	movaps	XMMWORD PTR [rsp+80], xmm6
	lea	rax, QWORD PTR [rcx+16]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0NHHH@?$tvec4@N$01@glm@@QEAA@NHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HNHH@?$tvec4@N$01@glm@@QEAA@HNHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHNH@?$tvec4@N$01@glm@@QEAA@HHNH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+80]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
??0?$tmat3x4@N$01@glm@@QEAA@XZ PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 3
$LL4@tmat3x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+48], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+80], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@N$01@glm@@QEAA@XZ ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator--, COMDAT

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator++, COMDAT

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm0, XMMWORD PTR [rcx]
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm2, xmm0
	movups	XMMWORD PTR [rcx+32], xmm2

; 310  : 	}

	ret	0
??E?$tmat3x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,2>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x4<float,2>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movaps	xmm1, xmm2
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$01@glm@@SAHXZ PROC			; glm::tmat3x4<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$01@glm@@SAHXZ ENDP			; glm::tmat3x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 181  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 182  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 171  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 175  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 163  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 165  : 		this->value[1] = col_type(m[1]);
; 166  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], ecx
	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xor	edx, edx
	movdqu	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	xor	r9d, r9d
	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 147  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 149  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 139  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 141  : 		this->value[1] = col_type(m[1]);
; 142  : 		this->value[2] = col_type(m[2]);
; 143  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm2, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm2
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 133  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 134  : 		this->value[2] = col_type(m[2], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
m$ = 88
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rdx
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8d, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 127  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@00@Z PROC ; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 71   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@00@Z ENDP ; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
w2$ = 128
??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 58   : 	{

$LN21:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rbp-16]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T3[rbp-4], xmm0
	movss	xmm0, DWORD PTR x1$[rbp-16]
	movss	DWORD PTR $T3[rbp-16], xmm1
	movss	DWORD PTR $T3[rbp-12], xmm2
	movss	DWORD PTR $T3[rbp-8], xmm3
	movups	xmm1, XMMWORD PTR $T3[rbp-16]
	movss	DWORD PTR $T2[rbp-16], xmm0
	movss	xmm0, DWORD PTR z1$[rbp-16]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rbp-16]
	movss	DWORD PTR $T2[rbp-12], xmm1
	movss	xmm1, DWORD PTR w1$[rbp-16]
	movss	DWORD PTR $T2[rbp-4], xmm1
	movss	xmm1, DWORD PTR x2$[rbp-16]
	movss	DWORD PTR $T2[rbp-8], xmm0
	movups	xmm0, XMMWORD PTR $T2[rbp-16]
	movss	DWORD PTR $T1[rbp-16], xmm1
	movss	xmm1, DWORD PTR z2$[rbp-16]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movss	xmm0, DWORD PTR y2$[rbp-16]
	movss	DWORD PTR $T1[rbp-12], xmm0
	movss	xmm0, DWORD PTR w2$[rbp-16]
	movss	DWORD PTR $T1[rbp-4], xmm0
	movss	DWORD PTR $T1[rbp-8], xmm1
	movups	xmm1, XMMWORD PTR $T1[rbp-16]
	movdqu	XMMWORD PTR [rcx+32], xmm1
	add	rsp, 16
	pop	rbp
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 96
scalar$ = 104
??0?$tmat3x4@M$01@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+8]
	movaps	xmm6, xmm1
	mov	rbx, rcx
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	call	??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm3, xmm6
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x4@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 41   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4
	mov	rax, rcx
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 80
??0?$tmat3x4@M$01@glm@@QEAA@XZ PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 3
$LL4@tmat3x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x4@M$01@glm@@QEAA@XZ ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 332  : 		--*this;
; 333  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 324  : 		++*this;
; 325  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,0>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,0>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat3x3<double,0>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 201  : 	}

	ret	0
??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat3x3<double,0>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 194  : 	}

	ret	0
??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<double,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 183  : 		this->value[1] = m[1];
; 184  : 		this->value[2] = m[2];
; 185  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [rdx+64]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 177  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 161  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 153  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	xor	edx, edx
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 145  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 137  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 129  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 40					; 00000028H
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T3[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T3[rsp+16]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T2[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm0, QWORD PTR z2$[rsp]
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T2[rsp+16]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+40], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	QWORD PTR [rcx+64], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 96
scalar$ = 104
??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z	; glm::tvec3<double,0>::tvec3<double,0><double,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,double,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHN@?$tvec3@N$0A@@glm@@QEAA@HHN@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,double>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 332  : 		--*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 333  : 		return Result;

	mov	rax, rdx
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 324  : 		++*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 325  : 		return Result;

	mov	rax, rdx
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,0>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,0>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 201  : 	}

	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 194  : 	}

	ret	0
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 183  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 184  : 		this->value[2] = m[2];

	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [rdx+32]
	mov	DWORD PTR [rcx+32], eax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 177  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 169  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 161  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 153  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	QWORD PTR [rbx], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 145  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 137  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 129  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 75   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 76   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 77   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 24
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T3[rsp+8], xmm3
	mov	eax, DWORD PTR $T3[rsp+8]

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T2[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	unpcklps xmm0, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movsd	QWORD PTR [rcx+12], xmm0
	movss	xmm0, DWORD PTR z2$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T2[rsp+8]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	mov	DWORD PTR [rcx+32], eax

; 64   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 332  : 		--*this;
; 333  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 324  : 		++*this;
; 325  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,1>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,1>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 201  : 	}

	ret	0
??A?$tmat3x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 194  : 	}

	ret	0
??A?$tmat3x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$00@glm@@SAHXZ PROC			; glm::tmat3x3<double,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$00@glm@@SAHXZ ENDP			; glm::tmat3x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 183  : 		this->value[1] = m[1];
; 184  : 		this->value[2] = m[2];
; 185  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [rdx+64]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 177  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 161  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 153  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	xor	edx, edx
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 145  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 137  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 129  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@00@Z PROC ; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@00@Z ENDP ; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 40					; 00000028H
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T3[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T3[rsp+16]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T2[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm0, QWORD PTR z2$[rsp]
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T2[rsp+16]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+40], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	QWORD PTR [rcx+64], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 96
scalar$ = 104
??0?$tmat3x3@N$00@glm@@QEAA@N@Z PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z	; glm::tvec3<double,1>::tvec3<double,1><double,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,double,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHN@?$tvec3@N$00@glm@@QEAA@HHN@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,double>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
??0?$tmat3x3@N$00@glm@@QEAA@XZ PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$00@glm@@QEAA@XZ ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 332  : 		--*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 333  : 		return Result;

	mov	rax, rdx
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 324  : 		++*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 325  : 		return Result;

	mov	rax, rdx
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,1>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,1>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 201  : 	}

	ret	0
??A?$tmat3x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 194  : 	}

	ret	0
??A?$tmat3x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$00@glm@@SAHXZ PROC			; glm::tmat3x3<float,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$00@glm@@SAHXZ ENDP			; glm::tmat3x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 183  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 184  : 		this->value[2] = m[2];

	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [rdx+32]
	mov	DWORD PTR [rcx+32], eax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 177  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 169  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 161  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 153  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	QWORD PTR [rbx], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 145  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 137  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 129  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@00@Z PROC ; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 75   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 76   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 77   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@00@Z ENDP ; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 24
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T3[rsp+8], xmm3
	mov	eax, DWORD PTR $T3[rsp+8]

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T2[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	unpcklps xmm0, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movsd	QWORD PTR [rcx+12], xmm0
	movss	xmm0, DWORD PTR z2$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T2[rsp+8]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	mov	DWORD PTR [rcx+32], eax

; 64   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x3@M$00@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z	; glm::tvec3<float,1>::tvec3<float,1><float,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,float,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHM@?$tvec3@M$00@glm@@QEAA@HHM@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,float>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x3@M$00@glm@@QEAA@XZ PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$00@glm@@QEAA@XZ ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 332  : 		--*this;
; 333  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 324  : 		++*this;
; 325  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm0, QWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movsd	QWORD PTR [rdx+64], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,2>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	subsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<double,2>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+48], xmm1
	movsd	xmm1, QWORD PTR [rcx+64]
	addsd	xmm1, xmm2
	movsd	QWORD PTR [rcx+64], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 201  : 	}

	ret	0
??A?$tmat3x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 194  : 	}

	ret	0
??A?$tmat3x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$01@glm@@SAHXZ PROC			; glm::tmat3x3<double,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$01@glm@@SAHXZ ENDP			; glm::tmat3x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 183  : 		this->value[1] = m[1];
; 184  : 		this->value[2] = m[2];
; 185  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [rdx+64]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 177  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 169  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 161  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+32]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 153  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	xor	edx, edx
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 145  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 137  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 129  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@00@Z PROC ; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r11
	mov	QWORD PTR [rax-8], r11
	mov	QWORD PTR [rax], r11
	lea	rax, QWORD PTR [rax+24]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	xmm1, QWORD PTR [r9+16]
	movsd	QWORD PTR [rcx+64], xmm1
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@00@Z ENDP ; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
x2$ = 104
y2$ = 112
z2$ = 120
??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 40					; 00000028H
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T3[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T3[rsp+16]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T2[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y2$[rsp]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm0, QWORD PTR z2$[rsp]
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T2[rsp+16]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+40], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+48], xmm0
	movsd	QWORD PTR [rcx+64], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 96
scalar$ = 104
??0?$tmat3x3@N$01@glm@@QEAA@N@Z PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z	; glm::tvec3<double,2>::tvec3<double,2><double,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,double,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHN@?$tvec3@N$01@glm@@QEAA@HHN@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,double>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
??0?$tmat3x3@N$01@glm@@QEAA@XZ PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+40], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+48], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+64], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@N$01@glm@@QEAA@XZ ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator--, COMDAT

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 332  : 		--*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 333  : 		return Result;

	mov	rax, rdx
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 334  : 	}

	ret	0
??F?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator++, COMDAT

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+32]
	movups	xmm1, XMMWORD PTR [rcx+16]

; 324  : 		++*this;

	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	mov	DWORD PTR [rdx+32], eax

; 325  : 		return Result;

	mov	rax, rdx
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 326  : 	}

	ret	0
??E?$tmat3x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,2>::operator--, COMDAT

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x3<float,2>::operator++, COMDAT

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addps	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movss	xmm1, DWORD PTR [rcx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx+32], xmm1

; 309  : 	}

	ret	0
??E?$tmat3x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 201  : 	}

	ret	0
??A?$tmat3x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 194  : 	}

	ret	0
??A?$tmat3x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$01@glm@@SAHXZ PROC			; glm::tmat3x3<float,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$01@glm@@SAHXZ ENDP			; glm::tmat3x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 181  : 	{

	mov	r8d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 183  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 184  : 		this->value[2] = m[2];

	movsd	xmm0, QWORD PTR [rdx+24]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [rdx+32]
	mov	DWORD PTR [rcx+32], eax

; 185  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 173  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 175  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 176  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 177  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 165  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 167  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 168  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 169  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 157  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 159  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 161  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 149  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 151  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 152  : 		this->value[2] = col_type(m[2], 1);

	lea	rdx, QWORD PTR [rdi+16]
	mov	r8d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 153  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 141  : 	{

$LN19:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	lea	r9d, QWORD PTR [r8+1]
	movsd	QWORD PTR [rbx], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rbx+8], eax
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	xor	edx, edx
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 145  : 	}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 133  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 135  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 136  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 137  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 125  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 127  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 129  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@00@Z PROC ; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 73   : 	{

	mov	r10d, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r11d, r11d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r11
	mov	DWORD PTR [rax], r11d
	lea	rax, QWORD PTR [rax+12]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 75   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 76   : 		this->value[2] = v2;

	movsd	xmm0, QWORD PTR [r9]
	movsd	QWORD PTR [rcx+24], xmm0
	mov	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+32], eax

; 77   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@00@Z ENDP ; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
$T3 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
x2$ = 88
y2$ = 96
z2$ = 104
??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 60   : 	{

$LN21:
	sub	rsp, 24
	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T3[rsp+8], xmm3
	mov	eax, DWORD PTR $T3[rsp+8]

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T2[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	unpcklps xmm0, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movsd	QWORD PTR [rcx+12], xmm0
	movss	xmm0, DWORD PTR z2$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T2[rsp+8]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+24], xmm0
	mov	DWORD PTR [rcx+32], eax

; 64   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x3@M$01@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 47   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z	; glm::tvec3<float,2>::tvec3<float,2><float,int,int>

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,float,int>

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movaps	xmm3, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHM@?$tvec3@M$01@glm@@QEAA@HHM@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,float>

; 51   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x3@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 43   : 	{}

	mov	edx, 3
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3
	mov	rax, rcx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x3@M$01@glm@@QEAA@XZ PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 3
$LL4@tmat3x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+24], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x3@M$01@glm@@QEAA@XZ ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 310  : 	}

	ret	0
??E?$tmat3x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,0>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 302  : 	}

	ret	0
??F?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,0>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 293  : 	}

	ret	0
??E?$tmat3x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat3x2<double,0>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat3x2<double,0>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 173  : 		this->value[1] = m[1];
; 174  : 		this->value[2] = m[2];
; 175  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 123  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@00@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@00@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@N$0A@@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z	; glm::tvec2<double,0>::tvec2<double,0><double,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z	; glm::tvec2<double,0>::tvec2<double,0><int,double>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 310  : 	}

	ret	0
??E?$tmat3x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,0>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,0>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	ret	0
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 192  : 	}

	ret	0
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 173  : 		this->value[1] = m[1];

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 174  : 		this->value[2] = m[2];

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 175  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 159  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 151  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 123  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL18@tmat3x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL18@tmat3x2

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 127  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@00@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 73   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 74   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+16], rax

; 75   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@00@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
$T3 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);
; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T3[rsp], xmm1

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movss	DWORD PTR $T3[rsp+4], xmm2
	mov	rax, QWORD PTR $T3[rsp]
	movss	DWORD PTR $T2[rsp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T2[rsp], xmm3
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx+8], rax
	movss	DWORD PTR $T1[rsp], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 62   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
this$ = 64
scalar$ = 72
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
??0?$tmat3x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 310  : 	}

	ret	0
??E?$tmat3x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,1>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 302  : 	}

	ret	0
??F?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,1>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 293  : 	}

	ret	0
??E?$tmat3x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$00@glm@@SAHXZ PROC			; glm::tmat3x2<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$00@glm@@SAHXZ ENDP			; glm::tmat3x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 173  : 		this->value[1] = m[1];
; 174  : 		this->value[2] = m[2];
; 175  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 123  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@00@Z PROC ; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@00@Z ENDP ; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@N$00@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x2@N$00@glm@@QEAA@N@Z PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z	; glm::tvec2<double,1>::tvec2<double,1><double,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z	; glm::tvec2<double,1>::tvec2<double,1><int,double>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x2@N$00@glm@@QEAA@XZ PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@N$00@glm@@QEAA@XZ ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 310  : 	}

	ret	0
??E?$tmat3x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,1>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,1>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	ret	0
??A?$tmat3x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 192  : 	}

	ret	0
??A?$tmat3x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$00@glm@@SAHXZ PROC			; glm::tmat3x2<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$00@glm@@SAHXZ ENDP			; glm::tmat3x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 173  : 		this->value[1] = m[1];

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 174  : 		this->value[2] = m[2];

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 175  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 159  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 151  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 123  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL18@tmat3x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL18@tmat3x2

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 127  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@00@Z PROC ; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 73   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 74   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+16], rax

; 75   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@00@Z ENDP ; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
$T3 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@M$00@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);
; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T3[rsp], xmm1

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movss	DWORD PTR $T3[rsp+4], xmm2
	mov	rax, QWORD PTR $T3[rsp]
	movss	DWORD PTR $T2[rsp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T2[rsp], xmm3
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx+8], rax
	movss	DWORD PTR $T1[rsp], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 62   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
this$ = 64
scalar$ = 72
??0?$tmat3x2@M$00@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z	; glm::tvec2<float,1>::tvec2<float,1><float,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z	; glm::tvec2<float,1>::tvec2<float,1><int,float>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
??0?$tmat3x2@M$00@glm@@QEAA@XZ PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>
	mov	rcx, QWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat3x2@M$00@glm@@QEAA@XZ ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 318  : 	}

	ret	0
??F?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 310  : 	}

	ret	0
??E?$tmat3x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,2>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 302  : 	}

	ret	0
??F?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<double,2>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 293  : 	}

	ret	0
??E?$tmat3x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 199  : 	}

	ret	0
??A?$tmat3x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 192  : 	}

	ret	0
??A?$tmat3x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$01@glm@@SAHXZ PROC			; glm::tmat3x2<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$01@glm@@SAHXZ ENDP			; glm::tmat3x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 173  : 		this->value[1] = m[1];
; 174  : 		this->value[2] = m[2];
; 175  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+64]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
m$ = 72
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 123  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@00@Z PROC ; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r9]
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@00@Z ENDP ; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@N$01@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movaps	xmm0, xmm1

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm2
	movdqu	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR y2$[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	movsd	xmm0, QWORD PTR x2$[rsp]
	unpcklpd xmm0, xmm1
	movdqu	XMMWORD PTR [rcx+32], xmm0
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 80
scalar$ = 88
??0?$tmat3x2@N$01@glm@@QEAA@N@Z PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z	; glm::tvec2<double,2>::tvec2<double,2><double,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T2[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z	; glm::tvec2<double,2>::tvec2<double,2><int,double>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
this$ = 64
??0?$tmat3x2@N$01@glm@@QEAA@XZ PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx+16], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+32], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@N$01@glm@@QEAA@XZ ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator--, COMDAT

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 316  : 		--*this;
; 317  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator++, COMDAT

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 308  : 		++*this;
; 309  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 310  : 	}

	ret	0
??E?$tmat3x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,2>::operator--, COMDAT

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat3x2<float,2>::operator++, COMDAT

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	ret	0
??A?$tmat3x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat3x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 192  : 	}

	ret	0
??A?$tmat3x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$01@glm@@SAHXZ PROC			; glm::tmat3x2<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$01@glm@@SAHXZ ENDP			; glm::tmat3x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 179  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 181  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 182  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 183  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 171  : 	{

	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 173  : 		this->value[1] = m[1];

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax

; 174  : 		this->value[2] = m[2];

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax

; 175  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 163  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 165  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 166  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 167  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 155  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 157  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 159  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 147  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 149  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[rsp], 0
	and	DWORD PTR $T1[rsp+4], 0
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rbx+16], rax

; 151  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 139  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 141  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 142  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+32]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 143  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
m$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 131  : 	{

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 133  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 134  : 		this->value[2] = col_type(m[2]);

	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 135  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 8
this$ = 8
m$ = 16
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 123  : 	{

	mov	r9, rdx
	mov	rax, rcx
	mov	r8d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	rdx, rcx
	sub	r9, rcx
	mov	r8d, 2
$LL18@tmat3x2:
	mov	rax, QWORD PTR [r9+rdx]
	mov	QWORD PTR [rdx], rax
	lea	rdx, QWORD PTR [rdx+8]
	sub	r8, 1
	jne	SHORT $LL18@tmat3x2

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+4], r8d
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 127  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@00@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@00@Z PROC ; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 71   : 	{

	mov	rax, rcx
	mov	r10d, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 73   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 74   : 		this->value[2] = v2;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx+16], rax

; 75   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@00@Z ENDP ; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
$T3 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
x2$ = 48
y2$ = 56
??0?$tmat3x2@M$01@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 58   : 	{

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);
; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T3[rsp], xmm1

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm1, DWORD PTR y2$[rsp]
	movss	DWORD PTR $T3[rsp+4], xmm2
	mov	rax, QWORD PTR $T3[rsp]
	movss	DWORD PTR $T2[rsp+4], xmm0
	movss	xmm0, DWORD PTR x2$[rsp]
	mov	QWORD PTR [rcx], rax
	movss	DWORD PTR $T2[rsp], xmm3
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx+8], rax
	movss	DWORD PTR $T1[rsp], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+16], rax

; 62   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 64
this$ = 64
scalar$ = 72
??0?$tmat3x2@M$01@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 45   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z	; glm::tvec2<float,2>::tvec2<float,2><float,int>

; 47   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z	; glm::tvec2<float,2>::tvec2<float,2><int,float>

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 49   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat3x2@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 41   : 	{}

	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2
	mov	rax, rcx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
this$ = 48
??0?$tmat3x2@M$01@glm@@QEAA@XZ PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 3
$LL4@tmat3x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T3[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 14   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx+8], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>
	mov	rcx, QWORD PTR [rax]

; 16   : #			endif
; 17   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+16], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat3x2@M$01@glm@@QEAA@XZ ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+r8*8], xmm0
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 278  : 		return Result;

	mov	rax, rdx

; 279  : 	}

	ret	0
??F?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+r8*8], xmm1
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 270  : 		return Result;

	mov	rax, rdx

; 271  : 	}

	ret	0
??E?$tmat2x4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,0>::operator--, COMDAT

; 259  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 260  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 261  : 		--this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 262  : 		return *this;

	mov	rax, rcx

; 263  : 	}

	ret	0
??F?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,0>::operator++, COMDAT

; 251  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 252  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 253  : 		++this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 254  : 		return *this;

	mov	rax, rcx

; 255  : 	}

	ret	0
??E?$tmat2x4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat2x4<double,0>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat2x4<double,0>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<double,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 154  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 147  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 133  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 126  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 112  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 105  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@0@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	mov	QWORD PTR [rax+8], r10
	lea	rax, QWORD PTR [rax+32]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@0@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
??0?$tmat2x4@N$0A@@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 54   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
scalar$ = 56
??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	movaps	xmm3, xmm1
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[rsp], xmm3
	movups	XMMWORD PTR $T1[rsp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T1[rsp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR $T1[rsp+24], xmm2
	xorps	xmm0, xmm0
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+16], xmm1
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
??0?$tmat2x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
$LL4@tmat2x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;
; 278  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 279  : 	}

	ret	0
??F?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;
; 270  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 271  : 	}

	ret	0
??E?$tmat2x4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,0>::operator--, COMDAT

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,0>::operator++, COMDAT

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 154  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 147  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 133  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 126  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 112  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	movups	xmm0, XMMWORD PTR [rax]

; 105  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@0@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@0@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 54   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rsp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T2[rsp+12], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR $T2[rsp], xmm1
	movss	DWORD PTR $T2[rsp+4], xmm2
	movss	DWORD PTR $T2[rsp+8], xmm3
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T1[rsp+4], xmm1
	movss	xmm1, DWORD PTR w1$[rsp]
	movss	DWORD PTR $T1[rsp+12], xmm1
	movss	DWORD PTR $T1[rsp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
scalar$ = 40
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[rsp+4], r8d

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	and	DWORD PTR $T2[rsp+8], r8d
	and	DWORD PTR $T2[rsp+12], r8d
	movss	DWORD PTR $T2[rsp], xmm1
	movups	xmm0, XMMWORD PTR $T2[rsp]
	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+8], r8d
	and	DWORD PTR $T1[rsp+12], r8d
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
??0?$tmat2x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 2
$LL4@tmat2x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+r8*8], xmm0
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 278  : 		return Result;

	mov	rax, rdx

; 279  : 	}

	ret	0
??F?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+r8*8], xmm1
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 270  : 		return Result;

	mov	rax, rdx

; 271  : 	}

	ret	0
??E?$tmat2x4@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,1>::operator--, COMDAT

; 259  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 260  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 261  : 		--this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 262  : 		return *this;

	mov	rax, rcx

; 263  : 	}

	ret	0
??F?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,1>::operator++, COMDAT

; 251  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 252  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 253  : 		++this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 254  : 		return *this;

	mov	rax, rcx

; 255  : 	}

	ret	0
??E?$tmat2x4@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@N$00@glm@@QEBAAEBU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@N$00@glm@@QEAAAEAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$00@glm@@SAHXZ PROC			; glm::tmat2x4<double,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$00@glm@@SAHXZ ENDP			; glm::tmat2x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 154  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 147  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 133  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 126  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 112  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$00@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 105  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@0@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	mov	QWORD PTR [rax+8], r10
	lea	rax, QWORD PTR [rax+32]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@0@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
??0?$tmat2x4@N$00@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 54   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
scalar$ = 56
??0?$tmat2x4@N$00@glm@@QEAA@N@Z PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	movaps	xmm3, xmm1
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[rsp], xmm3
	movups	XMMWORD PTR $T1[rsp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T1[rsp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR $T1[rsp+24], xmm2
	xorps	xmm0, xmm0
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+16], xmm1
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
??0?$tmat2x4@N$00@glm@@QEAA@XZ PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
$LL4@tmat2x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$00@glm@@QEAA@HHHH@Z	; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x4@N$00@glm@@QEAA@XZ ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;
; 278  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 279  : 	}

	ret	0
??F?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;
; 270  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 271  : 	}

	ret	0
??E?$tmat2x4@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,1>::operator--, COMDAT

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,1>::operator++, COMDAT

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$00@glm@@SAHXZ PROC			; glm::tmat2x4<float,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$00@glm@@SAHXZ ENDP			; glm::tmat2x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 154  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 147  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 133  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 126  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 112  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$00@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
	movups	xmm0, XMMWORD PTR [rax]

; 105  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@0@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@0@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 54   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rsp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T2[rsp+12], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR $T2[rsp], xmm1
	movss	DWORD PTR $T2[rsp+4], xmm2
	movss	DWORD PTR $T2[rsp+8], xmm3
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T1[rsp+4], xmm1
	movss	xmm1, DWORD PTR w1$[rsp]
	movss	DWORD PTR $T1[rsp+12], xmm1
	movss	DWORD PTR $T1[rsp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
scalar$ = 40
??0?$tmat2x4@M$00@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[rsp+4], r8d

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	and	DWORD PTR $T2[rsp+8], r8d
	and	DWORD PTR $T2[rsp+12], r8d
	movss	DWORD PTR $T2[rsp], xmm1
	movups	xmm0, XMMWORD PTR $T2[rsp]
	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+8], r8d
	and	DWORD PTR $T1[rsp+12], r8d
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
??0?$tmat2x4@M$00@glm@@QEAA@XZ PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 2
$LL4@tmat2x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x4@M$00@glm@@QEAA@XZ ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+r8*8], xmm0
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 278  : 		return Result;

	mov	rax, rdx

; 279  : 	}

	ret	0
??F?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	mov	r8d, eax
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	XMMWORD PTR [rdx+48], xmm1
$LL9@operator:
	movups	xmm0, XMMWORD PTR [rcx+r8*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+r8*8], xmm1
	add	r8, 2
	cmp	r8, 4
	jl	SHORT $LL9@operator
$LL11@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL11@operator

; 270  : 		return Result;

	mov	rax, rdx

; 271  : 	}

	ret	0
??E?$tmat2x4@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,2>::operator--, COMDAT

; 259  : 	{

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 260  : 		--this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 261  : 		--this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [rcx+rax*8+32], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 262  : 		return *this;

	mov	rax, rcx

; 263  : 	}

	ret	0
??F?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<double,2>::operator++, COMDAT

; 251  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 252  : 		++this->value[0];

	xor	eax, eax
	mov	edx, eax
$LL7@operator:
	movups	xmm0, XMMWORD PTR [rcx+rdx*8]
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+rdx*8], xmm0
	add	rdx, 2
	cmp	rdx, 4
	jl	SHORT $LL7@operator
$LL9@operator:

; 253  : 		++this->value[1];

	movups	xmm0, XMMWORD PTR [rcx+rax*8+32]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8+32], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL9@operator

; 254  : 		return *this;

	mov	rax, rcx

; 255  : 	}

	ret	0
??E?$tmat2x4@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@N$01@glm@@QEBAAEBU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 5
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@N$01@glm@@QEAAAEAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$01@glm@@SAHXZ PROC			; glm::tmat2x4<double,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$01@glm@@SAHXZ ENDP			; glm::tmat2x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 154  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 147  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 133  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 126  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+24]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 112  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0NHH$01@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 105  : 	}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@0@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	mov	QWORD PTR [rax+8], r10
	lea	rax, QWORD PTR [rax+32]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@0@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@NNNNNNNN@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
z0$ = 32
w0$ = 40
x1$ = 48
y1$ = 56
z1$ = 64
w1$ = 72
??0?$tmat2x4@N$01@glm@@QEAA@NNNNNNNN@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 54   : 	{

	movaps	xmm4, xmm2
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR w0$[rsp]
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm4
	movaps	xmm1, xmm3
	unpcklpd xmm1, xmm2

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR w1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	movups	XMMWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR y1$[rsp]
	unpcklpd xmm0, xmm1
	movsd	xmm1, QWORD PTR z1$[rsp]
	unpcklpd xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 48
scalar$ = 56
??0?$tmat2x4@N$01@glm@@QEAA@N@Z PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	movaps	xmm3, xmm1
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[rsp], xmm3
	movups	XMMWORD PTR $T1[rsp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	movups	xmm0, XMMWORD PTR $T1[rsp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR $T1[rsp+24], xmm2
	xorps	xmm0, xmm0
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
	unpcklpd xmm0, xmm3
	movups	XMMWORD PTR [rcx+16], xmm1
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	mov	QWORD PTR [rax+8], r8
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 96
??0?$tmat2x4@N$01@glm@@QEAA@XZ PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	mov	edx, 2
$LL4@tmat2x4:
	and	QWORD PTR [rax-16], 0
	and	QWORD PTR [rax-8], 0
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+32]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	call	??$?0HHHH@?$tvec4@N$01@glm@@QEAA@HHHH@Z	; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movups	XMMWORD PTR [rbx+48], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x4@N$01@glm@@QEAA@XZ ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator--, COMDAT

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 277  : 		--*this;
; 278  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 279  : 	}

	ret	0
??F?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator++, COMDAT

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 269  : 		++*this;
; 270  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 271  : 	}

	ret	0
??E?$tmat2x4@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,2>::operator--, COMDAT

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x4<float,2>::operator++, COMDAT

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 170  : 	}

	ret	0
??A?$tmat2x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 163  : 	}

	ret	0
??A?$tmat2x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$01@glm@@SAHXZ PROC			; glm::tmat2x4<float,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$01@glm@@SAHXZ ENDP			; glm::tmat2x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 151  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 153  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 154  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 144  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 147  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 137  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 139  : 		this->value[1] = m[1];
; 140  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 130  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 133  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 123  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 125  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 126  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 116  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 118  : 		this->value[1] = col_type(m[1]);
; 119  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 109  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>

; 111  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+12]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 112  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 102  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0MHH$01@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
	movups	xmm0, XMMWORD PTR [rax]

; 105  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@0@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 61   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@0@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
w0$ = 64
x1$ = 72
y1$ = 80
z1$ = 88
w1$ = 96
??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 54   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR w0$[rsp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	rax, rcx
	movss	DWORD PTR $T2[rsp+12], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR $T2[rsp], xmm1
	movss	DWORD PTR $T2[rsp+4], xmm2
	movss	DWORD PTR $T2[rsp+8], xmm3
	movups	xmm1, XMMWORD PTR $T2[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movdqu	XMMWORD PTR [rcx], xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	DWORD PTR $T1[rsp+4], xmm1
	movss	xmm1, DWORD PTR w1$[rsp]
	movss	DWORD PTR $T1[rsp+12], xmm1
	movss	DWORD PTR $T1[rsp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
scalar$ = 40
??0?$tmat2x4@M$01@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 42   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[rsp+4], r8d

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	rax, rcx
	and	DWORD PTR $T2[rsp+8], r8d
	and	DWORD PTR $T2[rsp+12], r8d
	movss	DWORD PTR $T2[rsp], xmm1
	movups	xmm0, XMMWORD PTR $T2[rsp]
	and	DWORD PTR $T1[rsp], r8d
	and	DWORD PTR $T1[rsp+8], r8d
	and	DWORD PTR $T1[rsp+12], r8d
	movdqu	XMMWORD PTR [rcx], xmm0
	movss	DWORD PTR $T1[rsp+4], xmm1
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movdqu	XMMWORD PTR [rcx+16], xmm0
	add	rsp, 24
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x4@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x4:
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4
	mov	rax, rcx
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 80
??0?$tmat2x4@M$01@glm@@QEAA@XZ PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 2
$LL4@tmat2x4:
	and	DWORD PTR [rax-8], 0
	and	DWORD PTR [rax-4], 0
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	and	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	and	DWORD PTR [rsp+32], 0
	lea	rcx, QWORD PTR $T1[rsp]
	xor	r9d, r9d
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x4@M$01@glm@@QEAA@XZ ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 278  : 	}

	ret	0
??F?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 270  : 	}

	ret	0
??E?$tmat2x3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,0>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 262  : 	}

	ret	0
??F?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,0>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 254  : 	}

	ret	0
??E?$tmat2x3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat2x3<double,0>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 169  : 	}

	ret	0
??A?$tmat2x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat2x3<double,0>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 162  : 	}

	ret	0
??A?$tmat2x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<double,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 152  : 		this->value[1] = m[1];
; 153  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 146  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 139  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 132  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 125  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 118  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 110  : 		this->value[1] = col_type(m[1]);
; 111  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 104  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+24]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@0@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T2[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T2[rsp+16]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 96
scalar$ = 104
??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$0A@@glm@@QEAA@NHH@Z	; glm::tvec3<double,0>::tvec3<double,0><double,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$0A@@glm@@QEAA@HNH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,double,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
??0?$tmat2x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 278  : 	}

	ret	0
??F?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 270  : 	}

	ret	0
??E?$tmat2x3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,0>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,0>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 169  : 	}

	ret	0
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 162  : 	}

	ret	0
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 152  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 153  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 146  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 139  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 132  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 125  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 118  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 111  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 104  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r10
	mov	DWORD PTR [rax], r10d
	lea	rax, QWORD PTR [rax+12]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 62   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 63   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@0@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T2[rsp+8], xmm3
	mov	eax, DWORD PTR $T2[rsp+8]

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 56   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 278  : 	}

	ret	0
??F?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 270  : 	}

	ret	0
??E?$tmat2x3@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,1>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 262  : 	}

	ret	0
??F?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,1>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 254  : 	}

	ret	0
??E?$tmat2x3@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 169  : 	}

	ret	0
??A?$tmat2x3@N$00@glm@@QEBAAEBU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 162  : 	}

	ret	0
??A?$tmat2x3@N$00@glm@@QEAAAEAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$00@glm@@SAHXZ PROC			; glm::tmat2x3<double,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$00@glm@@SAHXZ ENDP			; glm::tmat2x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 152  : 		this->value[1] = m[1];
; 153  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 146  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 139  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 132  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 125  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 118  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 110  : 		this->value[1] = col_type(m[1]);
; 111  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z PROC ; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$00@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 104  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tmat2x2@N$00@1@@Z ENDP ; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+24]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@0@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T2[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T2[rsp+16]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 96
scalar$ = 104
??0?$tmat2x3@N$00@glm@@QEAA@N@Z PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$00@glm@@QEAA@NHH@Z	; glm::tvec3<double,1>::tvec3<double,1><double,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$00@glm@@QEAA@HNH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,double,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
??0?$tmat2x3@N$00@glm@@QEAA@XZ PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$00@glm@@QEAA@HHH@Z	; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@N$00@glm@@QEAA@XZ ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 278  : 	}

	ret	0
??F?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 270  : 	}

	ret	0
??E?$tmat2x3@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,1>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,1>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 169  : 	}

	ret	0
??A?$tmat2x3@M$00@glm@@QEBAAEBU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 162  : 	}

	ret	0
??A?$tmat2x3@M$00@glm@@QEAAAEAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$00@glm@@SAHXZ PROC			; glm::tmat2x3<float,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$00@glm@@SAHXZ ENDP			; glm::tmat2x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 152  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 153  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 146  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 139  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 132  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 125  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 118  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 111  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z PROC ; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$00@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 104  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tmat2x2@M$00@1@@Z ENDP ; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r10
	mov	DWORD PTR [rax], r10d
	lea	rax, QWORD PTR [rax+12]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 62   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 63   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@0@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T2[rsp+8], xmm3
	mov	eax, DWORD PTR $T2[rsp+8]

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 56   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x3@M$00@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$00@glm@@QEAA@MHH@Z	; glm::tvec3<float,1>::tvec3<float,1><float,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$00@glm@@QEAA@HMH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,float,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x3@M$00@glm@@QEAA@XZ PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$00@glm@@QEAA@HHH@Z	; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x3@M$00@glm@@QEAA@XZ ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 278  : 	}

	ret	0
??F?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx+32], xmm0
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 270  : 	}

	ret	0
??E?$tmat2x3@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,2>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm1, xmm2
	subpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	subpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 262  : 	}

	ret	0
??F?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<double,2>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm1, xmm2
	addpd	xmm0, xmm2
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+32]
	addpd	xmm1, xmm2
	movups	XMMWORD PTR [rcx+32], xmm1

; 254  : 	}

	ret	0
??E?$tmat2x3@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 169  : 	}

	ret	0
??A?$tmat2x3@N$01@glm@@QEBAAEBU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*8]

; 162  : 	}

	ret	0
??A?$tmat2x3@N$01@glm@@QEAAAEAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$01@glm@@SAHXZ PROC			; glm::tmat2x3<double,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$01@glm@@SAHXZ ENDP			; glm::tmat2x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 152  : 		this->value[1] = m[1];
; 153  : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+24]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [rdx+40]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 146  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 139  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 132  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 125  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0N$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 118  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	mov	QWORD PTR [rax], r9
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	movups	xmm0, XMMWORD PTR [rdx]

; 110  : 		this->value[1] = col_type(m[1]);
; 111  : 	}

	mov	rax, rcx
	movsd	xmm2, QWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm2
	movups	xmm0, XMMWORD PTR [rdx+24]
	movsd	xmm2, QWORD PTR [rdx+40]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm2
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
m$ = 88
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z PROC ; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+16]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0NH$01@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 104  : 	}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tmat2x2@N$01@1@@Z ENDP ; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r10
	mov	QWORD PTR [rax-8], r10
	mov	QWORD PTR [rax], r10
	lea	rax, QWORD PTR [rax+24]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	movsd	QWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	xmm1, QWORD PTR [r8+16]
	movsd	QWORD PTR [rcx+40], xmm1
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@0@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 48
x0$ = 56
y0$ = 64
z0$ = 72
x1$ = 80
y1$ = 88
z1$ = 96
??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 40					; 00000028H
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movsd	QWORD PTR $T2[rsp+16], xmm3
	movsd	xmm1, QWORD PTR $T2[rsp+16]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	rax, rcx
	unpcklpd xmm0, xmm2
	movsd	xmm2, QWORD PTR y1$[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm0, QWORD PTR z1$[rsp]
	movsd	QWORD PTR $T1[rsp+16], xmm0
	movsd	xmm0, QWORD PTR x1$[rsp]
	unpcklpd xmm0, xmm2
	movsd	QWORD PTR [rcx+16], xmm1
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	movups	XMMWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx+40], xmm1
	add	rsp, 40					; 00000028H
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@NNNNNN@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 96
scalar$ = 104
??0?$tmat2x3@N$01@glm@@QEAA@N@Z PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	lea	rax, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0NHH@?$tvec3@N$01@glm@@QEAA@NHH@Z	; glm::tvec3<double,2>::tvec3<double,2><double,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HNH@?$tvec3@N$01@glm@@QEAA@HNH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,double,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+16]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], r8
	mov	QWORD PTR [rax-8], r8
	mov	QWORD PTR [rax], r8
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
??0?$tmat2x3@N$01@glm@@QEAA@XZ PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+16]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-16], rcx
	mov	QWORD PTR [rax-8], rcx
	mov	QWORD PTR [rax], rcx
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [r9+1]
	movups	XMMWORD PTR [rbx], xmm0
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR [rbx+16], xmm1
	call	??$?0HHH@?$tvec3@N$01@glm@@QEAA@HHH@Z	; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rbx+24], xmm0
	movsd	xmm1, QWORD PTR [rax+16]

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	movsd	QWORD PTR [rbx+40], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@N$01@glm@@QEAA@XZ ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator--, COMDAT

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 276  : 		--*this;
; 277  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	subps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 278  : 	}

	ret	0
??F?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator++, COMDAT

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 268  : 		++*this;
; 269  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rdx], xmm0
	addps	xmm0, xmm2
	movsd	QWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 270  : 	}

	ret	0
??E?$tmat2x3@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,2>::operator--, COMDAT

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	subss	xmm1, xmm2
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x3<float,2>::operator++, COMDAT

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rcx+16]
	movss	xmm0, DWORD PTR [rcx+20]
	addss	xmm1, xmm2
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+16], xmm1
	movss	DWORD PTR [rcx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 169  : 	}

	ret	0
??A?$tmat2x3@M$01@glm@@QEBAAEBU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rcx+rdx*4]

; 162  : 	}

	ret	0
??A?$tmat2x3@M$01@glm@@QEAAAEAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$01@glm@@SAHXZ PROC			; glm::tmat2x3<float,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$01@glm@@SAHXZ ENDP			; glm::tmat2x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 150  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 152  : 		this->value[1] = m[1];

	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [rdx+20]
	mov	DWORD PTR [rcx+20], eax

; 153  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 145  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 146  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 136  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 138  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 139  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 131  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 132  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 122  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 124  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 125  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0M$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 118  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 108  : 	{

	mov	r8d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r9d, r9d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r9
	mov	DWORD PTR [rax], r9d
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR [rdx+8]
	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	DWORD PTR [rcx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	mov	eax, DWORD PTR [rdx+20]
	movsd	xmm0, QWORD PTR [rdx+12]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 111  : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z PROC ; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	rdi, rdx
	mov	r8d, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>

; 103  : 		this->value[1] = col_type(m[1], 0);

	lea	rdx, QWORD PTR [rdi+8]
	xor	r8d, r8d
	lea	rcx, QWORD PTR $T1[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0MH$01@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 104  : 	}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tmat2x2@M$01@1@@Z ENDP ; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 60   : 	{

	mov	r9d, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r10d, r10d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r10
	mov	DWORD PTR [rax], r10d
	lea	rax, QWORD PTR [rax+12]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	movsd	xmm0, QWORD PTR [rdx]
	movsd	QWORD PTR [rcx], xmm0
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 62   : 		this->value[1] = v1;

	movsd	xmm0, QWORD PTR [r8]
	movsd	QWORD PTR [rcx+12], xmm0
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rcx+20], eax

; 63   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@0@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
x0$ = 40
y0$ = 48
z0$ = 56
x1$ = 64
y1$ = 72
z1$ = 80
??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 53   : 	{

$LN19:
	sub	rsp, 24
	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movaps	xmm0, xmm1
	movss	DWORD PTR $T2[rsp+8], xmm3
	mov	eax, DWORD PTR $T2[rsp+8]

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR y1$[rsp]
	unpcklps xmm0, xmm2
	movsd	QWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR $T1[rsp+8], xmm0
	movss	xmm0, DWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsd	QWORD PTR [rcx+12], xmm0
	mov	DWORD PTR [rcx+20], eax

; 56   : 	}

	mov	rax, rcx
	add	rsp, 24
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@MMMMMM@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x3@M$01@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 42   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	lea	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	movaps	xmm6, xmm1
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	call	??$?0MHH@?$tvec3@M$01@glm@@QEAA@MHH@Z	; glm::tvec3<float,2>::tvec3<float,2><float,int,int>

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	movaps	xmm2, xmm6
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HMH@?$tvec3@M$01@glm@@QEAA@HMH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,float,int>

; 45   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x3@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 38   : 	{}

	mov	edx, 2
	lea	rax, QWORD PTR [rcx+8]
	xor	r8d, r8d
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], r8
	mov	DWORD PTR [rax], r8d
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3
	mov	rax, rcx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x3@M$01@glm@@QEAA@XZ PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT

; 11   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+8]
	xor	ecx, ecx
	mov	edx, 2
$LL4@tmat2x3:
	mov	QWORD PTR [rax-8], rcx
	mov	DWORD PTR [rax], ecx
	lea	rax, QWORD PTR [rax+12]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	lea	edx, QWORD PTR [r9+1]
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx], xmm0
	lea	r8d, QWORD PTR [r9+1]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+8], eax
	call	??$?0HHH@?$tvec3@M$01@glm@@QEAA@HHH@Z	; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rbx+12], xmm0
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rbx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x3@M$01@glm@@QEAA@XZ ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,0>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 276  : 	}

	ret	0
??F?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,0>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 268  : 	}

	ret	0
??E?$tmat2x2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat2x2<double,0>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 169  : 	}

	ret	0
??A?$tmat2x2@N$0A@@glm@@QEBAAEBU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z PROC ; glm::tmat2x2<double,0>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 162  : 	}

	ret	0
??A?$tmat2x2@N$0A@@glm@@QEAAAEAU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<double,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 136  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 122  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
	movups	xmm0, XMMWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@0@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@0@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBN000@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movsd	xmm0, QWORD PTR [rax]

; 58   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR [r9]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@AEBN000@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH@?$tvec2@N$0A@@glm@@QEAA@NH@Z	; glm::tvec2<double,0>::tvec2<double,0><double,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$0A@@glm@@QEAA@HN@Z	; glm::tvec2<double,0>::tvec2<double,0><int,double>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,0>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,0>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	ret	0
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 162  : 	}

	ret	0
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 136  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 122  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	mov	rcx, QWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 64   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 65   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	movss	DWORD PTR $T2[rsp], xmm0
	movss	DWORD PTR $T2[rsp+4], xmm1
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx], rax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+8], rax

; 58   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
??0?$tmat2x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@N$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,1>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 276  : 	}

	ret	0
??F?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,1>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 268  : 	}

	ret	0
??E?$tmat2x2@N$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 169  : 	}

	ret	0
??A?$tmat2x2@N$00@glm@@QEBAAEBU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 162  : 	}

	ret	0
??A?$tmat2x2@N$00@glm@@QEAAAEAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$00@glm@@SAHXZ PROC			; glm::tmat2x2<double,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$00@glm@@SAHXZ ENDP			; glm::tmat2x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x3@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x4@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 136  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x2@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x4@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 122  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x2@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat2x3@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat4x4@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z PROC ; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$00@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
	movups	xmm0, XMMWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tmat3x3@N$00@1@@Z ENDP ; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@0@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBU?$tvec2@N$00@1@0@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@N$00@glm@@QEAA@AEBN000@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movsd	xmm0, QWORD PTR [rax]

; 58   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR [r9]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@AEBN000@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x2@N$00@glm@@QEAA@N@Z PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH@?$tvec2@N$00@glm@@QEAA@NH@Z	; glm::tvec2<double,1>::tvec2<double,1><double,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$00@glm@@QEAA@HN@Z	; glm::tvec2<double,1>::tvec2<double,1><int,double>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@N@Z ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x2@N$00@glm@@QEAA@XZ PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$00@glm@@QEAA@HH@Z	; glm::tvec2<double,1>::tvec2<double,1><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@N$00@glm@@QEAA@XZ ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@M$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,1>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,1>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	ret	0
??A?$tmat2x2@M$00@glm@@QEBAAEBU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 162  : 	}

	ret	0
??A?$tmat2x2@M$00@glm@@QEAAAEAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$00@glm@@SAHXZ PROC			; glm::tmat2x2<float,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$00@glm@@SAHXZ ENDP			; glm::tmat2x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x3@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x4@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 136  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x2@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x4@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 122  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x2@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat2x3@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat4x4@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z PROC ; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$00@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
	mov	rcx, QWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tmat3x3@M$00@1@@Z ENDP ; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@0@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 64   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 65   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBU?$tvec2@M$00@1@0@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@M$00@glm@@QEAA@AEBM000@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	movss	DWORD PTR $T2[rsp], xmm0
	movss	DWORD PTR $T2[rsp+4], xmm1
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx], rax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+8], rax

; 58   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@AEBM000@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$00@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH@?$tvec2@M$00@glm@@QEAA@MH@Z	; glm::tvec2<float,1>::tvec2<float,1><float,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HM@?$tvec2@M$00@glm@@QEAA@HM@Z	; glm::tvec2<float,1>::tvec2<float,1><int,float>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
??0?$tmat2x2@M$00@glm@@QEAA@XZ PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$00@glm@@QEAA@HH@Z	; glm::tvec2<float,1>::tvec2<float,1><int,int>
	mov	rcx, QWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat2x2@M$00@glm@@QEAA@XZ ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@N$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,2>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 276  : 	}

	ret	0
??F?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<double,2>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+16], xmm1

; 268  : 	}

	ret	0
??E?$tmat2x2@N$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 169  : 	}

	ret	0
??A?$tmat2x2@N$01@glm@@QEBAAEBU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	shl	rax, 4
	add	rax, rcx

; 162  : 	}

	ret	0
??A?$tmat2x2@N$01@glm@@QEAAAEAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$01@glm@@SAHXZ PROC			; glm::tmat2x2<double,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$01@glm@@SAHXZ ENDP			; glm::tmat2x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x3@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x4@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 136  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x2@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x4@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 122  : 	{

	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	movups	xmm0, XMMWORD PTR [rdx]

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x2@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat2x3@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat4x4@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
m$ = 72
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z PROC ; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0N$01@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
	movups	xmm0, XMMWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tmat3x3@N$01@1@@Z ENDP ; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@0@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	movups	xmm0, XMMWORD PTR [rdx]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	rax, rcx
	movdqu	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [r8]
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBU?$tvec2@N$01@1@0@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@N$01@glm@@QEAA@AEBN000@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR [r8]
	movsd	xmm1, QWORD PTR [rdx]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movsd	xmm0, QWORD PTR [rax]

; 58   : 	}

	mov	rax, rcx
	movsd	xmm1, QWORD PTR [r9]
	unpcklpd xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@AEBN000@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 80
scalar$ = 88
??0?$tmat2x2@N$01@glm@@QEAA@N@Z PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0NH@?$tvec2@N$01@glm@@QEAA@NH@Z	; glm::tvec2<double,2>::tvec2<double,2><double,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	lea	rcx, QWORD PTR $T1[rsp]
	xor	edx, edx
	movups	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HN@?$tvec2@N$01@glm@@QEAA@HN@Z	; glm::tvec2<double,2>::tvec2<double,2><int,double>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movups	xmm0, XMMWORD PTR [rax]
	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@N@Z ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
this$ = 64
??0?$tmat2x2@N$01@glm@@QEAA@XZ PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	QWORD PTR [rax], 0
	and	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	movups	xmm0, XMMWORD PTR [rax]
	lea	r8d, QWORD PTR [rdx+1]
	movdqu	XMMWORD PTR [rbx], xmm0
	call	??$?0HH@?$tvec2@N$01@glm@@QEAA@HH@Z	; glm::tvec2<double,2>::tvec2<double,2><int,int>
	movups	xmm0, XMMWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	movdqu	XMMWORD PTR [rbx+16], xmm0
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@N$01@glm@@QEAA@XZ ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator--, COMDAT

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 290  : 		--*this;
; 291  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 292  : 	}

	ret	0
??F?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator++, COMDAT

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 282  : 		++*this;
; 283  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 284  : 	}

	ret	0
??E?$tmat2x2@M$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,2>::operator--, COMDAT

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ PROC		; glm::tmat2x2<float,2>::operator++, COMDAT

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [rcx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	rax, rcx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	ret	0
??A?$tmat2x2@M$01@glm@@QEBAAEBU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tmat2x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 162  : 	}

	ret	0
??A?$tmat2x2@M$01@glm@@QEAAAEAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$01@glm@@SAHXZ PROC			; glm::tmat2x2<float,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$01@glm@@SAHXZ ENDP			; glm::tmat2x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 150  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 152  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 153  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x3@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 143  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 145  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 146  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x4@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 136  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x2@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 129  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 131  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 132  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x4@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
this$ = 8
m$ = 16
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 122  : 	{

	mov	r9d, 2
	mov	r8, rcx
	mov	rax, rcx
	mov	ecx, r9d
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rcx, 1
	jne	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	rcx, r8
	sub	rdx, r8
$LL16@tmat2x2:
	mov	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rcx], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL16@tmat2x2

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	rax, r8
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x2@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 115  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 117  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 118  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat2x3@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 108  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 110  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 111  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat4x4@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
m$ = 56
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z PROC ; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 101  : 	{

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r8d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r8, 1
	jne	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>

; 103  : 		this->value[1] = col_type(m[1]);

	lea	rdx, QWORD PTR [rdi+12]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$01@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
	mov	rcx, QWORD PTR [rax]

; 104  : 	}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tmat3x3@M$01@1@@Z ENDP ; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@0@Z
_TEXT	SEGMENT
this$ = 8
v0$ = 16
v1$ = 24
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@0@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 62   : 	{

	mov	rax, rcx
	mov	r9d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r9, 1
	jne	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 64   : 		this->value[1] = v1;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 65   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBU?$tvec2@M$01@1@0@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
$T1 = 8
$T2 = 8
this$ = 8
x0$ = 16
y0$ = 24
x1$ = 32
y1$ = 40
??0?$tmat2x2@M$01@glm@@QEAA@AEBM000@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 55   : 	{

	mov	rax, rcx
	mov	r10d, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	r10, 1
	jne	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [r8]
	movss	DWORD PTR $T2[rsp], xmm0
	movss	DWORD PTR $T2[rsp+4], xmm1
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rcx], rax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR [r9]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR $T1[rsp+4], xmm1
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx+8], rax

; 58   : 	}

	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@AEBM000@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$01@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 44   : 	{

$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rbx, rcx
	movaps	xmm6, xmm1
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH@?$tvec2@M$01@glm@@QEAA@MH@Z	; glm::tvec2<float,2>::tvec2<float,2><float,int>

; 46   : 		this->value[1] = col_type(0, scalar);

	movaps	xmm2, xmm6
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HM@?$tvec2@M$01@glm@@QEAA@HM@Z	; glm::tvec2<float,2>::tvec2<float,2><int,float>

; 47   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tmat2x2@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 40   : 	{}

	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2
	mov	rax, rcx
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
this$ = 48
??0?$tmat2x2@M$01@glm@@QEAA@XZ PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT

; 13   : 		{

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rcx
	mov	edx, 2
$LL4@tmat2x2:
	and	DWORD PTR [rax], 0
	and	DWORD PTR [rax+4], 0
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	lea	rcx, QWORD PTR $T2[rsp]
	lea	edx, QWORD PTR [r8+1]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>

; 16   : 				this->value[1] = col_type(0, 1);

	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbx], rcx
	lea	r8d, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$01@glm@@QEAA@HH@Z	; glm::tvec2<float,2>::tvec2<float,2><int,int>
	mov	rcx, QWORD PTR [rax]

; 17   : #			endif
; 18   : 		}

	mov	rax, rbx
	mov	QWORD PTR [rbx+8], rcx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$tmat2x2@M$01@glm@@QEAA@XZ ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<double,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<double,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<double,0>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<double,0>::operator++, COMDAT

; 454  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 188  : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	movups	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,0>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,0>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_J$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec4<__int64,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$0A@@glm@@QEAAAEA_JH@Z PROC		; glm::tvec4<__int64,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_J$0A@@glm@@QEAAAEA_JH@Z ENDP		; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$0A@@glm@@SAHXZ PROC			; glm::tvec4<__int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec4<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<int,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<int,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<int,0>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<int,0>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$0A@@glm@@QEAAAEAHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@H$0A@@glm@@QEAAAEAHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<short,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 484  : 		--*this;

	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	dec	WORD PTR [rcx+6]
	mov	QWORD PTR [rdx], rax
	dec	ax
	mov	WORD PTR [rcx], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<short,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<short,0>::operator--, COMDAT

; 465  : 		--this->x;

	or	ax, -1
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<short,0>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@F$0A@@glm@@QEAA@F@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@F@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$0A@@glm@@SAHXZ PROC			; glm::tvec4<short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$0A@@glm@@SAHXZ ENDP			; glm::tvec4<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,0>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,0>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_K$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec4<unsigned __int64,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$0A@@glm@@QEAAAEA_KH@Z PROC		; glm::tvec4<unsigned __int64,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_K$0A@@glm@@QEAAAEA_KH@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned int,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned int,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned int,0>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned int,0>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned short,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 484  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax
	add	WORD PTR [rcx+6], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned short,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned short,0>::operator--, COMDAT

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned short,0>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@GGGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@G$0A@@glm@@QEAA@GGGG@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@GGGG@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<double,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<double,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<double,1>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<double,1>::operator++, COMDAT

; 454  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@N$00@glm@@QEAA@NNNN@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec4@N$00@glm@@QEAA@NNNN@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@N$00@glm@@QEAA@N@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT

; 188  : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	movups	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tvec4@N$00@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<double,1>::tvec4<double,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@N$00@glm@@QEAA@XZ PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$00@glm@@QEAA@XZ ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$00@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@N$00@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$00@glm@@QEAAAEANH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@N$00@glm@@QEAAAEANH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$00@glm@@SAHXZ PROC			; glm::tvec4<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$00@glm@@SAHXZ ENDP			; glm::tvec4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<float,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<float,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 478  : 	}

	ret	0
??E?$tvec4@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<float,1>::operator--, COMDAT

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<float,1>::operator++, COMDAT

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@M$00@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec4@M$00@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@M$00@glm@@QEAA@M@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 188  : 	{}

	shufps	xmm1, xmm1, 0
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec4@M$00@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@M$00@glm@@QEAA@XZ PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$00@glm@@QEAA@XZ ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$00@glm@@SAHXZ PROC			; glm::tvec4<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$00@glm@@SAHXZ ENDP			; glm::tvec4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,1>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,1>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QEAA@_J000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_J$00@glm@@QEAA@_J000@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_J$00@glm@@QEAA@_J000@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_J$00@glm@@QEAA@_J@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_J$00@glm@@QEAA@_J@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_J$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_J$00@glm@@QEAA@XZ PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$00@glm@@QEAA@XZ ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$00@glm@@QEBAAEB_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_J$00@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$00@glm@@QEAAAEA_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_J$00@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$00@glm@@SAHXZ PROC			; glm::tvec4<__int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$00@glm@@SAHXZ ENDP			; glm::tvec4<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<int,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<int,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<int,1>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<int,1>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@H$00@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@H$00@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@H$00@glm@@QEAA@H@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@H$00@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@H$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<int,1>::tvec4<int,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@H$00@glm@@QEAA@XZ PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$00@glm@@QEAA@XZ ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$00@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@H$00@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$00@glm@@QEAAAEAHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@H$00@glm@@QEAAAEAHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$00@glm@@SAHXZ PROC			; glm::tvec4<int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$00@glm@@SAHXZ ENDP			; glm::tvec4<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<short,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 484  : 		--*this;

	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	dec	WORD PTR [rcx+6]
	mov	QWORD PTR [rdx], rax
	dec	ax
	mov	WORD PTR [rcx], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<short,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<short,1>::operator--, COMDAT

; 465  : 		--this->x;

	or	ax, -1
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<short,1>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QEAA@FFFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@F$00@glm@@QEAA@FFFF@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@F$00@glm@@QEAA@FFFF@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@F$00@glm@@QEAA@F@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@F$00@glm@@QEAA@F@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@F$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<short,1>::tvec4<short,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@F$00@glm@@QEAA@XZ PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$00@glm@@QEAA@XZ ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$00@glm@@QEBAAEBFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@F$00@glm@@QEBAAEBFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$00@glm@@QEAAAEAFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@F$00@glm@@QEAAAEAFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$00@glm@@SAHXZ PROC			; glm::tvec4<short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$00@glm@@SAHXZ ENDP			; glm::tvec4<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, -1
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<signed char,1>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<signed char,1>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QEAA@CCCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@C$00@glm@@QEAA@CCCC@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@C$00@glm@@QEAA@CCCC@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@C$00@glm@@QEAA@C@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@C$00@glm@@QEAA@C@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@C$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@C$00@glm@@QEAA@XZ PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$00@glm@@QEAA@XZ ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$00@glm@@QEBAAEBCH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@C$00@glm@@QEBAAEBCH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$00@glm@@QEAAAEACH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@C$00@glm@@QEAAAEACH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$00@glm@@SAHXZ PROC			; glm::tvec4<signed char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$00@glm@@SAHXZ ENDP			; glm::tvec4<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,1>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,1>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QEAA@_K000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_K$00@glm@@QEAA@_K000@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_K$00@glm@@QEAA@_K000@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_K$00@glm@@QEAA@_K@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_K$00@glm@@QEAA@_K@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_K$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_K$00@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$00@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$00@glm@@QEBAAEB_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_K$00@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$00@glm@@QEAAAEA_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_K$00@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@I$00@glm@@QEAA@IIII@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@I$00@glm@@QEAA@IIII@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@I$00@glm@@QEAA@I@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@I$00@glm@@QEAA@I@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@I$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@I$00@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$00@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$00@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@I$00@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$00@glm@@QEAAAEAIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@I$00@glm@@QEAAAEAIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 484  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax
	add	WORD PTR [rcx+6], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QEAA@GGGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@G$00@glm@@QEAA@GGGG@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@G$00@glm@@QEAA@GGGG@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@G$00@glm@@QEAA@G@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@G$00@glm@@QEAA@G@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@G$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@G$00@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$00@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$00@glm@@QEBAAEBGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@G$00@glm@@QEBAAEBGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$00@glm@@QEAAAEAGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@G$00@glm@@QEAAAEAGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QEAA@EEEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@E$00@glm@@QEAA@EEEE@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@E$00@glm@@QEAA@EEEE@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@E$00@glm@@QEAA@E@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@E$00@glm@@QEAA@E@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@E$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@E$00@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$00@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$00@glm@@QEBAAEBEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@E$00@glm@@QEBAAEBEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$00@glm@@QEAAAEAEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@E$00@glm@@QEAAAEAEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<double,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<double,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<double,2>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<double,2>::operator++, COMDAT

; 454  : 	{

	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movups	xmm0, XMMWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm2
	addpd	xmm1, xmm0
	movups	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@N$01@glm@@QEAA@NNNN@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+24], xmm0
	movsd	QWORD PTR [rcx], xmm1
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec4@N$01@glm@@QEAA@NNNN@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@N$01@glm@@QEAA@N@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT

; 188  : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	movups	XMMWORD PTR [rcx+16], xmm1
	ret	0
??0?$tvec4@N$01@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<double,2>::tvec4<double,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@N$01@glm@@QEAA@XZ PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@N$01@glm@@QEAA@XZ ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$01@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@N$01@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@N$01@glm@@QEAAAEANH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@N$01@glm@@QEAAAEANH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$01@glm@@SAHXZ PROC			; glm::tvec4<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$01@glm@@SAHXZ ENDP			; glm::tvec4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<float,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<float,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 478  : 	}

	ret	0
??E?$tvec4@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<float,2>::operator--, COMDAT

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<float,2>::operator++, COMDAT

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@M$01@glm@@QEAA@M@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 188  : 	{}

	shufps	xmm1, xmm1, 0
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec4@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@M$01@glm@@QEAA@XZ PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$01@glm@@QEAA@XZ ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$01@glm@@SAHXZ PROC			; glm::tvec4<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$01@glm@@SAHXZ ENDP			; glm::tvec4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<__int64,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,2>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movdqu	XMMWORD PTR [rcx+rax*8], xmm0
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<__int64,2>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QEAA@_J000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_J$01@glm@@QEAA@_J000@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_J$01@glm@@QEAA@_J000@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_J$01@glm@@QEAA@_J@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_J$01@glm@@QEAA@_J@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_J$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_J$01@glm@@QEAA@XZ PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_J$01@glm@@QEAA@XZ ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$01@glm@@QEBAAEB_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_J$01@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_J$01@glm@@QEAAAEA_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_J$01@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$01@glm@@SAHXZ PROC			; glm::tvec4<__int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$01@glm@@SAHXZ ENDP			; glm::tvec4<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<int,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<int,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<int,2>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<int,2>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@H$01@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@H$01@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@H$01@glm@@QEAA@H@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@H$01@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@H$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<int,2>::tvec4<int,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@H$01@glm@@QEAA@XZ PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@H$01@glm@@QEAA@XZ ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$01@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@H$01@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@H$01@glm@@QEAAAEAHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@H$01@glm@@QEAAAEAHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$01@glm@@SAHXZ PROC			; glm::tvec4<int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$01@glm@@SAHXZ ENDP			; glm::tvec4<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<short,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 484  : 		--*this;

	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	dec	WORD PTR [rcx+6]
	mov	QWORD PTR [rdx], rax
	dec	ax
	mov	WORD PTR [rcx], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<short,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<short,2>::operator--, COMDAT

; 465  : 		--this->x;

	or	ax, -1
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<short,2>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QEAA@FFFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@F$01@glm@@QEAA@FFFF@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@F$01@glm@@QEAA@FFFF@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@F$01@glm@@QEAA@F@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@F$01@glm@@QEAA@F@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@F$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<short,2>::tvec4<short,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@F$01@glm@@QEAA@XZ PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@F$01@glm@@QEAA@XZ ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$01@glm@@QEBAAEBFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@F$01@glm@@QEBAAEBFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@F$01@glm@@QEAAAEAFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@F$01@glm@@QEAAAEAFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$01@glm@@SAHXZ PROC			; glm::tvec4<short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$01@glm@@SAHXZ ENDP			; glm::tvec4<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, -1
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<signed char,2>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<signed char,2>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QEAA@CCCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@C$01@glm@@QEAA@CCCC@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@C$01@glm@@QEAA@CCCC@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@C$01@glm@@QEAA@C@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@C$01@glm@@QEAA@C@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@C$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@C$01@glm@@QEAA@XZ PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$01@glm@@QEAA@XZ ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$01@glm@@QEBAAEBCH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@C$01@glm@@QEBAAEBCH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$01@glm@@QEAAAEACH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@C$01@glm@@QEAAAEACH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$01@glm@@SAHXZ PROC			; glm::tvec4<signed char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$01@glm@@SAHXZ ENDP			; glm::tvec4<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;

	xor	eax, eax
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
$LL5@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL5@operator

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,2>::operator--, COMDAT

; 465  : 		--this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned __int64,2>::operator++, COMDAT

; 455  : 		++this->x;

	xor	eax, eax
$LL3@operator:
	movdqu	xmm0, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm1, XMMWORD PTR __xmm@00000000000000010000000000000001
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL3@operator

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QEAA@_K000@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@_K$01@glm@@QEAA@_K000@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 193  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec4@_K$01@glm@@QEAA@_K000@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@_K$01@glm@@QEAA@_K@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	QWORD PTR [rcx], rdx

; 188  : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx+24], rdx
	ret	0
??0?$tvec4@_K$01@glm@@QEAA@_K@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@_K$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@_K$01@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@_K$01@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$01@glm@@QEBAAEB_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	ret	0
??A?$tvec4@_K$01@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@_K$01@glm@@QEAAAEA_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	ret	0
??A?$tvec4@_K$01@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	xmm1, xmm0
	psubd	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1
	movdqu	XMMWORD PTR [rdx], xmm0

; 478  : 	}

	ret	0
??E?$tvec4@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT

; 465  : 		--this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqu	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT

; 455  : 		++this->x;

	movdqu	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@I$01@glm@@QEAA@IIII@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 193  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec4@I$01@glm@@QEAA@IIII@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@I$01@glm@@QEAA@I@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	DWORD PTR [rcx], edx

; 188  : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	mov	DWORD PTR [rcx+12], edx
	ret	0
??0?$tvec4@I$01@glm@@QEAA@I@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@I$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@I$01@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@I$01@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$01@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@I$01@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@I$01@glm@@QEAAAEAIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@I$01@glm@@QEAAAEAIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 484  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax
	add	WORD PTR [rcx+6], ax

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8w, 1
	add	WORD PTR [rcx+2], r8w
	add	WORD PTR [rcx+4], r8w
	add	WORD PTR [rcx+6], r8w
	mov	QWORD PTR [rdx], rax
	add	ax, r8w
	mov	WORD PTR [rcx], ax

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 466  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [rcx+6], ax

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT

; 455  : 		++this->x;

	mov	ax, 1
	add	WORD PTR [rcx], ax

; 456  : 		++this->y;

	add	WORD PTR [rcx+2], ax

; 457  : 		++this->z;

	add	WORD PTR [rcx+4], ax

; 458  : 		++this->w;

	add	WORD PTR [rcx+6], ax

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QEAA@GGGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@G$01@glm@@QEAA@GGGG@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movzx	eax, WORD PTR d$[rsp]
	mov	WORD PTR [rcx+6], ax

; 193  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx], dx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec4@G$01@glm@@QEAA@GGGG@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@G$01@glm@@QEAA@G@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	WORD PTR [rcx], dx

; 188  : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	mov	WORD PTR [rcx+6], dx
	ret	0
??0?$tvec4@G$01@glm@@QEAA@G@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@G$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@G$01@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@G$01@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$01@glm@@QEBAAEBGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	ret	0
??A?$tvec4@G$01@glm@@QEBAAEBGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@G$01@glm@@QEAAAEAGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 332  : 	}

	ret	0
??A?$tvec4@G$01@glm@@QEAAAEAGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QEAA@EEEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@E$01@glm@@QEAA@EEEE@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@E$01@glm@@QEAA@EEEE@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@E$01@glm@@QEAA@E@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@E$01@glm@@QEAA@E@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@E$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@E$01@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$01@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$01@glm@@QEBAAEBEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@E$01@glm@@QEBAAEBEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$01@glm@@QEAAAEAEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@E$01@glm@@QEAAAEAEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<double,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<double,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<double,0>::operator--, COMDAT

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 317  : 	}

	ret	0
??F?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<double,0>::operator++, COMDAT

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 308  : 	}

	ret	0
??E?$tvec3@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movsd	QWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 65   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<float,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 331  : 		--*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	subss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 333  : 	}

	ret	0
??F?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<float,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 323  : 		++*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	addss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 325  : 	}

	ret	0
??E?$tvec3@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<float,0>::operator--, COMDAT

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, xmm2
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<float,0>::operator++, COMDAT

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm2
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movss	DWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	DWORD PTR [rcx], xmm1

; 65   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,0>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_J$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec3<__int64,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$0A@@glm@@QEAAAEA_JH@Z PROC		; glm::tvec3<__int64,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_J$0A@@glm@@QEAAAEA_JH@Z ENDP		; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$0A@@glm@@SAHXZ PROC			; glm::tvec3<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec3<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<int,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 331  : 		--*this;

	dec	DWORD PTR [rcx]
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<int,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<int,0>::operator--, COMDAT

; 313  : 		--this->x;

	dec	DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<int,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@H$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$0A@@glm@@QEAAAEAHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@H$0A@@glm@@QEAAAEAHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<short,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 331  : 		--*this;

	dec	WORD PTR [rcx]
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<short,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<short,0>::operator--, COMDAT

; 313  : 		--this->x;

	dec	WORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<short,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QEAA@FFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@F$0A@@glm@@QEAA@FFF@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@F$0A@@glm@@QEAA@FFF@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@F$0A@@glm@@QEAA@F@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@F$0A@@glm@@QEAA@F@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@F$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<short,0>::tvec3<short,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$0A@@glm@@SAHXZ PROC			; glm::tvec3<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$0A@@glm@@SAHXZ ENDP			; glm::tvec3<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<signed char,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, -1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<signed char,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<signed char,0>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<signed char,0>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QEAA@CCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@C$0A@@glm@@QEAA@CCC@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@C$0A@@glm@@QEAA@CCC@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@C$0A@@glm@@QEAA@C@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@C$0A@@glm@@QEAA@C@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@C$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$0A@@glm@@SAHXZ PROC			; glm::tvec3<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$0A@@glm@@SAHXZ ENDP			; glm::tvec3<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,0>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_K$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec3<unsigned __int64,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$0A@@glm@@QEAAAEA_KH@Z PROC		; glm::tvec3<unsigned __int64,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_K$0A@@glm@@QEAAAEA_KH@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned int,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 331  : 		--*this;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax
	add	DWORD PTR [rcx+4], eax
	add	DWORD PTR [rcx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned int,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned int,0>::operator--, COMDAT

; 313  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 314  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 315  : 		--this->z;

	add	DWORD PTR [rcx+8], eax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned int,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@I$0A@@glm@@QEAA@III@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@III@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned short,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned short,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned short,0>::operator--, COMDAT

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 314  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned short,0>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QEAA@GGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@G$0A@@glm@@QEAA@GGG@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@G$0A@@glm@@QEAA@GGG@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@G$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned char,0>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned char,0>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned char,0>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned char,0>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QEAA@EEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@E$0A@@glm@@QEAA@EEE@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@E$0A@@glm@@QEAA@EEE@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@E$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<double,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<double,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<double,1>::operator--, COMDAT

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 317  : 	}

	ret	0
??F?$tvec3@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<double,1>::operator++, COMDAT

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 308  : 	}

	ret	0
??E?$tvec3@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@N$00@glm@@QEAA@NNN@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movsd	QWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec3@N$00@glm@@QEAA@NNN@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@N$00@glm@@QEAA@N@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT

; 65   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec3@N$00@glm@@QEAA@N@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<double,1>::tvec3<double,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@N$00@glm@@QEAA@XZ PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$00@glm@@QEAA@XZ ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$00@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@N$00@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$00@glm@@QEAAAEANH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@N$00@glm@@QEAAAEANH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$00@glm@@SAHXZ PROC			; glm::tvec3<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$00@glm@@SAHXZ ENDP			; glm::tvec3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<float,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 331  : 		--*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	subss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 333  : 	}

	ret	0
??F?$tvec3@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<float,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 323  : 		++*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	addss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 325  : 	}

	ret	0
??E?$tvec3@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<float,1>::operator--, COMDAT

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, xmm2
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<float,1>::operator++, COMDAT

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm2
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@M$00@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movss	DWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec3@M$00@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@M$00@glm@@QEAA@M@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	DWORD PTR [rcx], xmm1

; 65   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??0?$tvec3@M$00@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,1>::tvec3<float,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@M$00@glm@@QEAA@XZ PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$00@glm@@QEAA@XZ ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$00@glm@@SAHXZ PROC			; glm::tvec3<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$00@glm@@SAHXZ ENDP			; glm::tvec3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,1>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QEAA@_J00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_J$00@glm@@QEAA@_J00@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_J$00@glm@@QEAA@_J00@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_J$00@glm@@QEAA@_J@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_J$00@glm@@QEAA@_J@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_J$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_J$00@glm@@QEAA@XZ PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$00@glm@@QEAA@XZ ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$00@glm@@QEBAAEB_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_J$00@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$00@glm@@QEAAAEA_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_J$00@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$00@glm@@SAHXZ PROC			; glm::tvec3<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$00@glm@@SAHXZ ENDP			; glm::tvec3<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<int,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 331  : 		--*this;

	dec	DWORD PTR [rcx]
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<int,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<int,1>::operator--, COMDAT

; 313  : 		--this->x;

	dec	DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<int,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@H$00@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@H$00@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@H$00@glm@@QEAA@H@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@H$00@glm@@QEAA@H@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@H$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<int,1>::tvec3<int,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@H$00@glm@@QEAA@XZ PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$00@glm@@QEAA@XZ ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$00@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@H$00@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$00@glm@@QEAAAEAHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@H$00@glm@@QEAAAEAHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$00@glm@@SAHXZ PROC			; glm::tvec3<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$00@glm@@SAHXZ ENDP			; glm::tvec3<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<short,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 331  : 		--*this;

	dec	WORD PTR [rcx]
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<short,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<short,1>::operator--, COMDAT

; 313  : 		--this->x;

	dec	WORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<short,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QEAA@FFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@F$00@glm@@QEAA@FFF@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@F$00@glm@@QEAA@FFF@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@F$00@glm@@QEAA@F@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@F$00@glm@@QEAA@F@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@F$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<short,1>::tvec3<short,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@F$00@glm@@QEAA@XZ PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$00@glm@@QEAA@XZ ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$00@glm@@QEBAAEBFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@F$00@glm@@QEBAAEBFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$00@glm@@QEAAAEAFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@F$00@glm@@QEAAAEAFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$00@glm@@SAHXZ PROC			; glm::tvec3<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$00@glm@@SAHXZ ENDP			; glm::tvec3<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, -1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<signed char,1>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<signed char,1>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QEAA@CCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@C$00@glm@@QEAA@CCC@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@C$00@glm@@QEAA@CCC@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@C$00@glm@@QEAA@C@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@C$00@glm@@QEAA@C@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@C$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@C$00@glm@@QEAA@XZ PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$00@glm@@QEAA@XZ ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$00@glm@@QEBAAEBCH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@C$00@glm@@QEBAAEBCH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$00@glm@@QEAAAEACH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@C$00@glm@@QEAAAEACH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$00@glm@@SAHXZ PROC			; glm::tvec3<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$00@glm@@SAHXZ ENDP			; glm::tvec3<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,1>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_K$00@glm@@QEAA@_K00@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_K$00@glm@@QEAA@_K00@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_K$00@glm@@QEAA@_K@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_K$00@glm@@QEAA@_K@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_K$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_K$00@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$00@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$00@glm@@QEBAAEB_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_K$00@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$00@glm@@QEAAAEA_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_K$00@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 331  : 		--*this;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax
	add	DWORD PTR [rcx+4], eax
	add	DWORD PTR [rcx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT

; 313  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 314  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 315  : 		--this->z;

	add	DWORD PTR [rcx+8], eax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@I$00@glm@@QEAA@III@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@I$00@glm@@QEAA@III@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@I$00@glm@@QEAA@I@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@I$00@glm@@QEAA@I@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@I$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@I$00@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$00@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$00@glm@@QEBAAEBIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@I$00@glm@@QEBAAEBIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$00@glm@@QEAAAEAIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@I$00@glm@@QEAAAEAIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 314  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QEAA@GGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@G$00@glm@@QEAA@GGG@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@G$00@glm@@QEAA@GGG@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@G$00@glm@@QEAA@G@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@G$00@glm@@QEAA@G@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@G$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@G$00@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$00@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$00@glm@@QEBAAEBGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@G$00@glm@@QEBAAEBGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$00@glm@@QEAAAEAGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@G$00@glm@@QEAAAEAGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QEAA@EEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@E$00@glm@@QEAA@EEE@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@E$00@glm@@QEAA@EEE@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@E$00@glm@@QEAA@E@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@E$00@glm@@QEAA@E@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@E$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@E$00@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$00@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$00@glm@@QEBAAEBEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@E$00@glm@@QEBAAEBEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$00@glm@@QEAAAEAEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@E$00@glm@@QEAAAEAEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<double,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<double,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<double,2>::operator--, COMDAT

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	subpd	xmm0, xmm2
	subsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 317  : 	}

	ret	0
??F?$tvec3@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<double,2>::operator++, COMDAT

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movaps	xmm2, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movsd	xmm1, QWORD PTR [rcx+16]
	addpd	xmm0, xmm2
	addsd	xmm1, xmm2
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1

; 308  : 	}

	ret	0
??E?$tvec3@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@N$01@glm@@QEAA@NNN@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movsd	QWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	movsd	QWORD PTR [rcx+16], xmm3
	ret	0
??0?$tvec3@N$01@glm@@QEAA@NNN@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@N$01@glm@@QEAA@N@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT

; 65   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movsd	QWORD PTR [rcx+16], xmm1
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec3@N$01@glm@@QEAA@N@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<double,2>::tvec3<double,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@N$01@glm@@QEAA@XZ PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@N$01@glm@@QEAA@XZ ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$01@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@N$01@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@N$01@glm@@QEAAAEANH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@N$01@glm@@QEAAAEANH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$01@glm@@SAHXZ PROC			; glm::tvec3<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$01@glm@@SAHXZ ENDP			; glm::tvec3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<float,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 331  : 		--*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	subss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 333  : 	}

	ret	0
??F?$tvec3@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<float,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]

; 323  : 		++*this;

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	addss	xmm1, xmm2
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, xmm2
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+4], xmm0

; 325  : 	}

	ret	0
??E?$tvec3@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<float,2>::operator--, COMDAT

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, xmm2
	subss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<float,2>::operator++, COMDAT

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm2
	addss	xmm1, xmm2
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, xmm2
	movss	DWORD PTR [rcx+8], xmm1
	movss	DWORD PTR [rcx+4], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@M$01@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	movss	DWORD PTR [rcx], xmm1

; 70   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec3@M$01@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@M$01@glm@@QEAA@M@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	DWORD PTR [rcx], xmm1

; 65   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm1
	ret	0
??0?$tvec3@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,2>::tvec3<float,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@M$01@glm@@QEAA@XZ PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@M$01@glm@@QEAA@XZ ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$01@glm@@SAHXZ PROC			; glm::tvec3<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$01@glm@@SAHXZ ENDP			; glm::tvec3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<__int64,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,2>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<__int64,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QEAA@_J00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_J$01@glm@@QEAA@_J00@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_J$01@glm@@QEAA@_J00@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_J$01@glm@@QEAA@_J@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_J$01@glm@@QEAA@_J@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_J$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_J$01@glm@@QEAA@XZ PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_J$01@glm@@QEAA@XZ ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$01@glm@@QEBAAEB_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_J$01@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_J$01@glm@@QEAAAEA_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_J$01@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$01@glm@@SAHXZ PROC			; glm::tvec3<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$01@glm@@SAHXZ ENDP			; glm::tvec3<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<int,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 331  : 		--*this;

	dec	DWORD PTR [rcx]
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<int,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<int,2>::operator--, COMDAT

; 313  : 		--this->x;

	dec	DWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]
	dec	DWORD PTR [rcx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<int,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@H$01@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@H$01@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@H$01@glm@@QEAA@H@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@H$01@glm@@QEAA@H@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@H$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<int,2>::tvec3<int,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@H$01@glm@@QEAA@XZ PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@H$01@glm@@QEAA@XZ ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$01@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@H$01@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@H$01@glm@@QEAAAEAHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@H$01@glm@@QEAAAEAHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$01@glm@@SAHXZ PROC			; glm::tvec3<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$01@glm@@SAHXZ ENDP			; glm::tvec3<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<short,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 331  : 		--*this;

	dec	WORD PTR [rcx]
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<short,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<short,2>::operator--, COMDAT

; 313  : 		--this->x;

	dec	WORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]
	dec	WORD PTR [rcx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<short,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QEAA@FFF@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@F$01@glm@@QEAA@FFF@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@F$01@glm@@QEAA@FFF@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@F$01@glm@@QEAA@F@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@F$01@glm@@QEAA@F@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@F$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<short,2>::tvec3<short,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@F$01@glm@@QEAA@XZ PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@F$01@glm@@QEAA@XZ ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$01@glm@@QEBAAEBFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@F$01@glm@@QEBAAEBFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@F$01@glm@@QEAAAEAFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@F$01@glm@@QEAAAEAFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$01@glm@@SAHXZ PROC			; glm::tvec3<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$01@glm@@SAHXZ ENDP			; glm::tvec3<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, -1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<signed char,2>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<signed char,2>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QEAA@CCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@C$01@glm@@QEAA@CCC@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@C$01@glm@@QEAA@CCC@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@C$01@glm@@QEAA@C@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@C$01@glm@@QEAA@C@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@C$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@C$01@glm@@QEAA@XZ PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@C$01@glm@@QEAA@XZ ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$01@glm@@QEBAAEBCH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@C$01@glm@@QEBAAEBCH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@C$01@glm@@QEAAAEACH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@C$01@glm@@QEAAAEACH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$01@glm@@SAHXZ PROC			; glm::tvec3<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$01@glm@@SAHXZ ENDP			; glm::tvec3<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 331  : 		--*this;
; 332  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	dec	QWORD PTR [rcx]
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 333  : 	}

	ret	0
??F?$tvec3@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 323  : 		++*this;
; 324  : 		return Result;

	mov	rax, rdx
	movsd	xmm1, QWORD PTR [rcx+16]
	inc	QWORD PTR [rcx]
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx], xmm0
	movsd	QWORD PTR [rdx+16], xmm1

; 325  : 	}

	ret	0
??E?$tvec3@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,2>::operator--, COMDAT

; 313  : 		--this->x;

	dec	QWORD PTR [rcx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]
	dec	QWORD PTR [rcx+16]

; 317  : 	}

	ret	0
??F?$tvec3@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec3<unsigned __int64,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	QWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]
	inc	QWORD PTR [rcx+16]

; 308  : 	}

	ret	0
??E?$tvec3@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@_K$01@glm@@QEAA@_K00@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	QWORD PTR [rcx], rdx

; 70   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$tvec3@_K$01@glm@@QEAA@_K00@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@_K$01@glm@@QEAA@_K@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	QWORD PTR [rcx], rdx

; 65   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0?$tvec3@_K$01@glm@@QEAA@_K@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@_K$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@_K$01@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@_K$01@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$01@glm@@QEBAAEB_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	ret	0
??A?$tvec3@_K$01@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@_K$01@glm@@QEAAAEA_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	ret	0
??A?$tvec3@_K$01@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 331  : 		--*this;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax
	add	DWORD PTR [rcx+4], eax
	add	DWORD PTR [rcx+8], eax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx+8]
	movsd	xmm0, QWORD PTR [rcx]

; 323  : 		++*this;

	inc	DWORD PTR [rcx]
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]
	movsd	QWORD PTR [rdx], xmm0
	mov	DWORD PTR [rdx+8], eax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT

; 313  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 314  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 315  : 		--this->z;

	add	DWORD PTR [rcx+8], eax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	DWORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]
	inc	DWORD PTR [rcx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@I$01@glm@@QEAA@III@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	DWORD PTR [rcx], edx

; 70   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+8], r9d
	ret	0
??0?$tvec3@I$01@glm@@QEAA@III@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@I$01@glm@@QEAA@I@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	DWORD PTR [rcx], edx

; 65   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0?$tvec3@I$01@glm@@QEAA@I@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@I$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@I$01@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@I$01@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$01@glm@@QEBAAEBIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	ret	0
??A?$tvec3@I$01@glm@@QEBAAEBIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@I$01@glm@@QEAAAEAIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	ret	0
??A?$tvec3@I$01@glm@@QEAAAEAIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax
	add	WORD PTR [rcx+2], ax
	add	WORD PTR [rcx+4], ax

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax
	movzx	eax, WORD PTR [rcx+4]

; 323  : 		++*this;

	inc	WORD PTR [rcx]
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]
	mov	WORD PTR [rdx+4], ax

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 314  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [rcx+4], ax

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT

; 304  : 		++this->x;

	inc	WORD PTR [rcx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]
	inc	WORD PTR [rcx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QEAA@GGG@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@G$01@glm@@QEAA@GGG@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	WORD PTR [rcx], dx

; 70   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	mov	WORD PTR [rcx+4], r9w
	ret	0
??0?$tvec3@G$01@glm@@QEAA@GGG@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@G$01@glm@@QEAA@G@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	WORD PTR [rcx], dx

; 65   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	mov	WORD PTR [rcx+4], dx
	ret	0
??0?$tvec3@G$01@glm@@QEAA@G@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@G$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@G$01@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@G$01@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$01@glm@@QEBAAEBGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	ret	0
??A?$tvec3@G$01@glm@@QEBAAEBGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@G$01@glm@@QEAAAEAGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 147  : 	}

	ret	0
??A?$tvec3@G$01@glm@@QEAAAEAGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec3@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT

; 330  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 331  : 		--*this;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 332  : 		return Result;

	mov	rax, rdx

; 333  : 	}

	ret	0
??F?$tvec3@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec3@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT

; 322  : 		tvec3<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax
	mov	al, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+2], al

; 323  : 		++*this;

	mov	al, 1
	add	BYTE PTR [rcx], al
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al

; 324  : 		return Result;

	mov	rax, rdx

; 325  : 	}

	ret	0
??E?$tvec3@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec3@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT

; 313  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 314  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 315  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 316  : 		return *this;

	mov	rax, rcx

; 317  : 	}

	ret	0
??F?$tvec3@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec3@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT

; 304  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 305  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 306  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 307  : 		return *this;

	mov	rax, rcx

; 308  : 	}

	ret	0
??E?$tvec3@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QEAA@EEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
??0?$tvec3@E$01@glm@@QEAA@EEE@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT

; 69   : 		: x(a), y(b), z(c)

	mov	BYTE PTR [rcx], dl

; 70   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec3@E$01@glm@@QEAA@EEE@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec3@E$01@glm@@QEAA@E@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	BYTE PTR [rcx], dl

; 65   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	ret	0
??0?$tvec3@E$01@glm@@QEAA@E@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec3@E$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT

; 60   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec3@E$01@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax
	mov	BYTE PTR [rcx+2], al

; 40   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec3@E$01@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$01@glm@@QEBAAEBEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 154  : 	}

	ret	0
??A?$tvec3@E$01@glm@@QEBAAEBEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec3@E$01@glm@@QEAAAEAEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 147  : 	}

	ret	0
??A?$tvec3@E$01@glm@@QEAAAEAEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<double,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;
; 274  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 275  : 	}

	ret	0
??F?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<double,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;
; 266  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 267  : 	}

	ret	0
??E?$tvec2@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<double,0>::operator--, COMDAT

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<double,0>::operator++, COMDAT

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	movsd	QWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 52   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_J$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec2<__int64,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$0A@@glm@@QEAAAEA_JH@Z PROC		; glm::tvec2<__int64,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_J$0A@@glm@@QEAAAEA_JH@Z ENDP		; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$0A@@glm@@SAHXZ PROC			; glm::tvec2<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec2<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<int,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<int,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<int,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<int,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@H$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$0A@@glm@@QEAAAEAHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@H$0A@@glm@@QEAAAEAHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<signed char,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<signed char,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<signed char,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<signed char,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@CC@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@C$0A@@glm@@QEAA@CC@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@CC@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@C$0A@@glm@@QEAA@C@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@C@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$0A@@glm@@SAHXZ PROC			; glm::tvec2<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$0A@@glm@@SAHXZ ENDP			; glm::tvec2<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_K$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec2<unsigned __int64,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$0A@@glm@@QEAAAEA_KH@Z PROC		; glm::tvec2<unsigned __int64,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_K$0A@@glm@@QEAAAEA_KH@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned char,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned char,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned char,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned char,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@EE@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@E$0A@@glm@@QEAA@EE@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@EE@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<double,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;
; 274  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 275  : 	}

	ret	0
??F?$tvec2@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<double,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;
; 266  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 267  : 	}

	ret	0
??E?$tvec2@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<double,1>::operator--, COMDAT

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<double,1>::operator++, COMDAT

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@N$00@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	movsd	QWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??0?$tvec2@N$00@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@N$00@glm@@QEAA@N@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT

; 52   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec2@N$00@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<double,1>::tvec2<double,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@N$00@glm@@QEAA@XZ PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@N$00@glm@@QEAA@XZ ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$00@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@N$00@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$00@glm@@QEAAAEANH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@N$00@glm@@QEAAAEANH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$00@glm@@SAHXZ PROC			; glm::tvec2<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$00@glm@@SAHXZ ENDP			; glm::tvec2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<float,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 274  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<float,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 266  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<float,1>::operator--, COMDAT

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<float,1>::operator++, COMDAT

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@M$00@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	movss	DWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??0?$tvec2@M$00@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@M$00@glm@@QEAA@M@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	movss	DWORD PTR [rcx], xmm1

; 52   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??0?$tvec2@M$00@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<float,1>::tvec2<float,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@M$00@glm@@QEAA@XZ PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@M$00@glm@@QEAA@XZ ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$00@glm@@SAHXZ PROC			; glm::tvec2<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$00@glm@@SAHXZ ENDP			; glm::tvec2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QEAA@_J0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_J$00@glm@@QEAA@_J0@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_J$00@glm@@QEAA@_J0@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_J$00@glm@@QEAA@_J@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_J$00@glm@@QEAA@_J@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_J$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_J$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_J$00@glm@@QEAA@XZ PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_J$00@glm@@QEAA@XZ ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$00@glm@@QEBAAEB_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_J$00@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$00@glm@@QEAAAEA_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_J$00@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$00@glm@@SAHXZ PROC			; glm::tvec2<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$00@glm@@SAHXZ ENDP			; glm::tvec2<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<int,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<int,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<int,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<int,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@H$00@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@H$00@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@H$00@glm@@QEAA@H@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@H$00@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@H$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<int,1>::tvec2<int,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@H$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@H$00@glm@@QEAA@XZ PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@H$00@glm@@QEAA@XZ ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$00@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@H$00@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$00@glm@@QEAAAEAHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@H$00@glm@@QEAAAEAHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$00@glm@@SAHXZ PROC			; glm::tvec2<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$00@glm@@SAHXZ ENDP			; glm::tvec2<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<short,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 273  : 		--*this;

	dec	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	dec	ax
	mov	WORD PTR [rcx], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<short,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<short,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	WORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<short,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@F$00@glm@@QEAA@FF@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@F$00@glm@@QEAA@FF@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@F$00@glm@@QEAA@F@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@F$00@glm@@QEAA@F@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@F$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<short,1>::tvec2<short,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@F$00@glm@@QEAA@XZ PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$00@glm@@QEAA@XZ ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$00@glm@@QEBAAEBFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@F$00@glm@@QEBAAEBFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$00@glm@@QEAAAEAFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@F$00@glm@@QEAAAEAFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$00@glm@@SAHXZ PROC			; glm::tvec2<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$00@glm@@SAHXZ ENDP			; glm::tvec2<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<signed char,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<signed char,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QEAA@CC@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@C$00@glm@@QEAA@CC@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@C$00@glm@@QEAA@CC@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@C$00@glm@@QEAA@C@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@C$00@glm@@QEAA@C@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@C$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@C$00@glm@@QEAA@XZ PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$00@glm@@QEAA@XZ ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$00@glm@@QEBAAEBCH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@C$00@glm@@QEBAAEBCH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$00@glm@@QEAAAEACH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@C$00@glm@@QEAAAEACH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$00@glm@@SAHXZ PROC			; glm::tvec2<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$00@glm@@SAHXZ ENDP			; glm::tvec2<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_K$00@glm@@QEAA@_K0@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_K$00@glm@@QEAA@_K0@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_K$00@glm@@QEAA@_K@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_K$00@glm@@QEAA@_K@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_K$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_K$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_K$00@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_K$00@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$00@glm@@QEBAAEB_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_K$00@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$00@glm@@QEAAAEA_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_K$00@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT

; 256  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 257  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@I$00@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@I$00@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@I$00@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@I$00@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@I$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@I$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@I$00@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@I$00@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$00@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@I$00@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$00@glm@@QEAAAEAIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@I$00@glm@@QEAAAEAIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 273  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 257  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@G$00@glm@@QEAA@GG@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@G$00@glm@@QEAA@GG@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@G$00@glm@@QEAA@G@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@G$00@glm@@QEAA@G@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@G$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@G$00@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$00@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$00@glm@@QEBAAEBGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@G$00@glm@@QEBAAEBGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$00@glm@@QEAAAEAGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@G$00@glm@@QEAAAEAGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QEAA@EE@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@E$00@glm@@QEAA@EE@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@E$00@glm@@QEAA@EE@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@E$00@glm@@QEAA@E@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@E$00@glm@@QEAA@E@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@E$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@E$00@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$00@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$00@glm@@QEBAAEBEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@E$00@glm@@QEBAAEBEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$00@glm@@QEAAAEAEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@E$00@glm@@QEAAAEAEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<double,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;
; 274  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	subpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 275  : 	}

	ret	0
??F?$tvec2@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<double,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;
; 266  : 		return Result;

	mov	rax, rdx
	movups	xmm1, xmm0
	addpd	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 267  : 	}

	ret	0
??E?$tvec2@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<double,2>::operator--, COMDAT

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<double,2>::operator++, COMDAT

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [rcx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@N$01@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	movsd	QWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movsd	QWORD PTR [rcx+8], xmm2
	ret	0
??0?$tvec2@N$01@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@N$01@glm@@QEAA@N@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT

; 52   : 	{}

	unpcklpd xmm1, xmm1
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec2@N$01@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<double,2>::tvec2<double,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@N$01@glm@@QEAA@XZ PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@N$01@glm@@QEAA@XZ ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$01@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@N$01@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@N$01@glm@@QEAAAEANH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@N$01@glm@@QEAAAEANH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$01@glm@@SAHXZ PROC			; glm::tvec2<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$01@glm@@SAHXZ ENDP			; glm::tvec2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<float,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 274  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<float,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 266  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<float,2>::operator--, COMDAT

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<float,2>::operator++, COMDAT

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@M$01@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	movss	DWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??0?$tvec2@M$01@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@M$01@glm@@QEAA@M@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	movss	DWORD PTR [rcx], xmm1

; 52   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??0?$tvec2@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<float,2>::tvec2<float,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@M$01@glm@@QEAA@XZ PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@M$01@glm@@QEAA@XZ ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$01@glm@@SAHXZ PROC			; glm::tvec2<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$01@glm@@SAHXZ ENDP			; glm::tvec2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<__int64,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<__int64,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QEAA@_J0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_J$01@glm@@QEAA@_J0@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_J$01@glm@@QEAA@_J0@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_J$01@glm@@QEAA@_J@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_J$01@glm@@QEAA@_J@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_J$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_J$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_J$01@glm@@QEAA@XZ PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_J$01@glm@@QEAA@XZ ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$01@glm@@QEBAAEB_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_J$01@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_J$01@glm@@QEAAAEA_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_J$01@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$01@glm@@SAHXZ PROC			; glm::tvec2<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$01@glm@@SAHXZ ENDP			; glm::tvec2<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<int,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<int,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<int,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	DWORD PTR [rcx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<int,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@H$01@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@H$01@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@H$01@glm@@QEAA@H@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@H$01@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@H$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<int,2>::tvec2<int,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@H$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@H$01@glm@@QEAA@XZ PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@H$01@glm@@QEAA@XZ ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$01@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@H$01@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@H$01@glm@@QEAAAEAHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@H$01@glm@@QEAAAEAHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$01@glm@@SAHXZ PROC			; glm::tvec2<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$01@glm@@SAHXZ ENDP			; glm::tvec2<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<short,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 273  : 		--*this;

	dec	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	dec	ax
	mov	WORD PTR [rcx], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<short,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<short,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	WORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<short,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@F$01@glm@@QEAA@FF@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@F$01@glm@@QEAA@FF@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@F$01@glm@@QEAA@F@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@F$01@glm@@QEAA@F@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@F$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<short,2>::tvec2<short,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@F$01@glm@@QEAA@XZ PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$01@glm@@QEAA@XZ ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$01@glm@@QEBAAEBFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@F$01@glm@@QEBAAEBFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$01@glm@@QEAAAEAFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@F$01@glm@@QEAAAEAFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$01@glm@@SAHXZ PROC			; glm::tvec2<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$01@glm@@SAHXZ ENDP			; glm::tvec2<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<signed char,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<signed char,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QEAA@CC@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@C$01@glm@@QEAA@CC@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@C$01@glm@@QEAA@CC@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@C$01@glm@@QEAA@C@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@C$01@glm@@QEAA@C@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@C$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@C$01@glm@@QEAA@XZ PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@C$01@glm@@QEAA@XZ ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$01@glm@@QEBAAEBCH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@C$01@glm@@QEBAAEBCH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@C$01@glm@@QEAAAEACH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@C$01@glm@@QEAAAEACH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$01@glm@@SAHXZ PROC			; glm::tvec2<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$01@glm@@SAHXZ ENDP			; glm::tvec2<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 273  : 		--*this;

	dec	QWORD PTR [rcx]

; 274  : 		return Result;

	mov	rax, rdx
	dec	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 265  : 		++*this;

	inc	QWORD PTR [rcx]

; 266  : 		return Result;

	mov	rax, rdx
	inc	QWORD PTR [rcx+8]
	movdqu	XMMWORD PTR [rdx], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	QWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	QWORD PTR [rcx+8]

; 259  : 	}

	ret	0
??F?$tvec2@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned __int64,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	QWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	QWORD PTR [rcx+8]

; 251  : 	}

	ret	0
??E?$tvec2@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@_K$01@glm@@QEAA@_K0@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	QWORD PTR [rcx], rdx

; 57   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	ret	0
??0?$tvec2@_K$01@glm@@QEAA@_K0@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@_K$01@glm@@QEAA@_K@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	QWORD PTR [rcx], rdx

; 52   : 	{}

	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$tvec2@_K$01@glm@@QEAA@_K@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@_K$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@_K$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@_K$01@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	QWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	QWORD PTR [rcx+8], 0
	ret	0
??0?$tvec2@_K$01@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$01@glm@@QEBAAEB_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	ret	0
??A?$tvec2@_K$01@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@_K$01@glm@@QEAAAEA_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 105  : 	}

	ret	0
??A?$tvec2@_K$01@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT

; 256  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 257  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@I$01@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@I$01@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@I$01@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@I$01@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@I$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@I$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@I$01@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@I$01@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$01@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@I$01@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$01@glm@@QEAAAEAIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@I$01@glm@@QEAAAEAIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 273  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 257  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@G$01@glm@@QEAA@GG@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@G$01@glm@@QEAA@GG@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@G$01@glm@@QEAA@G@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@G$01@glm@@QEAA@G@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@G$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@G$01@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$01@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$01@glm@@QEBAAEBGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@G$01@glm@@QEBAAEBGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$01@glm@@QEAAAEAGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@G$01@glm@@QEAAAEAGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 273  : 		--*this;

	dec	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	dec	al
	mov	BYTE PTR [rcx], al

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]

; 265  : 		++*this;

	inc	BYTE PTR [rcx+1]
	mov	WORD PTR [rdx], ax
	inc	al
	mov	BYTE PTR [rcx], al

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT

; 256  : 		--this->x;

	dec	BYTE PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	BYTE PTR [rcx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT

; 248  : 		++this->x;

	inc	BYTE PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	BYTE PTR [rcx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QEAA@EE@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@E$01@glm@@QEAA@EE@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	BYTE PTR [rcx], dl

; 57   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], r8b
	ret	0
??0?$tvec2@E$01@glm@@QEAA@EE@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@E$01@glm@@QEAA@E@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	BYTE PTR [rcx], dl

; 52   : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	ret	0
??0?$tvec2@E$01@glm@@QEAA@E@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@E$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@E$01@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT

; 25   : 				: x(0), y(0)

	and	WORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@E$01@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$01@glm@@QEBAAEBEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 112  : 	}

	ret	0
??A?$tvec2@E$01@glm@@QEBAAEBEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@E$01@glm@@QEAAAEAEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 105  : 	}

	ret	0
??A?$tvec2@E$01@glm@@QEAAAEAEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<double,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [rcx]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 195  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<double,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [rcx]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 187  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@N$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<double,0>::operator--, COMDAT

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<double,0>::operator++, COMDAT

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 38   : 		: x(scalar)

	movsd	QWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$0A@@glm@@SAHXZ PROC			; glm::tvec1<double,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<float,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 194  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 195  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<float,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 186  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 187  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<float,0>::operator--, COMDAT

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<float,0>::operator++, COMDAT

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 38   : 		: x(scalar)

	movss	DWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_J$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_J$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_J$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec1<__int64,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$0A@@glm@@QEAAAEA_JH@Z PROC		; glm::tvec1<__int64,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_J$0A@@glm@@QEAAAEA_JH@Z ENDP		; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$0A@@glm@@SAHXZ PROC			; glm::tvec1<__int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec1<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<int,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<int,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<int,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<int,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@H$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$0A@@glm@@QEAAAEAHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@H$0A@@glm@@QEAAAEAHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<short,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<short,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<short,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	WORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<short,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@F$0A@@glm@@QEAA@F@Z PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$0A@@glm@@QEAA@F@Z ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@F$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<short,0>::tvec1<short,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$0A@@glm@@SAHXZ PROC			; glm::tvec1<short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$0A@@glm@@SAHXZ ENDP			; glm::tvec1<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<signed char,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<signed char,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<signed char,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<signed char,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@C$0A@@glm@@QEAA@C@Z PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$0A@@glm@@QEAA@C@Z ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@C$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$0A@@glm@@SAHXZ PROC			; glm::tvec1<signed char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$0A@@glm@@SAHXZ ENDP			; glm::tvec1<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_K$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_K$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_K$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec1<unsigned __int64,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$0A@@glm@@QEAAAEA_KH@Z PROC		; glm::tvec1<unsigned __int64,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_K$0A@@glm@@QEAAAEA_KH@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned int,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned int,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned int,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned int,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned short,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned short,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned short,0>::operator--, COMDAT

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned short,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@G$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned char,0>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned char,0>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned char,0>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned char,0>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@E$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<double,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [rcx]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 195  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@N$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<double,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [rcx]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 187  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@N$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<double,1>::operator--, COMDAT

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@N$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<double,1>::operator++, COMDAT

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@N$00@glm@@QEAA@N@Z PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT

; 38   : 		: x(scalar)

	movsd	QWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$00@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<double,1>::tvec1<double,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@N$00@glm@@QEAA@XZ PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$00@glm@@QEAA@XZ ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$00@glm@@QEBAAEBNH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@N$00@glm@@QEBAAEBNH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$00@glm@@QEAAAEANH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@N$00@glm@@QEAAAEANH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$00@glm@@SAHXZ PROC			; glm::tvec1<double,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$00@glm@@SAHXZ ENDP			; glm::tvec1<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<float,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 194  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 195  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@M$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<float,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 186  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 187  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@M$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<float,1>::operator--, COMDAT

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@M$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<float,1>::operator++, COMDAT

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@M$00@glm@@QEAA@M@Z PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT

; 38   : 		: x(scalar)

	movss	DWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$00@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<float,1>::tvec1<float,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@M$00@glm@@QEAA@XZ PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$00@glm@@QEAA@XZ ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$00@glm@@SAHXZ PROC			; glm::tvec1<float,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$00@glm@@SAHXZ ENDP			; glm::tvec1<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_J$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_J$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_J$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_J$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_J$00@glm@@QEAA@_J@Z PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$00@glm@@QEAA@_J@Z ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_J$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_J$00@glm@@QEAA@XZ PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$00@glm@@QEAA@XZ ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$00@glm@@QEBAAEB_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_J$00@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$00@glm@@QEAAAEA_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_J$00@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$00@glm@@SAHXZ PROC			; glm::tvec1<__int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$00@glm@@SAHXZ ENDP			; glm::tvec1<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<int,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@H$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<int,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@H$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<int,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@H$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<int,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@H$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@H$00@glm@@QEAA@H@Z PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$00@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@H$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<int,1>::tvec1<int,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@H$00@glm@@QEAA@XZ PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$00@glm@@QEAA@XZ ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$00@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@H$00@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$00@glm@@QEAAAEAHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@H$00@glm@@QEAAAEAHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$00@glm@@SAHXZ PROC			; glm::tvec1<int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$00@glm@@SAHXZ ENDP			; glm::tvec1<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<short,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@F$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<short,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@F$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<short,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	WORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@F$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<short,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@F$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@F$00@glm@@QEAA@F@Z PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$00@glm@@QEAA@F@Z ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@F$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<short,1>::tvec1<short,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@F$00@glm@@QEAA@XZ PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$00@glm@@QEAA@XZ ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$00@glm@@QEBAAEBFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@F$00@glm@@QEBAAEBFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$00@glm@@QEAAAEAFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@F$00@glm@@QEAAAEAFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$00@glm@@SAHXZ PROC			; glm::tvec1<short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$00@glm@@SAHXZ ENDP			; glm::tvec1<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@C$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@C$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<signed char,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@C$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<signed char,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@C$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@C$00@glm@@QEAA@C@Z PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$00@glm@@QEAA@C@Z ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@C$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@C$00@glm@@QEAA@XZ PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$00@glm@@QEAA@XZ ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$00@glm@@QEBAAEBCH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@C$00@glm@@QEBAAEBCH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$00@glm@@QEAAAEACH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@C$00@glm@@QEAAAEACH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$00@glm@@SAHXZ PROC			; glm::tvec1<signed char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$00@glm@@SAHXZ ENDP			; glm::tvec1<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_K$00@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_K$00@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_K$00@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_K$00@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_K$00@glm@@QEAA@_K@Z PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$00@glm@@QEAA@_K@Z ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_K$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_K$00@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$00@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$00@glm@@QEBAAEB_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_K$00@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$00@glm@@QEAAAEA_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_K$00@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@I$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@I$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@I$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@I$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@I$00@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$00@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@I$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@I$00@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$00@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$00@glm@@QEBAAEBIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@I$00@glm@@QEBAAEBIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$00@glm@@QEAAAEAIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@I$00@glm@@QEAAAEAIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@G$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@G$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@G$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@G$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@G$00@glm@@QEAA@G@Z PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$00@glm@@QEAA@G@Z ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@G$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@G$00@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$00@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$00@glm@@QEBAAEBGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@G$00@glm@@QEBAAEBGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$00@glm@@QEAAAEAGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@G$00@glm@@QEAAAEAGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@E$00@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@E$00@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@E$00@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@E$00@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@E$00@glm@@QEAA@E@Z PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$00@glm@@QEAA@E@Z ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@E$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@E$00@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$00@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$00@glm@@QEBAAEBEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@E$00@glm@@QEBAAEBEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$00@glm@@QEAAAEAEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@E$00@glm@@QEAAAEAEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<double,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [rcx]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 195  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@N$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<double,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [rcx]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	QWORD PTR [rdx], rax

; 187  : 		return Result;

	mov	rax, rdx
	movsd	QWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@N$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<double,2>::operator--, COMDAT

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@N$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<double,2>::operator++, COMDAT

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@N$01@glm@@QEAA@N@Z PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT

; 38   : 		: x(scalar)

	movsd	QWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$01@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<double,2>::tvec1<double,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@N$01@glm@@QEAA@XZ PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@N$01@glm@@QEAA@XZ ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$01@glm@@QEBAAEBNH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@N$01@glm@@QEBAAEBNH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@N$01@glm@@QEAAAEANH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@N$01@glm@@QEAAAEANH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$01@glm@@SAHXZ PROC			; glm::tvec1<double,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$01@glm@@SAHXZ ENDP			; glm::tvec1<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<float,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 194  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 195  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 196  : 	}

	ret	0
??F?$tvec1@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@M$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<float,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 186  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rdx], eax

; 187  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0

; 188  : 	}

	ret	0
??E?$tvec1@M$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<float,2>::operator--, COMDAT

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@M$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<float,2>::operator++, COMDAT

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@M$01@glm@@QEAA@M@Z PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT

; 38   : 		: x(scalar)

	movss	DWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<float,2>::tvec1<float,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@M$01@glm@@QEAA@XZ PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@M$01@glm@@QEAA@XZ ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$01@glm@@SAHXZ PROC			; glm::tvec1<float,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$01@glm@@SAHXZ ENDP			; glm::tvec1<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_J$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<__int64,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_J$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_J$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<__int64,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_J$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_J$01@glm@@QEAA@_J@Z PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$01@glm@@QEAA@_J@Z ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_J$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_J$01@glm@@QEAA@XZ PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_J$01@glm@@QEAA@XZ ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$01@glm@@QEBAAEB_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_J$01@glm@@QEBAAEB_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QEAAAEA_JH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_J$01@glm@@QEAAAEA_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_J$01@glm@@QEAAAEA_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$01@glm@@SAHXZ PROC			; glm::tvec1<__int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$01@glm@@SAHXZ ENDP			; glm::tvec1<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<int,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@H$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<int,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@H$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<int,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@H$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<int,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@H$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@H$01@glm@@QEAA@H@Z PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$01@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@H$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<int,2>::tvec1<int,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@H$01@glm@@QEAA@XZ PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@H$01@glm@@QEAA@XZ ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$01@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@H$01@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@H$01@glm@@QEAAAEAHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@H$01@glm@@QEAAAEAHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$01@glm@@SAHXZ PROC			; glm::tvec1<int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$01@glm@@SAHXZ ENDP			; glm::tvec1<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<short,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@F$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<short,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@F$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<short,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	WORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@F$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<short,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@F$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@F$01@glm@@QEAA@F@Z PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$01@glm@@QEAA@F@Z ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@F$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<short,2>::tvec1<short,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@F$01@glm@@QEAA@XZ PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@F$01@glm@@QEAA@XZ ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$01@glm@@QEBAAEBFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@F$01@glm@@QEBAAEBFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@F$01@glm@@QEAAAEAFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@F$01@glm@@QEAAAEAFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$01@glm@@SAHXZ PROC			; glm::tvec1<short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$01@glm@@SAHXZ ENDP			; glm::tvec1<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@C$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@C$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<signed char,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@C$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<signed char,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@C$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@C$01@glm@@QEAA@C@Z PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$01@glm@@QEAA@C@Z ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@C$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@C$01@glm@@QEAA@XZ PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@C$01@glm@@QEAA@XZ ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$01@glm@@QEBAAEBCH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@C$01@glm@@QEBAAEBCH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@C$01@glm@@QEAAAEACH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@C$01@glm@@QEAAAEACH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$01@glm@@SAHXZ PROC			; glm::tvec1<signed char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$01@glm@@SAHXZ ENDP			; glm::tvec1<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 194  : 		--*this;

	dec	rax
	mov	QWORD PTR [rcx], rax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@_K$01@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 186  : 		++*this;

	inc	rax
	mov	QWORD PTR [rcx], rax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@_K$01@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	QWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@_K$01@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<unsigned __int64,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	QWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@_K$01@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@_K$01@glm@@QEAA@_K@Z PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT

; 38   : 		: x(scalar)

	mov	QWORD PTR [rcx], rdx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$01@glm@@QEAA@_K@Z ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@_K$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@_K$01@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT

; 12   : 				: x(0)

	and	QWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@_K$01@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$01@glm@@QEBAAEB_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	ret	0
??A?$tvec1@_K$01@glm@@QEBAAEB_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QEAAAEA_KH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@_K$01@glm@@QEAAAEA_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*8]

; 74   : 	}

	ret	0
??A?$tvec1@_K$01@glm@@QEAAAEA_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 194  : 		--*this;

	dec	eax
	mov	DWORD PTR [rcx], eax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@I$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 186  : 		++*this;

	inc	eax
	mov	DWORD PTR [rcx], eax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@I$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	DWORD PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@I$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	DWORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@I$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@I$01@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT

; 38   : 		: x(scalar)

	mov	DWORD PTR [rcx], edx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$01@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@I$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@I$01@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT

; 12   : 				: x(0)

	and	DWORD PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@I$01@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$01@glm@@QEBAAEBIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	ret	0
??A?$tvec1@I$01@glm@@QEBAAEBIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@I$01@glm@@QEAAAEAIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	ret	0
??A?$tvec1@I$01@glm@@QEAAAEAIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 194  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@G$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	movzx	eax, WORD PTR [rcx]
	mov	WORD PTR [rdx], ax

; 186  : 		++*this;

	inc	ax
	mov	WORD PTR [rcx], ax

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@G$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@G$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	WORD PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@G$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@G$01@glm@@QEAA@G@Z PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT

; 38   : 		: x(scalar)

	mov	WORD PTR [rcx], dx

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$01@glm@@QEAA@G@Z ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@G$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@G$01@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [rcx], ax

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@G$01@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$01@glm@@QEBAAEBGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 81   : 	}

	ret	0
??A?$tvec1@G$01@glm@@QEBAAEBGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@G$01@glm@@QEAAAEAGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 74   : 	}

	ret	0
??A?$tvec1@G$01@glm@@QEAAAEAGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec1@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT

; 193  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 194  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al

; 195  : 		return Result;

	mov	rax, rdx

; 196  : 	}

	ret	0
??F?$tvec1@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec1@E$01@glm@@QEAA?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT

; 185  : 		tvec1<T, P> Result(*this);

	mov	al, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 186  : 		++*this;

	inc	al
	mov	BYTE PTR [rcx], al

; 187  : 		return Result;

	mov	rax, rdx

; 188  : 	}

	ret	0
??E?$tvec1@E$01@glm@@QEAA?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec1@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT

; 178  : 		--this->x;

	dec	BYTE PTR [rcx]

; 179  : 		return *this;

	mov	rax, rcx

; 180  : 	}

	ret	0
??F?$tvec1@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec1@E$01@glm@@QEAAAEAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT

; 171  : 		++this->x;

	inc	BYTE PTR [rcx]

; 172  : 		return *this;

	mov	rax, rcx

; 173  : 	}

	ret	0
??E?$tvec1@E$01@glm@@QEAAAEAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec1@E$01@glm@@QEAA@E@Z PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT

; 38   : 		: x(scalar)

	mov	BYTE PTR [rcx], dl

; 39   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$01@glm@@QEAA@E@Z ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec1@E$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT

; 34   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec1@E$01@glm@@QEAA@XZ PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT

; 12   : 				: x(0)

	mov	BYTE PTR [rcx], 0

; 14   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec1@E$01@glm@@QEAA@XZ ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$01@glm@@QEBAAEBEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 81   : 	}

	ret	0
??A?$tvec1@E$01@glm@@QEBAAEBEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec1@E$01@glm@@QEAAAEAEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 74   : 	}

	ret	0
??A?$tvec1@E$01@glm@@QEAAAEAEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned int,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	dec	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	dec	eax
	mov	DWORD PTR [rcx], eax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned int,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	inc	DWORD PTR [rcx+4]
	mov	QWORD PTR [rdx], rax
	inc	eax
	mov	DWORD PTR [rcx], eax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@I$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned int,0>::operator--, COMDAT

; 256  : 		--this->x;

	or	eax, -1					; ffffffffH
	add	DWORD PTR [rcx], eax

; 257  : 		--this->y;

	add	DWORD PTR [rcx+4], eax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned int,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	DWORD PTR [rcx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	DWORD PTR [rcx], edx

; 57   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	DWORD PTR [rcx], edx

; 52   : 	{}

	mov	rax, rcx
	mov	DWORD PTR [rcx+4], edx
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<signed char,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, -1
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<signed char,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@C$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<signed char,0>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, -1
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<signed char,0>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@C$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QEAA@CCCC@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@C$0A@@glm@@QEAA@CCCC@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@C$0A@@glm@@QEAA@CCCC@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@C$0A@@glm@@QEAA@C@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@C$0A@@glm@@QEAA@C@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@C$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned char,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 484  : 		--*this;

	dec	al
	mov	BYTE PTR [rcx], al
	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx+1], al
	add	BYTE PTR [rcx+2], al
	add	BYTE PTR [rcx+3], al

; 485  : 		return Result;

	mov	rax, rdx

; 486  : 	}

	ret	0
??F?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<unsigned char,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 476  : 		++*this;

	mov	r8b, 1
	add	BYTE PTR [rcx+1], r8b
	add	BYTE PTR [rcx+2], r8b
	add	BYTE PTR [rcx+3], r8b
	mov	DWORD PTR [rdx], eax
	add	al, r8b
	mov	BYTE PTR [rcx], al

; 477  : 		return Result;

	mov	rax, rdx

; 478  : 	}

	ret	0
??E?$tvec4@E$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned char,0>::operator--, COMDAT

; 465  : 		--this->x;

	mov	al, 255					; 000000ffH
	add	BYTE PTR [rcx], al

; 466  : 		--this->y;

	add	BYTE PTR [rcx+1], al

; 467  : 		--this->z;

	add	BYTE PTR [rcx+2], al

; 468  : 		--this->w;

	add	BYTE PTR [rcx+3], al

; 469  : 		return *this;

	mov	rax, rcx

; 470  : 	}

	ret	0
??F?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<unsigned char,0>::operator++, COMDAT

; 455  : 		++this->x;

	mov	al, 1
	add	BYTE PTR [rcx], al

; 456  : 		++this->y;

	add	BYTE PTR [rcx+1], al

; 457  : 		++this->z;

	add	BYTE PTR [rcx+2], al

; 458  : 		++this->w;

	add	BYTE PTR [rcx+3], al

; 459  : 		return *this;

	mov	rax, rcx

; 460  : 	}

	ret	0
??E?$tvec4@E$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QEAA@EEEE@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@E$0A@@glm@@QEAA@EEEE@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR d$[rsp]
	mov	BYTE PTR [rcx+3], al

; 193  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx], dl
	mov	BYTE PTR [rcx+1], r8b
	mov	BYTE PTR [rcx+2], r9b
	ret	0
??0?$tvec4@E$0A@@glm@@QEAA@EEEE@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	BYTE PTR [rcx], dl

; 188  : 	{}

	mov	rax, rcx
	mov	BYTE PTR [rcx+1], dl
	mov	BYTE PTR [rcx+2], dl
	mov	BYTE PTR [rcx+3], dl
	ret	0
??0?$tvec4@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@E$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 339  : 	}

	ret	0
??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	add	rax, rcx

; 332  : 	}

	ret	0
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<float,0>::operator--, COMDAT

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 484  : 		--*this;
; 485  : 		return Result;

	mov	rax, rdx
	movdqu	XMMWORD PTR [rdx], xmm0
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 486  : 	}

	ret	0
??F?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec4<float,0>::operator++, COMDAT

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [rcx]

; 476  : 		++*this;
; 477  : 		return Result;

	mov	rax, rdx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movdqu	XMMWORD PTR [rdx], xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 478  : 	}

	ret	0
??E?$tvec4@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<float,0>::operator--, COMDAT

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	rax, rcx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [rcx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec4<float,0>::operator++, COMDAT

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [rcx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	rax, rcx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1

; 460  : 	}

	ret	0
??E?$tvec4@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR d$[rsp]

; 193  : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+12], xmm0
	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

	shufps	xmm1, xmm1, 0
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm1
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 183  : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 163  : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<short,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 273  : 		--*this;

	dec	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	dec	ax
	mov	WORD PTR [rcx], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<short,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@F$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<short,0>::operator--, COMDAT

; 256  : 		--this->x;

	dec	WORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	dec	WORD PTR [rcx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<short,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@F$0A@@glm@@QEAA@FF@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@FF@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@F$0A@@glm@@QEAA@F@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@F@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@F$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned short,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rdx], eax

; 273  : 		--*this;

	dec	ax
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx+2], ax

; 274  : 		return Result;

	mov	rax, rdx

; 275  : 	}

	ret	0
??F?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<unsigned short,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR [rcx]

; 265  : 		++*this;

	inc	WORD PTR [rcx+2]
	mov	DWORD PTR [rdx], eax
	inc	ax
	mov	WORD PTR [rcx], ax

; 266  : 		return Result;

	mov	rax, rdx

; 267  : 	}

	ret	0
??E?$tvec2@G$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned short,0>::operator--, COMDAT

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [rcx], ax

; 257  : 		--this->y;

	add	WORD PTR [rcx+2], ax

; 258  : 		return *this;

	mov	rax, rcx

; 259  : 	}

	ret	0
??F?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<unsigned short,0>::operator++, COMDAT

; 248  : 		++this->x;

	inc	WORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	inc	WORD PTR [rcx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@G$0A@@glm@@QEAA@GG@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	mov	WORD PTR [rcx], dx

; 57   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], r8w
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@GG@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	mov	WORD PTR [rcx], dx

; 52   : 	{}

	mov	rax, rcx
	mov	WORD PTR [rcx+2], dx
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@G$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 27   : 		{}

	mov	rax, rcx
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	ret	0
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	ret	0
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??F?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<float,0>::operator--, COMDAT

; 272  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 273  : 		--*this;

	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 274  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 275  : 	}

	ret	0
??F?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$ = 24
??E?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec2<float,0>::operator++, COMDAT

; 264  : 		tvec2<T, P> Result(*this);

	mov	rax, QWORD PTR [rcx]

; 265  : 		++*this;

	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	QWORD PTR [rdx], rax

; 266  : 		return Result;

	mov	rax, rdx
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 267  : 	}

	ret	0
??E?$tvec2@M$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<float,0>::operator--, COMDAT

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [rcx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	rax, rcx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec2<float,0>::operator++, COMDAT

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [rcx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	rax, rcx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
s1$ = 16
s2$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 56   : 		: x(s1), y(s2)

	movss	DWORD PTR [rcx], xmm1

; 57   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 8
scalar$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 51   : 		: x(scalar), y(scalar)

	movss	DWORD PTR [rcx], xmm1

; 52   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm1
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 47   : 	{}

	mov	rax, rcx
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 25   : 				: x(0), y(0)

	and	DWORD PTR [rcx], 0

; 27   : 		{}

	mov	rax, rcx
	and	DWORD PTR [rcx+4], 0
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	ret	0
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogspy
; File d:\work\github\calgarygame2017\sdks\glm-0.9.8.5\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 8
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 293  : 	return (_CSTD sqrtf(_Xx));

	rex_jmp	QWORD PTR __imp_sqrtf
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 8
?sin@@YAMM@Z PROC					; sin, COMDAT

; 283  : 	return (_CSTD sinf(_Xx));

	rex_jmp	QWORD PTR __imp_sinf
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 8
?cos@@YAMM@Z PROC					; cos, COMDAT

; 76   : 	return (_CSTD cosf(_Xx));

	rex_jmp	QWORD PTR __imp_cosf
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN12:
	test	r8, r8
	je	SHORT $LN10@vector
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	rbx, r8
	mov	rbp, rdx
	mov	rdi, rcx
$LL2@vector:
	mov	rcx, rdi
	call	rsi
	add	rdi, rbp
	sub	rbx, 1
	jne	SHORT $LL2@vector
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
$LN10@vector:
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
